// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/packing/vector_bin_packing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto;
namespace operations_research {
namespace packing {
namespace vbp {
class Item;
struct ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class VectorBinPackingOneBinInSolution;
struct VectorBinPackingOneBinInSolutionDefaultTypeInternal;
extern VectorBinPackingOneBinInSolutionDefaultTypeInternal _VectorBinPackingOneBinInSolution_default_instance_;
class VectorBinPackingProblem;
struct VectorBinPackingProblemDefaultTypeInternal;
extern VectorBinPackingProblemDefaultTypeInternal _VectorBinPackingProblem_default_instance_;
class VectorBinPackingSolution;
struct VectorBinPackingSolutionDefaultTypeInternal;
extern VectorBinPackingSolutionDefaultTypeInternal _VectorBinPackingSolution_default_instance_;
}  // namespace vbp
}  // namespace packing
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> ::operations_research::packing::vbp::Item* Arena::CreateMaybeMessage<::operations_research::packing::vbp::Item>(Arena*);
template<> ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution* Arena::CreateMaybeMessage<::operations_research::packing::vbp::VectorBinPackingOneBinInSolution>(Arena*);
template<> ::operations_research::packing::vbp::VectorBinPackingProblem* Arena::CreateMaybeMessage<::operations_research::packing::vbp::VectorBinPackingProblem>(Arena*);
template<> ::operations_research::packing::vbp::VectorBinPackingSolution* Arena::CreateMaybeMessage<::operations_research::packing::vbp::VectorBinPackingSolution>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace operations_research {
namespace packing {
namespace vbp {

enum VectorBinPackingSolveStatus : int {
  VECTOR_BIN_PACKING_SOLVE_STATUS_UNSPECIFIED = 0,
  OPTIMAL = 1,
  FEASIBLE = 2,
  INFEASIBLE = 3,
  VectorBinPackingSolveStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VectorBinPackingSolveStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VectorBinPackingSolveStatus_IsValid(int value);
constexpr VectorBinPackingSolveStatus VectorBinPackingSolveStatus_MIN = VECTOR_BIN_PACKING_SOLVE_STATUS_UNSPECIFIED;
constexpr VectorBinPackingSolveStatus VectorBinPackingSolveStatus_MAX = INFEASIBLE;
constexpr int VectorBinPackingSolveStatus_ARRAYSIZE = VectorBinPackingSolveStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VectorBinPackingSolveStatus_descriptor();
template<typename T>
inline const std::string& VectorBinPackingSolveStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VectorBinPackingSolveStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VectorBinPackingSolveStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VectorBinPackingSolveStatus_descriptor(), enum_t_value);
}
inline bool VectorBinPackingSolveStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VectorBinPackingSolveStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VectorBinPackingSolveStatus>(
    VectorBinPackingSolveStatus_descriptor(), name, value);
}
// ===================================================================

class Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.packing.vbp.Item) */ {
 public:
  inline Item() : Item(nullptr) {}
  ~Item() override;
  explicit PROTOBUF_CONSTEXPR Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Item(const Item& from);
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Item& from) {
    Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.packing.vbp.Item";
  }
  protected:
  explicit Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceUsageFieldNumber = 2,
    kNameFieldNumber = 1,
    kNumCopiesFieldNumber = 3,
    kMaxNumberOfCopiesPerBinFieldNumber = 4,
    kPenaltyPerMissingCopyFieldNumber = 6,
    kNumOptionalCopiesFieldNumber = 5,
  };
  // repeated int64 resource_usage = 2;
  int resource_usage_size() const;
  private:
  int _internal_resource_usage_size() const;
  public:
  void clear_resource_usage();
  private:
  int64_t _internal_resource_usage(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_resource_usage() const;
  void _internal_add_resource_usage(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_resource_usage();
  public:
  int64_t resource_usage(int index) const;
  void set_resource_usage(int index, int64_t value);
  void add_resource_usage(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      resource_usage() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_resource_usage();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 num_copies = 3;
  void clear_num_copies();
  int32_t num_copies() const;
  void set_num_copies(int32_t value);
  private:
  int32_t _internal_num_copies() const;
  void _internal_set_num_copies(int32_t value);
  public:

  // int32 max_number_of_copies_per_bin = 4;
  void clear_max_number_of_copies_per_bin();
  int32_t max_number_of_copies_per_bin() const;
  void set_max_number_of_copies_per_bin(int32_t value);
  private:
  int32_t _internal_max_number_of_copies_per_bin() const;
  void _internal_set_max_number_of_copies_per_bin(int32_t value);
  public:

  // double penalty_per_missing_copy = 6;
  void clear_penalty_per_missing_copy();
  double penalty_per_missing_copy() const;
  void set_penalty_per_missing_copy(double value);
  private:
  double _internal_penalty_per_missing_copy() const;
  void _internal_set_penalty_per_missing_copy(double value);
  public:

  // int32 num_optional_copies = 5;
  void clear_num_optional_copies();
  int32_t num_optional_copies() const;
  void set_num_optional_copies(int32_t value);
  private:
  int32_t _internal_num_optional_copies() const;
  void _internal_set_num_optional_copies(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.packing.vbp.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > resource_usage_;
    mutable std::atomic<int> _resource_usage_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t num_copies_;
    int32_t max_number_of_copies_per_bin_;
    double penalty_per_missing_copy_;
    int32_t num_optional_copies_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto;
};
// -------------------------------------------------------------------

class VectorBinPackingProblem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.packing.vbp.VectorBinPackingProblem) */ {
 public:
  inline VectorBinPackingProblem() : VectorBinPackingProblem(nullptr) {}
  ~VectorBinPackingProblem() override;
  explicit PROTOBUF_CONSTEXPR VectorBinPackingProblem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorBinPackingProblem(const VectorBinPackingProblem& from);
  VectorBinPackingProblem(VectorBinPackingProblem&& from) noexcept
    : VectorBinPackingProblem() {
    *this = ::std::move(from);
  }

  inline VectorBinPackingProblem& operator=(const VectorBinPackingProblem& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBinPackingProblem& operator=(VectorBinPackingProblem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBinPackingProblem& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBinPackingProblem* internal_default_instance() {
    return reinterpret_cast<const VectorBinPackingProblem*>(
               &_VectorBinPackingProblem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VectorBinPackingProblem& a, VectorBinPackingProblem& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBinPackingProblem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBinPackingProblem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBinPackingProblem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBinPackingProblem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorBinPackingProblem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorBinPackingProblem& from) {
    VectorBinPackingProblem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBinPackingProblem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.packing.vbp.VectorBinPackingProblem";
  }
  protected:
  explicit VectorBinPackingProblem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceCapacityFieldNumber = 2,
    kResourceNameFieldNumber = 3,
    kItemFieldNumber = 4,
    kNameFieldNumber = 1,
    kCostPerBinFieldNumber = 6,
    kMaxBinsFieldNumber = 5,
  };
  // repeated int64 resource_capacity = 2;
  int resource_capacity_size() const;
  private:
  int _internal_resource_capacity_size() const;
  public:
  void clear_resource_capacity();
  private:
  int64_t _internal_resource_capacity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_resource_capacity() const;
  void _internal_add_resource_capacity(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_resource_capacity();
  public:
  int64_t resource_capacity(int index) const;
  void set_resource_capacity(int index, int64_t value);
  void add_resource_capacity(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      resource_capacity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_resource_capacity();

  // repeated string resource_name = 3;
  int resource_name_size() const;
  private:
  int _internal_resource_name_size() const;
  public:
  void clear_resource_name();
  const std::string& resource_name(int index) const;
  std::string* mutable_resource_name(int index);
  void set_resource_name(int index, const std::string& value);
  void set_resource_name(int index, std::string&& value);
  void set_resource_name(int index, const char* value);
  void set_resource_name(int index, const char* value, size_t size);
  std::string* add_resource_name();
  void add_resource_name(const std::string& value);
  void add_resource_name(std::string&& value);
  void add_resource_name(const char* value);
  void add_resource_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& resource_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_resource_name();
  private:
  const std::string& _internal_resource_name(int index) const;
  std::string* _internal_add_resource_name();
  public:

  // repeated .operations_research.packing.vbp.Item item = 4;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::operations_research::packing::vbp::Item* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::packing::vbp::Item >*
      mutable_item();
  private:
  const ::operations_research::packing::vbp::Item& _internal_item(int index) const;
  ::operations_research::packing::vbp::Item* _internal_add_item();
  public:
  const ::operations_research::packing::vbp::Item& item(int index) const;
  ::operations_research::packing::vbp::Item* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::packing::vbp::Item >&
      item() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional double cost_per_bin = 6;
  bool has_cost_per_bin() const;
  private:
  bool _internal_has_cost_per_bin() const;
  public:
  void clear_cost_per_bin();
  double cost_per_bin() const;
  void set_cost_per_bin(double value);
  private:
  double _internal_cost_per_bin() const;
  void _internal_set_cost_per_bin(double value);
  public:

  // int32 max_bins = 5;
  void clear_max_bins();
  int32_t max_bins() const;
  void set_max_bins(int32_t value);
  private:
  int32_t _internal_max_bins() const;
  void _internal_set_max_bins(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.packing.vbp.VectorBinPackingProblem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > resource_capacity_;
    mutable std::atomic<int> _resource_capacity_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> resource_name_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::packing::vbp::Item > item_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    double cost_per_bin_;
    int32_t max_bins_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto;
};
// -------------------------------------------------------------------

class VectorBinPackingOneBinInSolution final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.packing.vbp.VectorBinPackingOneBinInSolution) */ {
 public:
  inline VectorBinPackingOneBinInSolution() : VectorBinPackingOneBinInSolution(nullptr) {}
  ~VectorBinPackingOneBinInSolution() override;
  explicit PROTOBUF_CONSTEXPR VectorBinPackingOneBinInSolution(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorBinPackingOneBinInSolution(const VectorBinPackingOneBinInSolution& from);
  VectorBinPackingOneBinInSolution(VectorBinPackingOneBinInSolution&& from) noexcept
    : VectorBinPackingOneBinInSolution() {
    *this = ::std::move(from);
  }

  inline VectorBinPackingOneBinInSolution& operator=(const VectorBinPackingOneBinInSolution& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBinPackingOneBinInSolution& operator=(VectorBinPackingOneBinInSolution&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBinPackingOneBinInSolution& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBinPackingOneBinInSolution* internal_default_instance() {
    return reinterpret_cast<const VectorBinPackingOneBinInSolution*>(
               &_VectorBinPackingOneBinInSolution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VectorBinPackingOneBinInSolution& a, VectorBinPackingOneBinInSolution& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBinPackingOneBinInSolution* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBinPackingOneBinInSolution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBinPackingOneBinInSolution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBinPackingOneBinInSolution>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorBinPackingOneBinInSolution& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorBinPackingOneBinInSolution& from) {
    VectorBinPackingOneBinInSolution::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBinPackingOneBinInSolution* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.packing.vbp.VectorBinPackingOneBinInSolution";
  }
  protected:
  explicit VectorBinPackingOneBinInSolution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIndicesFieldNumber = 1,
    kItemCopiesFieldNumber = 2,
  };
  // repeated int32 item_indices = 1;
  int item_indices_size() const;
  private:
  int _internal_item_indices_size() const;
  public:
  void clear_item_indices();
  private:
  int32_t _internal_item_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_item_indices() const;
  void _internal_add_item_indices(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_item_indices();
  public:
  int32_t item_indices(int index) const;
  void set_item_indices(int index, int32_t value);
  void add_item_indices(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      item_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_item_indices();

  // repeated int32 item_copies = 2;
  int item_copies_size() const;
  private:
  int _internal_item_copies_size() const;
  public:
  void clear_item_copies();
  private:
  int32_t _internal_item_copies(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_item_copies() const;
  void _internal_add_item_copies(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_item_copies();
  public:
  int32_t item_copies(int index) const;
  void set_item_copies(int index, int32_t value);
  void add_item_copies(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      item_copies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_item_copies();

  // @@protoc_insertion_point(class_scope:operations_research.packing.vbp.VectorBinPackingOneBinInSolution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > item_indices_;
    mutable std::atomic<int> _item_indices_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > item_copies_;
    mutable std::atomic<int> _item_copies_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto;
};
// -------------------------------------------------------------------

class VectorBinPackingSolution final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.packing.vbp.VectorBinPackingSolution) */ {
 public:
  inline VectorBinPackingSolution() : VectorBinPackingSolution(nullptr) {}
  ~VectorBinPackingSolution() override;
  explicit PROTOBUF_CONSTEXPR VectorBinPackingSolution(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorBinPackingSolution(const VectorBinPackingSolution& from);
  VectorBinPackingSolution(VectorBinPackingSolution&& from) noexcept
    : VectorBinPackingSolution() {
    *this = ::std::move(from);
  }

  inline VectorBinPackingSolution& operator=(const VectorBinPackingSolution& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBinPackingSolution& operator=(VectorBinPackingSolution&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBinPackingSolution& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBinPackingSolution* internal_default_instance() {
    return reinterpret_cast<const VectorBinPackingSolution*>(
               &_VectorBinPackingSolution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VectorBinPackingSolution& a, VectorBinPackingSolution& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBinPackingSolution* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBinPackingSolution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBinPackingSolution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBinPackingSolution>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorBinPackingSolution& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorBinPackingSolution& from) {
    VectorBinPackingSolution::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBinPackingSolution* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.packing.vbp.VectorBinPackingSolution";
  }
  protected:
  explicit VectorBinPackingSolution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBinsFieldNumber = 2,
    kSolverInfoFieldNumber = 1,
    kObjectiveValueFieldNumber = 4,
    kSolveTimeInSecondsFieldNumber = 5,
    kArcFlowTimeInSecondsFieldNumber = 6,
    kStatusFieldNumber = 3,
  };
  // repeated .operations_research.packing.vbp.VectorBinPackingOneBinInSolution bins = 2;
  int bins_size() const;
  private:
  int _internal_bins_size() const;
  public:
  void clear_bins();
  ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution* mutable_bins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution >*
      mutable_bins();
  private:
  const ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution& _internal_bins(int index) const;
  ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution* _internal_add_bins();
  public:
  const ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution& bins(int index) const;
  ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution* add_bins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution >&
      bins() const;

  // string solver_info = 1;
  void clear_solver_info();
  const std::string& solver_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_solver_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_solver_info();
  PROTOBUF_NODISCARD std::string* release_solver_info();
  void set_allocated_solver_info(std::string* solver_info);
  private:
  const std::string& _internal_solver_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_solver_info(const std::string& value);
  std::string* _internal_mutable_solver_info();
  public:

  // double objective_value = 4;
  void clear_objective_value();
  double objective_value() const;
  void set_objective_value(double value);
  private:
  double _internal_objective_value() const;
  void _internal_set_objective_value(double value);
  public:

  // double solve_time_in_seconds = 5;
  void clear_solve_time_in_seconds();
  double solve_time_in_seconds() const;
  void set_solve_time_in_seconds(double value);
  private:
  double _internal_solve_time_in_seconds() const;
  void _internal_set_solve_time_in_seconds(double value);
  public:

  // double arc_flow_time_in_seconds = 6;
  void clear_arc_flow_time_in_seconds();
  double arc_flow_time_in_seconds() const;
  void set_arc_flow_time_in_seconds(double value);
  private:
  double _internal_arc_flow_time_in_seconds() const;
  void _internal_set_arc_flow_time_in_seconds(double value);
  public:

  // .operations_research.packing.vbp.VectorBinPackingSolveStatus status = 3;
  void clear_status();
  ::operations_research::packing::vbp::VectorBinPackingSolveStatus status() const;
  void set_status(::operations_research::packing::vbp::VectorBinPackingSolveStatus value);
  private:
  ::operations_research::packing::vbp::VectorBinPackingSolveStatus _internal_status() const;
  void _internal_set_status(::operations_research::packing::vbp::VectorBinPackingSolveStatus value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.packing.vbp.VectorBinPackingSolution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution > bins_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr solver_info_;
    double objective_value_;
    double solve_time_in_seconds_;
    double arc_flow_time_in_seconds_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Item

// string name = 1;
inline void Item::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Item::name() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.Item.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Item::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.Item.name)
}
inline std::string* Item::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:operations_research.packing.vbp.Item.name)
  return _s;
}
inline const std::string& Item::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Item::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Item::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Item::release_name() {
  // @@protoc_insertion_point(field_release:operations_research.packing.vbp.Item.name)
  return _impl_.name_.Release();
}
inline void Item::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.packing.vbp.Item.name)
}

// repeated int64 resource_usage = 2;
inline int Item::_internal_resource_usage_size() const {
  return _impl_.resource_usage_.size();
}
inline int Item::resource_usage_size() const {
  return _internal_resource_usage_size();
}
inline void Item::clear_resource_usage() {
  _impl_.resource_usage_.Clear();
}
inline int64_t Item::_internal_resource_usage(int index) const {
  return _impl_.resource_usage_.Get(index);
}
inline int64_t Item::resource_usage(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.Item.resource_usage)
  return _internal_resource_usage(index);
}
inline void Item::set_resource_usage(int index, int64_t value) {
  _impl_.resource_usage_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.Item.resource_usage)
}
inline void Item::_internal_add_resource_usage(int64_t value) {
  _impl_.resource_usage_.Add(value);
}
inline void Item::add_resource_usage(int64_t value) {
  _internal_add_resource_usage(value);
  // @@protoc_insertion_point(field_add:operations_research.packing.vbp.Item.resource_usage)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Item::_internal_resource_usage() const {
  return _impl_.resource_usage_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Item::resource_usage() const {
  // @@protoc_insertion_point(field_list:operations_research.packing.vbp.Item.resource_usage)
  return _internal_resource_usage();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Item::_internal_mutable_resource_usage() {
  return &_impl_.resource_usage_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Item::mutable_resource_usage() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.packing.vbp.Item.resource_usage)
  return _internal_mutable_resource_usage();
}

// int32 num_copies = 3;
inline void Item::clear_num_copies() {
  _impl_.num_copies_ = 0;
}
inline int32_t Item::_internal_num_copies() const {
  return _impl_.num_copies_;
}
inline int32_t Item::num_copies() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.Item.num_copies)
  return _internal_num_copies();
}
inline void Item::_internal_set_num_copies(int32_t value) {
  
  _impl_.num_copies_ = value;
}
inline void Item::set_num_copies(int32_t value) {
  _internal_set_num_copies(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.Item.num_copies)
}

// int32 num_optional_copies = 5;
inline void Item::clear_num_optional_copies() {
  _impl_.num_optional_copies_ = 0;
}
inline int32_t Item::_internal_num_optional_copies() const {
  return _impl_.num_optional_copies_;
}
inline int32_t Item::num_optional_copies() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.Item.num_optional_copies)
  return _internal_num_optional_copies();
}
inline void Item::_internal_set_num_optional_copies(int32_t value) {
  
  _impl_.num_optional_copies_ = value;
}
inline void Item::set_num_optional_copies(int32_t value) {
  _internal_set_num_optional_copies(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.Item.num_optional_copies)
}

// int32 max_number_of_copies_per_bin = 4;
inline void Item::clear_max_number_of_copies_per_bin() {
  _impl_.max_number_of_copies_per_bin_ = 0;
}
inline int32_t Item::_internal_max_number_of_copies_per_bin() const {
  return _impl_.max_number_of_copies_per_bin_;
}
inline int32_t Item::max_number_of_copies_per_bin() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.Item.max_number_of_copies_per_bin)
  return _internal_max_number_of_copies_per_bin();
}
inline void Item::_internal_set_max_number_of_copies_per_bin(int32_t value) {
  
  _impl_.max_number_of_copies_per_bin_ = value;
}
inline void Item::set_max_number_of_copies_per_bin(int32_t value) {
  _internal_set_max_number_of_copies_per_bin(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.Item.max_number_of_copies_per_bin)
}

// double penalty_per_missing_copy = 6;
inline void Item::clear_penalty_per_missing_copy() {
  _impl_.penalty_per_missing_copy_ = 0;
}
inline double Item::_internal_penalty_per_missing_copy() const {
  return _impl_.penalty_per_missing_copy_;
}
inline double Item::penalty_per_missing_copy() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.Item.penalty_per_missing_copy)
  return _internal_penalty_per_missing_copy();
}
inline void Item::_internal_set_penalty_per_missing_copy(double value) {
  
  _impl_.penalty_per_missing_copy_ = value;
}
inline void Item::set_penalty_per_missing_copy(double value) {
  _internal_set_penalty_per_missing_copy(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.Item.penalty_per_missing_copy)
}

// -------------------------------------------------------------------

// VectorBinPackingProblem

// string name = 1;
inline void VectorBinPackingProblem::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& VectorBinPackingProblem::name() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingProblem.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VectorBinPackingProblem::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingProblem.name)
}
inline std::string* VectorBinPackingProblem::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:operations_research.packing.vbp.VectorBinPackingProblem.name)
  return _s;
}
inline const std::string& VectorBinPackingProblem::_internal_name() const {
  return _impl_.name_.Get();
}
inline void VectorBinPackingProblem::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* VectorBinPackingProblem::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* VectorBinPackingProblem::release_name() {
  // @@protoc_insertion_point(field_release:operations_research.packing.vbp.VectorBinPackingProblem.name)
  return _impl_.name_.Release();
}
inline void VectorBinPackingProblem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.packing.vbp.VectorBinPackingProblem.name)
}

// repeated int64 resource_capacity = 2;
inline int VectorBinPackingProblem::_internal_resource_capacity_size() const {
  return _impl_.resource_capacity_.size();
}
inline int VectorBinPackingProblem::resource_capacity_size() const {
  return _internal_resource_capacity_size();
}
inline void VectorBinPackingProblem::clear_resource_capacity() {
  _impl_.resource_capacity_.Clear();
}
inline int64_t VectorBinPackingProblem::_internal_resource_capacity(int index) const {
  return _impl_.resource_capacity_.Get(index);
}
inline int64_t VectorBinPackingProblem::resource_capacity(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingProblem.resource_capacity)
  return _internal_resource_capacity(index);
}
inline void VectorBinPackingProblem::set_resource_capacity(int index, int64_t value) {
  _impl_.resource_capacity_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingProblem.resource_capacity)
}
inline void VectorBinPackingProblem::_internal_add_resource_capacity(int64_t value) {
  _impl_.resource_capacity_.Add(value);
}
inline void VectorBinPackingProblem::add_resource_capacity(int64_t value) {
  _internal_add_resource_capacity(value);
  // @@protoc_insertion_point(field_add:operations_research.packing.vbp.VectorBinPackingProblem.resource_capacity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
VectorBinPackingProblem::_internal_resource_capacity() const {
  return _impl_.resource_capacity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
VectorBinPackingProblem::resource_capacity() const {
  // @@protoc_insertion_point(field_list:operations_research.packing.vbp.VectorBinPackingProblem.resource_capacity)
  return _internal_resource_capacity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
VectorBinPackingProblem::_internal_mutable_resource_capacity() {
  return &_impl_.resource_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
VectorBinPackingProblem::mutable_resource_capacity() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.packing.vbp.VectorBinPackingProblem.resource_capacity)
  return _internal_mutable_resource_capacity();
}

// repeated string resource_name = 3;
inline int VectorBinPackingProblem::_internal_resource_name_size() const {
  return _impl_.resource_name_.size();
}
inline int VectorBinPackingProblem::resource_name_size() const {
  return _internal_resource_name_size();
}
inline void VectorBinPackingProblem::clear_resource_name() {
  _impl_.resource_name_.Clear();
}
inline std::string* VectorBinPackingProblem::add_resource_name() {
  std::string* _s = _internal_add_resource_name();
  // @@protoc_insertion_point(field_add_mutable:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
  return _s;
}
inline const std::string& VectorBinPackingProblem::_internal_resource_name(int index) const {
  return _impl_.resource_name_.Get(index);
}
inline const std::string& VectorBinPackingProblem::resource_name(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
  return _internal_resource_name(index);
}
inline std::string* VectorBinPackingProblem::mutable_resource_name(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
  return _impl_.resource_name_.Mutable(index);
}
inline void VectorBinPackingProblem::set_resource_name(int index, const std::string& value) {
  _impl_.resource_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
}
inline void VectorBinPackingProblem::set_resource_name(int index, std::string&& value) {
  _impl_.resource_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
}
inline void VectorBinPackingProblem::set_resource_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.resource_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
}
inline void VectorBinPackingProblem::set_resource_name(int index, const char* value, size_t size) {
  _impl_.resource_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
}
inline std::string* VectorBinPackingProblem::_internal_add_resource_name() {
  return _impl_.resource_name_.Add();
}
inline void VectorBinPackingProblem::add_resource_name(const std::string& value) {
  _impl_.resource_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
}
inline void VectorBinPackingProblem::add_resource_name(std::string&& value) {
  _impl_.resource_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
}
inline void VectorBinPackingProblem::add_resource_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.resource_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
}
inline void VectorBinPackingProblem::add_resource_name(const char* value, size_t size) {
  _impl_.resource_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VectorBinPackingProblem::resource_name() const {
  // @@protoc_insertion_point(field_list:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
  return _impl_.resource_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VectorBinPackingProblem::mutable_resource_name() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
  return &_impl_.resource_name_;
}

// repeated .operations_research.packing.vbp.Item item = 4;
inline int VectorBinPackingProblem::_internal_item_size() const {
  return _impl_.item_.size();
}
inline int VectorBinPackingProblem::item_size() const {
  return _internal_item_size();
}
inline void VectorBinPackingProblem::clear_item() {
  _impl_.item_.Clear();
}
inline ::operations_research::packing::vbp::Item* VectorBinPackingProblem::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.packing.vbp.VectorBinPackingProblem.item)
  return _impl_.item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::packing::vbp::Item >*
VectorBinPackingProblem::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.packing.vbp.VectorBinPackingProblem.item)
  return &_impl_.item_;
}
inline const ::operations_research::packing::vbp::Item& VectorBinPackingProblem::_internal_item(int index) const {
  return _impl_.item_.Get(index);
}
inline const ::operations_research::packing::vbp::Item& VectorBinPackingProblem::item(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingProblem.item)
  return _internal_item(index);
}
inline ::operations_research::packing::vbp::Item* VectorBinPackingProblem::_internal_add_item() {
  return _impl_.item_.Add();
}
inline ::operations_research::packing::vbp::Item* VectorBinPackingProblem::add_item() {
  ::operations_research::packing::vbp::Item* _add = _internal_add_item();
  // @@protoc_insertion_point(field_add:operations_research.packing.vbp.VectorBinPackingProblem.item)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::packing::vbp::Item >&
VectorBinPackingProblem::item() const {
  // @@protoc_insertion_point(field_list:operations_research.packing.vbp.VectorBinPackingProblem.item)
  return _impl_.item_;
}

// int32 max_bins = 5;
inline void VectorBinPackingProblem::clear_max_bins() {
  _impl_.max_bins_ = 0;
}
inline int32_t VectorBinPackingProblem::_internal_max_bins() const {
  return _impl_.max_bins_;
}
inline int32_t VectorBinPackingProblem::max_bins() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingProblem.max_bins)
  return _internal_max_bins();
}
inline void VectorBinPackingProblem::_internal_set_max_bins(int32_t value) {
  
  _impl_.max_bins_ = value;
}
inline void VectorBinPackingProblem::set_max_bins(int32_t value) {
  _internal_set_max_bins(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingProblem.max_bins)
}

// optional double cost_per_bin = 6;
inline bool VectorBinPackingProblem::_internal_has_cost_per_bin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VectorBinPackingProblem::has_cost_per_bin() const {
  return _internal_has_cost_per_bin();
}
inline void VectorBinPackingProblem::clear_cost_per_bin() {
  _impl_.cost_per_bin_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double VectorBinPackingProblem::_internal_cost_per_bin() const {
  return _impl_.cost_per_bin_;
}
inline double VectorBinPackingProblem::cost_per_bin() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingProblem.cost_per_bin)
  return _internal_cost_per_bin();
}
inline void VectorBinPackingProblem::_internal_set_cost_per_bin(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cost_per_bin_ = value;
}
inline void VectorBinPackingProblem::set_cost_per_bin(double value) {
  _internal_set_cost_per_bin(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingProblem.cost_per_bin)
}

// -------------------------------------------------------------------

// VectorBinPackingOneBinInSolution

// repeated int32 item_indices = 1;
inline int VectorBinPackingOneBinInSolution::_internal_item_indices_size() const {
  return _impl_.item_indices_.size();
}
inline int VectorBinPackingOneBinInSolution::item_indices_size() const {
  return _internal_item_indices_size();
}
inline void VectorBinPackingOneBinInSolution::clear_item_indices() {
  _impl_.item_indices_.Clear();
}
inline int32_t VectorBinPackingOneBinInSolution::_internal_item_indices(int index) const {
  return _impl_.item_indices_.Get(index);
}
inline int32_t VectorBinPackingOneBinInSolution::item_indices(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingOneBinInSolution.item_indices)
  return _internal_item_indices(index);
}
inline void VectorBinPackingOneBinInSolution::set_item_indices(int index, int32_t value) {
  _impl_.item_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingOneBinInSolution.item_indices)
}
inline void VectorBinPackingOneBinInSolution::_internal_add_item_indices(int32_t value) {
  _impl_.item_indices_.Add(value);
}
inline void VectorBinPackingOneBinInSolution::add_item_indices(int32_t value) {
  _internal_add_item_indices(value);
  // @@protoc_insertion_point(field_add:operations_research.packing.vbp.VectorBinPackingOneBinInSolution.item_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
VectorBinPackingOneBinInSolution::_internal_item_indices() const {
  return _impl_.item_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
VectorBinPackingOneBinInSolution::item_indices() const {
  // @@protoc_insertion_point(field_list:operations_research.packing.vbp.VectorBinPackingOneBinInSolution.item_indices)
  return _internal_item_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
VectorBinPackingOneBinInSolution::_internal_mutable_item_indices() {
  return &_impl_.item_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
VectorBinPackingOneBinInSolution::mutable_item_indices() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.packing.vbp.VectorBinPackingOneBinInSolution.item_indices)
  return _internal_mutable_item_indices();
}

// repeated int32 item_copies = 2;
inline int VectorBinPackingOneBinInSolution::_internal_item_copies_size() const {
  return _impl_.item_copies_.size();
}
inline int VectorBinPackingOneBinInSolution::item_copies_size() const {
  return _internal_item_copies_size();
}
inline void VectorBinPackingOneBinInSolution::clear_item_copies() {
  _impl_.item_copies_.Clear();
}
inline int32_t VectorBinPackingOneBinInSolution::_internal_item_copies(int index) const {
  return _impl_.item_copies_.Get(index);
}
inline int32_t VectorBinPackingOneBinInSolution::item_copies(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingOneBinInSolution.item_copies)
  return _internal_item_copies(index);
}
inline void VectorBinPackingOneBinInSolution::set_item_copies(int index, int32_t value) {
  _impl_.item_copies_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingOneBinInSolution.item_copies)
}
inline void VectorBinPackingOneBinInSolution::_internal_add_item_copies(int32_t value) {
  _impl_.item_copies_.Add(value);
}
inline void VectorBinPackingOneBinInSolution::add_item_copies(int32_t value) {
  _internal_add_item_copies(value);
  // @@protoc_insertion_point(field_add:operations_research.packing.vbp.VectorBinPackingOneBinInSolution.item_copies)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
VectorBinPackingOneBinInSolution::_internal_item_copies() const {
  return _impl_.item_copies_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
VectorBinPackingOneBinInSolution::item_copies() const {
  // @@protoc_insertion_point(field_list:operations_research.packing.vbp.VectorBinPackingOneBinInSolution.item_copies)
  return _internal_item_copies();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
VectorBinPackingOneBinInSolution::_internal_mutable_item_copies() {
  return &_impl_.item_copies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
VectorBinPackingOneBinInSolution::mutable_item_copies() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.packing.vbp.VectorBinPackingOneBinInSolution.item_copies)
  return _internal_mutable_item_copies();
}

// -------------------------------------------------------------------

// VectorBinPackingSolution

// string solver_info = 1;
inline void VectorBinPackingSolution::clear_solver_info() {
  _impl_.solver_info_.ClearToEmpty();
}
inline const std::string& VectorBinPackingSolution::solver_info() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingSolution.solver_info)
  return _internal_solver_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VectorBinPackingSolution::set_solver_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.solver_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingSolution.solver_info)
}
inline std::string* VectorBinPackingSolution::mutable_solver_info() {
  std::string* _s = _internal_mutable_solver_info();
  // @@protoc_insertion_point(field_mutable:operations_research.packing.vbp.VectorBinPackingSolution.solver_info)
  return _s;
}
inline const std::string& VectorBinPackingSolution::_internal_solver_info() const {
  return _impl_.solver_info_.Get();
}
inline void VectorBinPackingSolution::_internal_set_solver_info(const std::string& value) {
  
  _impl_.solver_info_.Set(value, GetArenaForAllocation());
}
inline std::string* VectorBinPackingSolution::_internal_mutable_solver_info() {
  
  return _impl_.solver_info_.Mutable(GetArenaForAllocation());
}
inline std::string* VectorBinPackingSolution::release_solver_info() {
  // @@protoc_insertion_point(field_release:operations_research.packing.vbp.VectorBinPackingSolution.solver_info)
  return _impl_.solver_info_.Release();
}
inline void VectorBinPackingSolution::set_allocated_solver_info(std::string* solver_info) {
  if (solver_info != nullptr) {
    
  } else {
    
  }
  _impl_.solver_info_.SetAllocated(solver_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.solver_info_.IsDefault()) {
    _impl_.solver_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.packing.vbp.VectorBinPackingSolution.solver_info)
}

// repeated .operations_research.packing.vbp.VectorBinPackingOneBinInSolution bins = 2;
inline int VectorBinPackingSolution::_internal_bins_size() const {
  return _impl_.bins_.size();
}
inline int VectorBinPackingSolution::bins_size() const {
  return _internal_bins_size();
}
inline void VectorBinPackingSolution::clear_bins() {
  _impl_.bins_.Clear();
}
inline ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution* VectorBinPackingSolution::mutable_bins(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.packing.vbp.VectorBinPackingSolution.bins)
  return _impl_.bins_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution >*
VectorBinPackingSolution::mutable_bins() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.packing.vbp.VectorBinPackingSolution.bins)
  return &_impl_.bins_;
}
inline const ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution& VectorBinPackingSolution::_internal_bins(int index) const {
  return _impl_.bins_.Get(index);
}
inline const ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution& VectorBinPackingSolution::bins(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingSolution.bins)
  return _internal_bins(index);
}
inline ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution* VectorBinPackingSolution::_internal_add_bins() {
  return _impl_.bins_.Add();
}
inline ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution* VectorBinPackingSolution::add_bins() {
  ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution* _add = _internal_add_bins();
  // @@protoc_insertion_point(field_add:operations_research.packing.vbp.VectorBinPackingSolution.bins)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution >&
VectorBinPackingSolution::bins() const {
  // @@protoc_insertion_point(field_list:operations_research.packing.vbp.VectorBinPackingSolution.bins)
  return _impl_.bins_;
}

// .operations_research.packing.vbp.VectorBinPackingSolveStatus status = 3;
inline void VectorBinPackingSolution::clear_status() {
  _impl_.status_ = 0;
}
inline ::operations_research::packing::vbp::VectorBinPackingSolveStatus VectorBinPackingSolution::_internal_status() const {
  return static_cast< ::operations_research::packing::vbp::VectorBinPackingSolveStatus >(_impl_.status_);
}
inline ::operations_research::packing::vbp::VectorBinPackingSolveStatus VectorBinPackingSolution::status() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingSolution.status)
  return _internal_status();
}
inline void VectorBinPackingSolution::_internal_set_status(::operations_research::packing::vbp::VectorBinPackingSolveStatus value) {
  
  _impl_.status_ = value;
}
inline void VectorBinPackingSolution::set_status(::operations_research::packing::vbp::VectorBinPackingSolveStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingSolution.status)
}

// double objective_value = 4;
inline void VectorBinPackingSolution::clear_objective_value() {
  _impl_.objective_value_ = 0;
}
inline double VectorBinPackingSolution::_internal_objective_value() const {
  return _impl_.objective_value_;
}
inline double VectorBinPackingSolution::objective_value() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingSolution.objective_value)
  return _internal_objective_value();
}
inline void VectorBinPackingSolution::_internal_set_objective_value(double value) {
  
  _impl_.objective_value_ = value;
}
inline void VectorBinPackingSolution::set_objective_value(double value) {
  _internal_set_objective_value(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingSolution.objective_value)
}

// double solve_time_in_seconds = 5;
inline void VectorBinPackingSolution::clear_solve_time_in_seconds() {
  _impl_.solve_time_in_seconds_ = 0;
}
inline double VectorBinPackingSolution::_internal_solve_time_in_seconds() const {
  return _impl_.solve_time_in_seconds_;
}
inline double VectorBinPackingSolution::solve_time_in_seconds() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingSolution.solve_time_in_seconds)
  return _internal_solve_time_in_seconds();
}
inline void VectorBinPackingSolution::_internal_set_solve_time_in_seconds(double value) {
  
  _impl_.solve_time_in_seconds_ = value;
}
inline void VectorBinPackingSolution::set_solve_time_in_seconds(double value) {
  _internal_set_solve_time_in_seconds(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingSolution.solve_time_in_seconds)
}

// double arc_flow_time_in_seconds = 6;
inline void VectorBinPackingSolution::clear_arc_flow_time_in_seconds() {
  _impl_.arc_flow_time_in_seconds_ = 0;
}
inline double VectorBinPackingSolution::_internal_arc_flow_time_in_seconds() const {
  return _impl_.arc_flow_time_in_seconds_;
}
inline double VectorBinPackingSolution::arc_flow_time_in_seconds() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingSolution.arc_flow_time_in_seconds)
  return _internal_arc_flow_time_in_seconds();
}
inline void VectorBinPackingSolution::_internal_set_arc_flow_time_in_seconds(double value) {
  
  _impl_.arc_flow_time_in_seconds_ = value;
}
inline void VectorBinPackingSolution::set_arc_flow_time_in_seconds(double value) {
  _internal_set_arc_flow_time_in_seconds(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingSolution.arc_flow_time_in_seconds)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vbp
}  // namespace packing
}  // namespace operations_research

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::operations_research::packing::vbp::VectorBinPackingSolveStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::packing::vbp::VectorBinPackingSolveStatus>() {
  return ::operations_research::packing::vbp::VectorBinPackingSolveStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto
