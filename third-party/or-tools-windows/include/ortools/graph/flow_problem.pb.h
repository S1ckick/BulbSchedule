// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/graph/flow_problem.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fgraph_2fflow_5fproblem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fgraph_2fflow_5fproblem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ortools_2fgraph_2fflow_5fproblem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fgraph_2fflow_5fproblem_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fgraph_2fflow_5fproblem_2eproto;
namespace operations_research {
class FlowArcProto;
struct FlowArcProtoDefaultTypeInternal;
extern FlowArcProtoDefaultTypeInternal _FlowArcProto_default_instance_;
class FlowModelProto;
struct FlowModelProtoDefaultTypeInternal;
extern FlowModelProtoDefaultTypeInternal _FlowModelProto_default_instance_;
class FlowNodeProto;
struct FlowNodeProtoDefaultTypeInternal;
extern FlowNodeProtoDefaultTypeInternal _FlowNodeProto_default_instance_;
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> ::operations_research::FlowArcProto* Arena::CreateMaybeMessage<::operations_research::FlowArcProto>(Arena*);
template<> ::operations_research::FlowModelProto* Arena::CreateMaybeMessage<::operations_research::FlowModelProto>(Arena*);
template<> ::operations_research::FlowNodeProto* Arena::CreateMaybeMessage<::operations_research::FlowNodeProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace operations_research {

enum FlowModelProto_ProblemType : int {
  FlowModelProto_ProblemType_LINEAR_SUM_ASSIGNMENT = 0,
  FlowModelProto_ProblemType_MAX_FLOW = 1,
  FlowModelProto_ProblemType_MIN_COST_FLOW = 2
};
bool FlowModelProto_ProblemType_IsValid(int value);
constexpr FlowModelProto_ProblemType FlowModelProto_ProblemType_ProblemType_MIN = FlowModelProto_ProblemType_LINEAR_SUM_ASSIGNMENT;
constexpr FlowModelProto_ProblemType FlowModelProto_ProblemType_ProblemType_MAX = FlowModelProto_ProblemType_MIN_COST_FLOW;
constexpr int FlowModelProto_ProblemType_ProblemType_ARRAYSIZE = FlowModelProto_ProblemType_ProblemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlowModelProto_ProblemType_descriptor();
template<typename T>
inline const std::string& FlowModelProto_ProblemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FlowModelProto_ProblemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FlowModelProto_ProblemType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FlowModelProto_ProblemType_descriptor(), enum_t_value);
}
inline bool FlowModelProto_ProblemType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FlowModelProto_ProblemType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FlowModelProto_ProblemType>(
    FlowModelProto_ProblemType_descriptor(), name, value);
}
// ===================================================================

class FlowArcProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.FlowArcProto) */ {
 public:
  inline FlowArcProto() : FlowArcProto(nullptr) {}
  ~FlowArcProto() override;
  explicit PROTOBUF_CONSTEXPR FlowArcProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlowArcProto(const FlowArcProto& from);
  FlowArcProto(FlowArcProto&& from) noexcept
    : FlowArcProto() {
    *this = ::std::move(from);
  }

  inline FlowArcProto& operator=(const FlowArcProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowArcProto& operator=(FlowArcProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlowArcProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlowArcProto* internal_default_instance() {
    return reinterpret_cast<const FlowArcProto*>(
               &_FlowArcProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FlowArcProto& a, FlowArcProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowArcProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowArcProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlowArcProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlowArcProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlowArcProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FlowArcProto& from) {
    FlowArcProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowArcProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.FlowArcProto";
  }
  protected:
  explicit FlowArcProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTailFieldNumber = 1,
    kHeadFieldNumber = 2,
    kUnitCostFieldNumber = 4,
    kCapacityFieldNumber = 3,
  };
  // optional int64 tail = 1;
  bool has_tail() const;
  private:
  bool _internal_has_tail() const;
  public:
  void clear_tail();
  int64_t tail() const;
  void set_tail(int64_t value);
  private:
  int64_t _internal_tail() const;
  void _internal_set_tail(int64_t value);
  public:

  // optional int64 head = 2;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  int64_t head() const;
  void set_head(int64_t value);
  private:
  int64_t _internal_head() const;
  void _internal_set_head(int64_t value);
  public:

  // optional int64 unit_cost = 4 [default = 0];
  bool has_unit_cost() const;
  private:
  bool _internal_has_unit_cost() const;
  public:
  void clear_unit_cost();
  int64_t unit_cost() const;
  void set_unit_cost(int64_t value);
  private:
  int64_t _internal_unit_cost() const;
  void _internal_set_unit_cost(int64_t value);
  public:

  // optional int64 capacity = 3 [default = 1];
  bool has_capacity() const;
  private:
  bool _internal_has_capacity() const;
  public:
  void clear_capacity();
  int64_t capacity() const;
  void set_capacity(int64_t value);
  private:
  int64_t _internal_capacity() const;
  void _internal_set_capacity(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.FlowArcProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t tail_;
    int64_t head_;
    int64_t unit_cost_;
    int64_t capacity_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fgraph_2fflow_5fproblem_2eproto;
};
// -------------------------------------------------------------------

class FlowNodeProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.FlowNodeProto) */ {
 public:
  inline FlowNodeProto() : FlowNodeProto(nullptr) {}
  ~FlowNodeProto() override;
  explicit PROTOBUF_CONSTEXPR FlowNodeProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlowNodeProto(const FlowNodeProto& from);
  FlowNodeProto(FlowNodeProto&& from) noexcept
    : FlowNodeProto() {
    *this = ::std::move(from);
  }

  inline FlowNodeProto& operator=(const FlowNodeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowNodeProto& operator=(FlowNodeProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlowNodeProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlowNodeProto* internal_default_instance() {
    return reinterpret_cast<const FlowNodeProto*>(
               &_FlowNodeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FlowNodeProto& a, FlowNodeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowNodeProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowNodeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlowNodeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlowNodeProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlowNodeProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FlowNodeProto& from) {
    FlowNodeProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowNodeProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.FlowNodeProto";
  }
  protected:
  explicit FlowNodeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSupplyFieldNumber = 2,
  };
  // optional int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // optional int64 supply = 2 [default = 0];
  bool has_supply() const;
  private:
  bool _internal_has_supply() const;
  public:
  void clear_supply();
  int64_t supply() const;
  void set_supply(int64_t value);
  private:
  int64_t _internal_supply() const;
  void _internal_set_supply(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.FlowNodeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t id_;
    int64_t supply_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fgraph_2fflow_5fproblem_2eproto;
};
// -------------------------------------------------------------------

class FlowModelProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.FlowModelProto) */ {
 public:
  inline FlowModelProto() : FlowModelProto(nullptr) {}
  ~FlowModelProto() override;
  explicit PROTOBUF_CONSTEXPR FlowModelProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlowModelProto(const FlowModelProto& from);
  FlowModelProto(FlowModelProto&& from) noexcept
    : FlowModelProto() {
    *this = ::std::move(from);
  }

  inline FlowModelProto& operator=(const FlowModelProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowModelProto& operator=(FlowModelProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlowModelProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlowModelProto* internal_default_instance() {
    return reinterpret_cast<const FlowModelProto*>(
               &_FlowModelProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FlowModelProto& a, FlowModelProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowModelProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowModelProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlowModelProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlowModelProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlowModelProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FlowModelProto& from) {
    FlowModelProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowModelProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.FlowModelProto";
  }
  protected:
  explicit FlowModelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FlowModelProto_ProblemType ProblemType;
  static constexpr ProblemType LINEAR_SUM_ASSIGNMENT =
    FlowModelProto_ProblemType_LINEAR_SUM_ASSIGNMENT;
  static constexpr ProblemType MAX_FLOW =
    FlowModelProto_ProblemType_MAX_FLOW;
  static constexpr ProblemType MIN_COST_FLOW =
    FlowModelProto_ProblemType_MIN_COST_FLOW;
  static inline bool ProblemType_IsValid(int value) {
    return FlowModelProto_ProblemType_IsValid(value);
  }
  static constexpr ProblemType ProblemType_MIN =
    FlowModelProto_ProblemType_ProblemType_MIN;
  static constexpr ProblemType ProblemType_MAX =
    FlowModelProto_ProblemType_ProblemType_MAX;
  static constexpr int ProblemType_ARRAYSIZE =
    FlowModelProto_ProblemType_ProblemType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProblemType_descriptor() {
    return FlowModelProto_ProblemType_descriptor();
  }
  template<typename T>
  static inline const std::string& ProblemType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProblemType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProblemType_Name.");
    return FlowModelProto_ProblemType_Name(enum_t_value);
  }
  static inline bool ProblemType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProblemType* value) {
    return FlowModelProto_ProblemType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kArcsFieldNumber = 2,
    kProblemTypeFieldNumber = 3,
  };
  // repeated .operations_research.FlowNodeProto nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::operations_research::FlowNodeProto* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::FlowNodeProto >*
      mutable_nodes();
  private:
  const ::operations_research::FlowNodeProto& _internal_nodes(int index) const;
  ::operations_research::FlowNodeProto* _internal_add_nodes();
  public:
  const ::operations_research::FlowNodeProto& nodes(int index) const;
  ::operations_research::FlowNodeProto* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::FlowNodeProto >&
      nodes() const;

  // repeated .operations_research.FlowArcProto arcs = 2;
  int arcs_size() const;
  private:
  int _internal_arcs_size() const;
  public:
  void clear_arcs();
  ::operations_research::FlowArcProto* mutable_arcs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::FlowArcProto >*
      mutable_arcs();
  private:
  const ::operations_research::FlowArcProto& _internal_arcs(int index) const;
  ::operations_research::FlowArcProto* _internal_add_arcs();
  public:
  const ::operations_research::FlowArcProto& arcs(int index) const;
  ::operations_research::FlowArcProto* add_arcs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::FlowArcProto >&
      arcs() const;

  // optional .operations_research.FlowModelProto.ProblemType problem_type = 3;
  bool has_problem_type() const;
  private:
  bool _internal_has_problem_type() const;
  public:
  void clear_problem_type();
  ::operations_research::FlowModelProto_ProblemType problem_type() const;
  void set_problem_type(::operations_research::FlowModelProto_ProblemType value);
  private:
  ::operations_research::FlowModelProto_ProblemType _internal_problem_type() const;
  void _internal_set_problem_type(::operations_research::FlowModelProto_ProblemType value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.FlowModelProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::FlowNodeProto > nodes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::FlowArcProto > arcs_;
    int problem_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fgraph_2fflow_5fproblem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FlowArcProto

// optional int64 tail = 1;
inline bool FlowArcProto::_internal_has_tail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FlowArcProto::has_tail() const {
  return _internal_has_tail();
}
inline void FlowArcProto::clear_tail() {
  _impl_.tail_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t FlowArcProto::_internal_tail() const {
  return _impl_.tail_;
}
inline int64_t FlowArcProto::tail() const {
  // @@protoc_insertion_point(field_get:operations_research.FlowArcProto.tail)
  return _internal_tail();
}
inline void FlowArcProto::_internal_set_tail(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tail_ = value;
}
inline void FlowArcProto::set_tail(int64_t value) {
  _internal_set_tail(value);
  // @@protoc_insertion_point(field_set:operations_research.FlowArcProto.tail)
}

// optional int64 head = 2;
inline bool FlowArcProto::_internal_has_head() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FlowArcProto::has_head() const {
  return _internal_has_head();
}
inline void FlowArcProto::clear_head() {
  _impl_.head_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t FlowArcProto::_internal_head() const {
  return _impl_.head_;
}
inline int64_t FlowArcProto::head() const {
  // @@protoc_insertion_point(field_get:operations_research.FlowArcProto.head)
  return _internal_head();
}
inline void FlowArcProto::_internal_set_head(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.head_ = value;
}
inline void FlowArcProto::set_head(int64_t value) {
  _internal_set_head(value);
  // @@protoc_insertion_point(field_set:operations_research.FlowArcProto.head)
}

// optional int64 capacity = 3 [default = 1];
inline bool FlowArcProto::_internal_has_capacity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FlowArcProto::has_capacity() const {
  return _internal_has_capacity();
}
inline void FlowArcProto::clear_capacity() {
  _impl_.capacity_ = int64_t{1};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t FlowArcProto::_internal_capacity() const {
  return _impl_.capacity_;
}
inline int64_t FlowArcProto::capacity() const {
  // @@protoc_insertion_point(field_get:operations_research.FlowArcProto.capacity)
  return _internal_capacity();
}
inline void FlowArcProto::_internal_set_capacity(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.capacity_ = value;
}
inline void FlowArcProto::set_capacity(int64_t value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:operations_research.FlowArcProto.capacity)
}

// optional int64 unit_cost = 4 [default = 0];
inline bool FlowArcProto::_internal_has_unit_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FlowArcProto::has_unit_cost() const {
  return _internal_has_unit_cost();
}
inline void FlowArcProto::clear_unit_cost() {
  _impl_.unit_cost_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t FlowArcProto::_internal_unit_cost() const {
  return _impl_.unit_cost_;
}
inline int64_t FlowArcProto::unit_cost() const {
  // @@protoc_insertion_point(field_get:operations_research.FlowArcProto.unit_cost)
  return _internal_unit_cost();
}
inline void FlowArcProto::_internal_set_unit_cost(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.unit_cost_ = value;
}
inline void FlowArcProto::set_unit_cost(int64_t value) {
  _internal_set_unit_cost(value);
  // @@protoc_insertion_point(field_set:operations_research.FlowArcProto.unit_cost)
}

// -------------------------------------------------------------------

// FlowNodeProto

// optional int64 id = 1;
inline bool FlowNodeProto::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FlowNodeProto::has_id() const {
  return _internal_has_id();
}
inline void FlowNodeProto::clear_id() {
  _impl_.id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t FlowNodeProto::_internal_id() const {
  return _impl_.id_;
}
inline int64_t FlowNodeProto::id() const {
  // @@protoc_insertion_point(field_get:operations_research.FlowNodeProto.id)
  return _internal_id();
}
inline void FlowNodeProto::_internal_set_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void FlowNodeProto::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:operations_research.FlowNodeProto.id)
}

// optional int64 supply = 2 [default = 0];
inline bool FlowNodeProto::_internal_has_supply() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FlowNodeProto::has_supply() const {
  return _internal_has_supply();
}
inline void FlowNodeProto::clear_supply() {
  _impl_.supply_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t FlowNodeProto::_internal_supply() const {
  return _impl_.supply_;
}
inline int64_t FlowNodeProto::supply() const {
  // @@protoc_insertion_point(field_get:operations_research.FlowNodeProto.supply)
  return _internal_supply();
}
inline void FlowNodeProto::_internal_set_supply(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.supply_ = value;
}
inline void FlowNodeProto::set_supply(int64_t value) {
  _internal_set_supply(value);
  // @@protoc_insertion_point(field_set:operations_research.FlowNodeProto.supply)
}

// -------------------------------------------------------------------

// FlowModelProto

// repeated .operations_research.FlowNodeProto nodes = 1;
inline int FlowModelProto::_internal_nodes_size() const {
  return _impl_.nodes_.size();
}
inline int FlowModelProto::nodes_size() const {
  return _internal_nodes_size();
}
inline void FlowModelProto::clear_nodes() {
  _impl_.nodes_.Clear();
}
inline ::operations_research::FlowNodeProto* FlowModelProto::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.FlowModelProto.nodes)
  return _impl_.nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::FlowNodeProto >*
FlowModelProto::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.FlowModelProto.nodes)
  return &_impl_.nodes_;
}
inline const ::operations_research::FlowNodeProto& FlowModelProto::_internal_nodes(int index) const {
  return _impl_.nodes_.Get(index);
}
inline const ::operations_research::FlowNodeProto& FlowModelProto::nodes(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.FlowModelProto.nodes)
  return _internal_nodes(index);
}
inline ::operations_research::FlowNodeProto* FlowModelProto::_internal_add_nodes() {
  return _impl_.nodes_.Add();
}
inline ::operations_research::FlowNodeProto* FlowModelProto::add_nodes() {
  ::operations_research::FlowNodeProto* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:operations_research.FlowModelProto.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::FlowNodeProto >&
FlowModelProto::nodes() const {
  // @@protoc_insertion_point(field_list:operations_research.FlowModelProto.nodes)
  return _impl_.nodes_;
}

// repeated .operations_research.FlowArcProto arcs = 2;
inline int FlowModelProto::_internal_arcs_size() const {
  return _impl_.arcs_.size();
}
inline int FlowModelProto::arcs_size() const {
  return _internal_arcs_size();
}
inline void FlowModelProto::clear_arcs() {
  _impl_.arcs_.Clear();
}
inline ::operations_research::FlowArcProto* FlowModelProto::mutable_arcs(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.FlowModelProto.arcs)
  return _impl_.arcs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::FlowArcProto >*
FlowModelProto::mutable_arcs() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.FlowModelProto.arcs)
  return &_impl_.arcs_;
}
inline const ::operations_research::FlowArcProto& FlowModelProto::_internal_arcs(int index) const {
  return _impl_.arcs_.Get(index);
}
inline const ::operations_research::FlowArcProto& FlowModelProto::arcs(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.FlowModelProto.arcs)
  return _internal_arcs(index);
}
inline ::operations_research::FlowArcProto* FlowModelProto::_internal_add_arcs() {
  return _impl_.arcs_.Add();
}
inline ::operations_research::FlowArcProto* FlowModelProto::add_arcs() {
  ::operations_research::FlowArcProto* _add = _internal_add_arcs();
  // @@protoc_insertion_point(field_add:operations_research.FlowModelProto.arcs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::FlowArcProto >&
FlowModelProto::arcs() const {
  // @@protoc_insertion_point(field_list:operations_research.FlowModelProto.arcs)
  return _impl_.arcs_;
}

// optional .operations_research.FlowModelProto.ProblemType problem_type = 3;
inline bool FlowModelProto::_internal_has_problem_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FlowModelProto::has_problem_type() const {
  return _internal_has_problem_type();
}
inline void FlowModelProto::clear_problem_type() {
  _impl_.problem_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::operations_research::FlowModelProto_ProblemType FlowModelProto::_internal_problem_type() const {
  return static_cast< ::operations_research::FlowModelProto_ProblemType >(_impl_.problem_type_);
}
inline ::operations_research::FlowModelProto_ProblemType FlowModelProto::problem_type() const {
  // @@protoc_insertion_point(field_get:operations_research.FlowModelProto.problem_type)
  return _internal_problem_type();
}
inline void FlowModelProto::_internal_set_problem_type(::operations_research::FlowModelProto_ProblemType value) {
  assert(::operations_research::FlowModelProto_ProblemType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.problem_type_ = value;
}
inline void FlowModelProto::set_problem_type(::operations_research::FlowModelProto_ProblemType value) {
  _internal_set_problem_type(value);
  // @@protoc_insertion_point(field_set:operations_research.FlowModelProto.problem_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace operations_research

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::operations_research::FlowModelProto_ProblemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::FlowModelProto_ProblemType>() {
  return ::operations_research::FlowModelProto_ProblemType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ortools_2fgraph_2fflow_5fproblem_2eproto
