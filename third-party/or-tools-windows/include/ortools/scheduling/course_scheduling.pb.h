// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/scheduling/course_scheduling.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fscheduling_2fcourse_5fscheduling_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fscheduling_2fcourse_5fscheduling_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ortools_2fscheduling_2fcourse_5fscheduling_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fscheduling_2fcourse_5fscheduling_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto;
namespace operations_research {
class ClassAssignment;
struct ClassAssignmentDefaultTypeInternal;
extern ClassAssignmentDefaultTypeInternal _ClassAssignment_default_instance_;
class Course;
struct CourseDefaultTypeInternal;
extern CourseDefaultTypeInternal _Course_default_instance_;
class CourseSchedulingModel;
struct CourseSchedulingModelDefaultTypeInternal;
extern CourseSchedulingModelDefaultTypeInternal _CourseSchedulingModel_default_instance_;
class CourseSchedulingResult;
struct CourseSchedulingResultDefaultTypeInternal;
extern CourseSchedulingResultDefaultTypeInternal _CourseSchedulingResult_default_instance_;
class Room;
struct RoomDefaultTypeInternal;
extern RoomDefaultTypeInternal _Room_default_instance_;
class Student;
struct StudentDefaultTypeInternal;
extern StudentDefaultTypeInternal _Student_default_instance_;
class StudentAssignment;
struct StudentAssignmentDefaultTypeInternal;
extern StudentAssignmentDefaultTypeInternal _StudentAssignment_default_instance_;
class Teacher;
struct TeacherDefaultTypeInternal;
extern TeacherDefaultTypeInternal _Teacher_default_instance_;
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> ::operations_research::ClassAssignment* Arena::CreateMaybeMessage<::operations_research::ClassAssignment>(Arena*);
template<> ::operations_research::Course* Arena::CreateMaybeMessage<::operations_research::Course>(Arena*);
template<> ::operations_research::CourseSchedulingModel* Arena::CreateMaybeMessage<::operations_research::CourseSchedulingModel>(Arena*);
template<> ::operations_research::CourseSchedulingResult* Arena::CreateMaybeMessage<::operations_research::CourseSchedulingResult>(Arena*);
template<> ::operations_research::Room* Arena::CreateMaybeMessage<::operations_research::Room>(Arena*);
template<> ::operations_research::Student* Arena::CreateMaybeMessage<::operations_research::Student>(Arena*);
template<> ::operations_research::StudentAssignment* Arena::CreateMaybeMessage<::operations_research::StudentAssignment>(Arena*);
template<> ::operations_research::Teacher* Arena::CreateMaybeMessage<::operations_research::Teacher>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace operations_research {

enum CourseSchedulingResultStatus : int {
  COURSE_SCHEDULING_RESULT_STATUS_UNSPECIFIED = 0,
  SOLVER_FEASIBLE = 1,
  SOLVER_OPTIMAL = 2,
  SOLVER_INFEASIBLE = 3,
  SOLVER_MODEL_INVALID = 4,
  SOLVER_NOT_SOLVED = 5,
  ABNORMAL = 6,
  CourseSchedulingResultStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CourseSchedulingResultStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CourseSchedulingResultStatus_IsValid(int value);
constexpr CourseSchedulingResultStatus CourseSchedulingResultStatus_MIN = COURSE_SCHEDULING_RESULT_STATUS_UNSPECIFIED;
constexpr CourseSchedulingResultStatus CourseSchedulingResultStatus_MAX = ABNORMAL;
constexpr int CourseSchedulingResultStatus_ARRAYSIZE = CourseSchedulingResultStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CourseSchedulingResultStatus_descriptor();
template<typename T>
inline const std::string& CourseSchedulingResultStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CourseSchedulingResultStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CourseSchedulingResultStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CourseSchedulingResultStatus_descriptor(), enum_t_value);
}
inline bool CourseSchedulingResultStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CourseSchedulingResultStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CourseSchedulingResultStatus>(
    CourseSchedulingResultStatus_descriptor(), name, value);
}
// ===================================================================

class CourseSchedulingModel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.CourseSchedulingModel) */ {
 public:
  inline CourseSchedulingModel() : CourseSchedulingModel(nullptr) {}
  ~CourseSchedulingModel() override;
  explicit PROTOBUF_CONSTEXPR CourseSchedulingModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CourseSchedulingModel(const CourseSchedulingModel& from);
  CourseSchedulingModel(CourseSchedulingModel&& from) noexcept
    : CourseSchedulingModel() {
    *this = ::std::move(from);
  }

  inline CourseSchedulingModel& operator=(const CourseSchedulingModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CourseSchedulingModel& operator=(CourseSchedulingModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CourseSchedulingModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CourseSchedulingModel* internal_default_instance() {
    return reinterpret_cast<const CourseSchedulingModel*>(
               &_CourseSchedulingModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CourseSchedulingModel& a, CourseSchedulingModel& b) {
    a.Swap(&b);
  }
  inline void Swap(CourseSchedulingModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CourseSchedulingModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CourseSchedulingModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CourseSchedulingModel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CourseSchedulingModel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CourseSchedulingModel& from) {
    CourseSchedulingModel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CourseSchedulingModel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.CourseSchedulingModel";
  }
  protected:
  explicit CourseSchedulingModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoursesFieldNumber = 4,
    kTeachersFieldNumber = 5,
    kStudentsFieldNumber = 6,
    kRoomsFieldNumber = 7,
    kDisplayNameFieldNumber = 1,
    kDaysCountFieldNumber = 2,
    kDailyTimeSlotCountFieldNumber = 3,
  };
  // repeated .operations_research.Course courses = 4;
  int courses_size() const;
  private:
  int _internal_courses_size() const;
  public:
  void clear_courses();
  ::operations_research::Course* mutable_courses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::Course >*
      mutable_courses();
  private:
  const ::operations_research::Course& _internal_courses(int index) const;
  ::operations_research::Course* _internal_add_courses();
  public:
  const ::operations_research::Course& courses(int index) const;
  ::operations_research::Course* add_courses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::Course >&
      courses() const;

  // repeated .operations_research.Teacher teachers = 5;
  int teachers_size() const;
  private:
  int _internal_teachers_size() const;
  public:
  void clear_teachers();
  ::operations_research::Teacher* mutable_teachers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::Teacher >*
      mutable_teachers();
  private:
  const ::operations_research::Teacher& _internal_teachers(int index) const;
  ::operations_research::Teacher* _internal_add_teachers();
  public:
  const ::operations_research::Teacher& teachers(int index) const;
  ::operations_research::Teacher* add_teachers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::Teacher >&
      teachers() const;

  // repeated .operations_research.Student students = 6;
  int students_size() const;
  private:
  int _internal_students_size() const;
  public:
  void clear_students();
  ::operations_research::Student* mutable_students(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::Student >*
      mutable_students();
  private:
  const ::operations_research::Student& _internal_students(int index) const;
  ::operations_research::Student* _internal_add_students();
  public:
  const ::operations_research::Student& students(int index) const;
  ::operations_research::Student* add_students();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::Student >&
      students() const;

  // repeated .operations_research.Room rooms = 7;
  int rooms_size() const;
  private:
  int _internal_rooms_size() const;
  public:
  void clear_rooms();
  ::operations_research::Room* mutable_rooms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::Room >*
      mutable_rooms();
  private:
  const ::operations_research::Room& _internal_rooms(int index) const;
  ::operations_research::Room* _internal_add_rooms();
  public:
  const ::operations_research::Room& rooms(int index) const;
  ::operations_research::Room* add_rooms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::Room >&
      rooms() const;

  // string display_name = 1;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // int32 days_count = 2;
  void clear_days_count();
  int32_t days_count() const;
  void set_days_count(int32_t value);
  private:
  int32_t _internal_days_count() const;
  void _internal_set_days_count(int32_t value);
  public:

  // int32 daily_time_slot_count = 3;
  void clear_daily_time_slot_count();
  int32_t daily_time_slot_count() const;
  void set_daily_time_slot_count(int32_t value);
  private:
  int32_t _internal_daily_time_slot_count() const;
  void _internal_set_daily_time_slot_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.CourseSchedulingModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::Course > courses_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::Teacher > teachers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::Student > students_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::Room > rooms_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    int32_t days_count_;
    int32_t daily_time_slot_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fscheduling_2fcourse_5fscheduling_2eproto;
};
// -------------------------------------------------------------------

class CourseSchedulingResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.CourseSchedulingResult) */ {
 public:
  inline CourseSchedulingResult() : CourseSchedulingResult(nullptr) {}
  ~CourseSchedulingResult() override;
  explicit PROTOBUF_CONSTEXPR CourseSchedulingResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CourseSchedulingResult(const CourseSchedulingResult& from);
  CourseSchedulingResult(CourseSchedulingResult&& from) noexcept
    : CourseSchedulingResult() {
    *this = ::std::move(from);
  }

  inline CourseSchedulingResult& operator=(const CourseSchedulingResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CourseSchedulingResult& operator=(CourseSchedulingResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CourseSchedulingResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CourseSchedulingResult* internal_default_instance() {
    return reinterpret_cast<const CourseSchedulingResult*>(
               &_CourseSchedulingResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CourseSchedulingResult& a, CourseSchedulingResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CourseSchedulingResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CourseSchedulingResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CourseSchedulingResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CourseSchedulingResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CourseSchedulingResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CourseSchedulingResult& from) {
    CourseSchedulingResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CourseSchedulingResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.CourseSchedulingResult";
  }
  protected:
  explicit CourseSchedulingResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassAssignmentsFieldNumber = 3,
    kStudentAssignmentsFieldNumber = 4,
    kMessageFieldNumber = 1,
    kSolverStatusFieldNumber = 2,
  };
  // repeated .operations_research.ClassAssignment class_assignments = 3;
  int class_assignments_size() const;
  private:
  int _internal_class_assignments_size() const;
  public:
  void clear_class_assignments();
  ::operations_research::ClassAssignment* mutable_class_assignments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::ClassAssignment >*
      mutable_class_assignments();
  private:
  const ::operations_research::ClassAssignment& _internal_class_assignments(int index) const;
  ::operations_research::ClassAssignment* _internal_add_class_assignments();
  public:
  const ::operations_research::ClassAssignment& class_assignments(int index) const;
  ::operations_research::ClassAssignment* add_class_assignments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::ClassAssignment >&
      class_assignments() const;

  // repeated .operations_research.StudentAssignment student_assignments = 4;
  int student_assignments_size() const;
  private:
  int _internal_student_assignments_size() const;
  public:
  void clear_student_assignments();
  ::operations_research::StudentAssignment* mutable_student_assignments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::StudentAssignment >*
      mutable_student_assignments();
  private:
  const ::operations_research::StudentAssignment& _internal_student_assignments(int index) const;
  ::operations_research::StudentAssignment* _internal_add_student_assignments();
  public:
  const ::operations_research::StudentAssignment& student_assignments(int index) const;
  ::operations_research::StudentAssignment* add_student_assignments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::StudentAssignment >&
      student_assignments() const;

  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .operations_research.CourseSchedulingResultStatus solver_status = 2;
  void clear_solver_status();
  ::operations_research::CourseSchedulingResultStatus solver_status() const;
  void set_solver_status(::operations_research::CourseSchedulingResultStatus value);
  private:
  ::operations_research::CourseSchedulingResultStatus _internal_solver_status() const;
  void _internal_set_solver_status(::operations_research::CourseSchedulingResultStatus value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.CourseSchedulingResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::ClassAssignment > class_assignments_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::StudentAssignment > student_assignments_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int solver_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fscheduling_2fcourse_5fscheduling_2eproto;
};
// -------------------------------------------------------------------

class ClassAssignment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.ClassAssignment) */ {
 public:
  inline ClassAssignment() : ClassAssignment(nullptr) {}
  ~ClassAssignment() override;
  explicit PROTOBUF_CONSTEXPR ClassAssignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClassAssignment(const ClassAssignment& from);
  ClassAssignment(ClassAssignment&& from) noexcept
    : ClassAssignment() {
    *this = ::std::move(from);
  }

  inline ClassAssignment& operator=(const ClassAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassAssignment& operator=(ClassAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClassAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClassAssignment* internal_default_instance() {
    return reinterpret_cast<const ClassAssignment*>(
               &_ClassAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClassAssignment& a, ClassAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClassAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClassAssignment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClassAssignment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClassAssignment& from) {
    ClassAssignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassAssignment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.ClassAssignment";
  }
  protected:
  explicit ClassAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeSlotsFieldNumber = 3,
    kRoomIndicesFieldNumber = 4,
    kCourseIndexFieldNumber = 1,
    kSectionNumberFieldNumber = 2,
  };
  // repeated int32 time_slots = 3;
  int time_slots_size() const;
  private:
  int _internal_time_slots_size() const;
  public:
  void clear_time_slots();
  private:
  int32_t _internal_time_slots(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_time_slots() const;
  void _internal_add_time_slots(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_time_slots();
  public:
  int32_t time_slots(int index) const;
  void set_time_slots(int index, int32_t value);
  void add_time_slots(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      time_slots() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_time_slots();

  // repeated int32 room_indices = 4;
  int room_indices_size() const;
  private:
  int _internal_room_indices_size() const;
  public:
  void clear_room_indices();
  private:
  int32_t _internal_room_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_room_indices() const;
  void _internal_add_room_indices(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_room_indices();
  public:
  int32_t room_indices(int index) const;
  void set_room_indices(int index, int32_t value);
  void add_room_indices(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      room_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_room_indices();

  // int32 course_index = 1;
  void clear_course_index();
  int32_t course_index() const;
  void set_course_index(int32_t value);
  private:
  int32_t _internal_course_index() const;
  void _internal_set_course_index(int32_t value);
  public:

  // int32 section_number = 2;
  void clear_section_number();
  int32_t section_number() const;
  void set_section_number(int32_t value);
  private:
  int32_t _internal_section_number() const;
  void _internal_set_section_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.ClassAssignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > time_slots_;
    mutable std::atomic<int> _time_slots_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > room_indices_;
    mutable std::atomic<int> _room_indices_cached_byte_size_;
    int32_t course_index_;
    int32_t section_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fscheduling_2fcourse_5fscheduling_2eproto;
};
// -------------------------------------------------------------------

class StudentAssignment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.StudentAssignment) */ {
 public:
  inline StudentAssignment() : StudentAssignment(nullptr) {}
  ~StudentAssignment() override;
  explicit PROTOBUF_CONSTEXPR StudentAssignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StudentAssignment(const StudentAssignment& from);
  StudentAssignment(StudentAssignment&& from) noexcept
    : StudentAssignment() {
    *this = ::std::move(from);
  }

  inline StudentAssignment& operator=(const StudentAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline StudentAssignment& operator=(StudentAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StudentAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const StudentAssignment* internal_default_instance() {
    return reinterpret_cast<const StudentAssignment*>(
               &_StudentAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StudentAssignment& a, StudentAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(StudentAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StudentAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StudentAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StudentAssignment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StudentAssignment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StudentAssignment& from) {
    StudentAssignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StudentAssignment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.StudentAssignment";
  }
  protected:
  explicit StudentAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCourseIndicesFieldNumber = 2,
    kSectionIndicesFieldNumber = 3,
    kStudentIndexFieldNumber = 1,
  };
  // repeated int32 course_indices = 2;
  int course_indices_size() const;
  private:
  int _internal_course_indices_size() const;
  public:
  void clear_course_indices();
  private:
  int32_t _internal_course_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_course_indices() const;
  void _internal_add_course_indices(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_course_indices();
  public:
  int32_t course_indices(int index) const;
  void set_course_indices(int index, int32_t value);
  void add_course_indices(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      course_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_course_indices();

  // repeated int32 section_indices = 3;
  int section_indices_size() const;
  private:
  int _internal_section_indices_size() const;
  public:
  void clear_section_indices();
  private:
  int32_t _internal_section_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_section_indices() const;
  void _internal_add_section_indices(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_section_indices();
  public:
  int32_t section_indices(int index) const;
  void set_section_indices(int index, int32_t value);
  void add_section_indices(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      section_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_section_indices();

  // int32 student_index = 1;
  void clear_student_index();
  int32_t student_index() const;
  void set_student_index(int32_t value);
  private:
  int32_t _internal_student_index() const;
  void _internal_set_student_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.StudentAssignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > course_indices_;
    mutable std::atomic<int> _course_indices_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > section_indices_;
    mutable std::atomic<int> _section_indices_cached_byte_size_;
    int32_t student_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fscheduling_2fcourse_5fscheduling_2eproto;
};
// -------------------------------------------------------------------

class Course final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.Course) */ {
 public:
  inline Course() : Course(nullptr) {}
  ~Course() override;
  explicit PROTOBUF_CONSTEXPR Course(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Course(const Course& from);
  Course(Course&& from) noexcept
    : Course() {
    *this = ::std::move(from);
  }

  inline Course& operator=(const Course& from) {
    CopyFrom(from);
    return *this;
  }
  inline Course& operator=(Course&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Course& default_instance() {
    return *internal_default_instance();
  }
  static inline const Course* internal_default_instance() {
    return reinterpret_cast<const Course*>(
               &_Course_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Course& a, Course& b) {
    a.Swap(&b);
  }
  inline void Swap(Course* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Course* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Course* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Course>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Course& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Course& from) {
    Course::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Course* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.Course";
  }
  protected:
  explicit Course(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeacherIndicesFieldNumber = 6,
    kTeacherSectionCountsFieldNumber = 7,
    kRoomIndicesFieldNumber = 8,
    kDisplayNameFieldNumber = 1,
    kMeetingsCountFieldNumber = 2,
    kMaxCapacityFieldNumber = 3,
    kMinCapacityFieldNumber = 4,
    kConsecutiveSlotsCountFieldNumber = 5,
  };
  // repeated int32 teacher_indices = 6;
  int teacher_indices_size() const;
  private:
  int _internal_teacher_indices_size() const;
  public:
  void clear_teacher_indices();
  private:
  int32_t _internal_teacher_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_teacher_indices() const;
  void _internal_add_teacher_indices(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_teacher_indices();
  public:
  int32_t teacher_indices(int index) const;
  void set_teacher_indices(int index, int32_t value);
  void add_teacher_indices(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      teacher_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_teacher_indices();

  // repeated int32 teacher_section_counts = 7;
  int teacher_section_counts_size() const;
  private:
  int _internal_teacher_section_counts_size() const;
  public:
  void clear_teacher_section_counts();
  private:
  int32_t _internal_teacher_section_counts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_teacher_section_counts() const;
  void _internal_add_teacher_section_counts(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_teacher_section_counts();
  public:
  int32_t teacher_section_counts(int index) const;
  void set_teacher_section_counts(int index, int32_t value);
  void add_teacher_section_counts(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      teacher_section_counts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_teacher_section_counts();

  // repeated int32 room_indices = 8;
  int room_indices_size() const;
  private:
  int _internal_room_indices_size() const;
  public:
  void clear_room_indices();
  private:
  int32_t _internal_room_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_room_indices() const;
  void _internal_add_room_indices(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_room_indices();
  public:
  int32_t room_indices(int index) const;
  void set_room_indices(int index, int32_t value);
  void add_room_indices(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      room_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_room_indices();

  // string display_name = 1;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // int32 meetings_count = 2;
  void clear_meetings_count();
  int32_t meetings_count() const;
  void set_meetings_count(int32_t value);
  private:
  int32_t _internal_meetings_count() const;
  void _internal_set_meetings_count(int32_t value);
  public:

  // int32 max_capacity = 3;
  void clear_max_capacity();
  int32_t max_capacity() const;
  void set_max_capacity(int32_t value);
  private:
  int32_t _internal_max_capacity() const;
  void _internal_set_max_capacity(int32_t value);
  public:

  // int32 min_capacity = 4;
  void clear_min_capacity();
  int32_t min_capacity() const;
  void set_min_capacity(int32_t value);
  private:
  int32_t _internal_min_capacity() const;
  void _internal_set_min_capacity(int32_t value);
  public:

  // int32 consecutive_slots_count = 5;
  void clear_consecutive_slots_count();
  int32_t consecutive_slots_count() const;
  void set_consecutive_slots_count(int32_t value);
  private:
  int32_t _internal_consecutive_slots_count() const;
  void _internal_set_consecutive_slots_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.Course)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > teacher_indices_;
    mutable std::atomic<int> _teacher_indices_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > teacher_section_counts_;
    mutable std::atomic<int> _teacher_section_counts_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > room_indices_;
    mutable std::atomic<int> _room_indices_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    int32_t meetings_count_;
    int32_t max_capacity_;
    int32_t min_capacity_;
    int32_t consecutive_slots_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fscheduling_2fcourse_5fscheduling_2eproto;
};
// -------------------------------------------------------------------

class Teacher final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.Teacher) */ {
 public:
  inline Teacher() : Teacher(nullptr) {}
  ~Teacher() override;
  explicit PROTOBUF_CONSTEXPR Teacher(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Teacher(const Teacher& from);
  Teacher(Teacher&& from) noexcept
    : Teacher() {
    *this = ::std::move(from);
  }

  inline Teacher& operator=(const Teacher& from) {
    CopyFrom(from);
    return *this;
  }
  inline Teacher& operator=(Teacher&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Teacher& default_instance() {
    return *internal_default_instance();
  }
  static inline const Teacher* internal_default_instance() {
    return reinterpret_cast<const Teacher*>(
               &_Teacher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Teacher& a, Teacher& b) {
    a.Swap(&b);
  }
  inline void Swap(Teacher* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Teacher* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Teacher* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Teacher>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Teacher& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Teacher& from) {
    Teacher::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Teacher* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.Teacher";
  }
  protected:
  explicit Teacher(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRestrictedTimeSlotsFieldNumber = 2,
    kDisplayNameFieldNumber = 1,
  };
  // repeated int32 restricted_time_slots = 2;
  int restricted_time_slots_size() const;
  private:
  int _internal_restricted_time_slots_size() const;
  public:
  void clear_restricted_time_slots();
  private:
  int32_t _internal_restricted_time_slots(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_restricted_time_slots() const;
  void _internal_add_restricted_time_slots(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_restricted_time_slots();
  public:
  int32_t restricted_time_slots(int index) const;
  void set_restricted_time_slots(int index, int32_t value);
  void add_restricted_time_slots(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      restricted_time_slots() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_restricted_time_slots();

  // string display_name = 1;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // @@protoc_insertion_point(class_scope:operations_research.Teacher)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > restricted_time_slots_;
    mutable std::atomic<int> _restricted_time_slots_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fscheduling_2fcourse_5fscheduling_2eproto;
};
// -------------------------------------------------------------------

class Student final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.Student) */ {
 public:
  inline Student() : Student(nullptr) {}
  ~Student() override;
  explicit PROTOBUF_CONSTEXPR Student(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Student(const Student& from);
  Student(Student&& from) noexcept
    : Student() {
    *this = ::std::move(from);
  }

  inline Student& operator=(const Student& from) {
    CopyFrom(from);
    return *this;
  }
  inline Student& operator=(Student&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Student& default_instance() {
    return *internal_default_instance();
  }
  static inline const Student* internal_default_instance() {
    return reinterpret_cast<const Student*>(
               &_Student_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Student& a, Student& b) {
    a.Swap(&b);
  }
  inline void Swap(Student* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Student* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Student* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Student>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Student& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Student& from) {
    Student::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Student* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.Student";
  }
  protected:
  explicit Student(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCourseIndicesFieldNumber = 2,
    kDisplayNameFieldNumber = 1,
  };
  // repeated int32 course_indices = 2;
  int course_indices_size() const;
  private:
  int _internal_course_indices_size() const;
  public:
  void clear_course_indices();
  private:
  int32_t _internal_course_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_course_indices() const;
  void _internal_add_course_indices(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_course_indices();
  public:
  int32_t course_indices(int index) const;
  void set_course_indices(int index, int32_t value);
  void add_course_indices(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      course_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_course_indices();

  // string display_name = 1;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // @@protoc_insertion_point(class_scope:operations_research.Student)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > course_indices_;
    mutable std::atomic<int> _course_indices_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fscheduling_2fcourse_5fscheduling_2eproto;
};
// -------------------------------------------------------------------

class Room final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.Room) */ {
 public:
  inline Room() : Room(nullptr) {}
  ~Room() override;
  explicit PROTOBUF_CONSTEXPR Room(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Room(const Room& from);
  Room(Room&& from) noexcept
    : Room() {
    *this = ::std::move(from);
  }

  inline Room& operator=(const Room& from) {
    CopyFrom(from);
    return *this;
  }
  inline Room& operator=(Room&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Room& default_instance() {
    return *internal_default_instance();
  }
  static inline const Room* internal_default_instance() {
    return reinterpret_cast<const Room*>(
               &_Room_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Room& a, Room& b) {
    a.Swap(&b);
  }
  inline void Swap(Room* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Room* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Room* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Room>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Room& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Room& from) {
    Room::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Room* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.Room";
  }
  protected:
  explicit Room(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayNameFieldNumber = 1,
    kCapacityFieldNumber = 2,
  };
  // string display_name = 1;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // int32 capacity = 2;
  void clear_capacity();
  int32_t capacity() const;
  void set_capacity(int32_t value);
  private:
  int32_t _internal_capacity() const;
  void _internal_set_capacity(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.Room)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    int32_t capacity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fscheduling_2fcourse_5fscheduling_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CourseSchedulingModel

// string display_name = 1;
inline void CourseSchedulingModel::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& CourseSchedulingModel::display_name() const {
  // @@protoc_insertion_point(field_get:operations_research.CourseSchedulingModel.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CourseSchedulingModel::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:operations_research.CourseSchedulingModel.display_name)
}
inline std::string* CourseSchedulingModel::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:operations_research.CourseSchedulingModel.display_name)
  return _s;
}
inline const std::string& CourseSchedulingModel::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void CourseSchedulingModel::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CourseSchedulingModel::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CourseSchedulingModel::release_display_name() {
  // @@protoc_insertion_point(field_release:operations_research.CourseSchedulingModel.display_name)
  return _impl_.display_name_.Release();
}
inline void CourseSchedulingModel::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.CourseSchedulingModel.display_name)
}

// int32 days_count = 2;
inline void CourseSchedulingModel::clear_days_count() {
  _impl_.days_count_ = 0;
}
inline int32_t CourseSchedulingModel::_internal_days_count() const {
  return _impl_.days_count_;
}
inline int32_t CourseSchedulingModel::days_count() const {
  // @@protoc_insertion_point(field_get:operations_research.CourseSchedulingModel.days_count)
  return _internal_days_count();
}
inline void CourseSchedulingModel::_internal_set_days_count(int32_t value) {
  
  _impl_.days_count_ = value;
}
inline void CourseSchedulingModel::set_days_count(int32_t value) {
  _internal_set_days_count(value);
  // @@protoc_insertion_point(field_set:operations_research.CourseSchedulingModel.days_count)
}

// int32 daily_time_slot_count = 3;
inline void CourseSchedulingModel::clear_daily_time_slot_count() {
  _impl_.daily_time_slot_count_ = 0;
}
inline int32_t CourseSchedulingModel::_internal_daily_time_slot_count() const {
  return _impl_.daily_time_slot_count_;
}
inline int32_t CourseSchedulingModel::daily_time_slot_count() const {
  // @@protoc_insertion_point(field_get:operations_research.CourseSchedulingModel.daily_time_slot_count)
  return _internal_daily_time_slot_count();
}
inline void CourseSchedulingModel::_internal_set_daily_time_slot_count(int32_t value) {
  
  _impl_.daily_time_slot_count_ = value;
}
inline void CourseSchedulingModel::set_daily_time_slot_count(int32_t value) {
  _internal_set_daily_time_slot_count(value);
  // @@protoc_insertion_point(field_set:operations_research.CourseSchedulingModel.daily_time_slot_count)
}

// repeated .operations_research.Course courses = 4;
inline int CourseSchedulingModel::_internal_courses_size() const {
  return _impl_.courses_.size();
}
inline int CourseSchedulingModel::courses_size() const {
  return _internal_courses_size();
}
inline void CourseSchedulingModel::clear_courses() {
  _impl_.courses_.Clear();
}
inline ::operations_research::Course* CourseSchedulingModel::mutable_courses(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.CourseSchedulingModel.courses)
  return _impl_.courses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::Course >*
CourseSchedulingModel::mutable_courses() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CourseSchedulingModel.courses)
  return &_impl_.courses_;
}
inline const ::operations_research::Course& CourseSchedulingModel::_internal_courses(int index) const {
  return _impl_.courses_.Get(index);
}
inline const ::operations_research::Course& CourseSchedulingModel::courses(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CourseSchedulingModel.courses)
  return _internal_courses(index);
}
inline ::operations_research::Course* CourseSchedulingModel::_internal_add_courses() {
  return _impl_.courses_.Add();
}
inline ::operations_research::Course* CourseSchedulingModel::add_courses() {
  ::operations_research::Course* _add = _internal_add_courses();
  // @@protoc_insertion_point(field_add:operations_research.CourseSchedulingModel.courses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::Course >&
CourseSchedulingModel::courses() const {
  // @@protoc_insertion_point(field_list:operations_research.CourseSchedulingModel.courses)
  return _impl_.courses_;
}

// repeated .operations_research.Teacher teachers = 5;
inline int CourseSchedulingModel::_internal_teachers_size() const {
  return _impl_.teachers_.size();
}
inline int CourseSchedulingModel::teachers_size() const {
  return _internal_teachers_size();
}
inline void CourseSchedulingModel::clear_teachers() {
  _impl_.teachers_.Clear();
}
inline ::operations_research::Teacher* CourseSchedulingModel::mutable_teachers(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.CourseSchedulingModel.teachers)
  return _impl_.teachers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::Teacher >*
CourseSchedulingModel::mutable_teachers() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CourseSchedulingModel.teachers)
  return &_impl_.teachers_;
}
inline const ::operations_research::Teacher& CourseSchedulingModel::_internal_teachers(int index) const {
  return _impl_.teachers_.Get(index);
}
inline const ::operations_research::Teacher& CourseSchedulingModel::teachers(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CourseSchedulingModel.teachers)
  return _internal_teachers(index);
}
inline ::operations_research::Teacher* CourseSchedulingModel::_internal_add_teachers() {
  return _impl_.teachers_.Add();
}
inline ::operations_research::Teacher* CourseSchedulingModel::add_teachers() {
  ::operations_research::Teacher* _add = _internal_add_teachers();
  // @@protoc_insertion_point(field_add:operations_research.CourseSchedulingModel.teachers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::Teacher >&
CourseSchedulingModel::teachers() const {
  // @@protoc_insertion_point(field_list:operations_research.CourseSchedulingModel.teachers)
  return _impl_.teachers_;
}

// repeated .operations_research.Student students = 6;
inline int CourseSchedulingModel::_internal_students_size() const {
  return _impl_.students_.size();
}
inline int CourseSchedulingModel::students_size() const {
  return _internal_students_size();
}
inline void CourseSchedulingModel::clear_students() {
  _impl_.students_.Clear();
}
inline ::operations_research::Student* CourseSchedulingModel::mutable_students(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.CourseSchedulingModel.students)
  return _impl_.students_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::Student >*
CourseSchedulingModel::mutable_students() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CourseSchedulingModel.students)
  return &_impl_.students_;
}
inline const ::operations_research::Student& CourseSchedulingModel::_internal_students(int index) const {
  return _impl_.students_.Get(index);
}
inline const ::operations_research::Student& CourseSchedulingModel::students(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CourseSchedulingModel.students)
  return _internal_students(index);
}
inline ::operations_research::Student* CourseSchedulingModel::_internal_add_students() {
  return _impl_.students_.Add();
}
inline ::operations_research::Student* CourseSchedulingModel::add_students() {
  ::operations_research::Student* _add = _internal_add_students();
  // @@protoc_insertion_point(field_add:operations_research.CourseSchedulingModel.students)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::Student >&
CourseSchedulingModel::students() const {
  // @@protoc_insertion_point(field_list:operations_research.CourseSchedulingModel.students)
  return _impl_.students_;
}

// repeated .operations_research.Room rooms = 7;
inline int CourseSchedulingModel::_internal_rooms_size() const {
  return _impl_.rooms_.size();
}
inline int CourseSchedulingModel::rooms_size() const {
  return _internal_rooms_size();
}
inline void CourseSchedulingModel::clear_rooms() {
  _impl_.rooms_.Clear();
}
inline ::operations_research::Room* CourseSchedulingModel::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.CourseSchedulingModel.rooms)
  return _impl_.rooms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::Room >*
CourseSchedulingModel::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CourseSchedulingModel.rooms)
  return &_impl_.rooms_;
}
inline const ::operations_research::Room& CourseSchedulingModel::_internal_rooms(int index) const {
  return _impl_.rooms_.Get(index);
}
inline const ::operations_research::Room& CourseSchedulingModel::rooms(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CourseSchedulingModel.rooms)
  return _internal_rooms(index);
}
inline ::operations_research::Room* CourseSchedulingModel::_internal_add_rooms() {
  return _impl_.rooms_.Add();
}
inline ::operations_research::Room* CourseSchedulingModel::add_rooms() {
  ::operations_research::Room* _add = _internal_add_rooms();
  // @@protoc_insertion_point(field_add:operations_research.CourseSchedulingModel.rooms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::Room >&
CourseSchedulingModel::rooms() const {
  // @@protoc_insertion_point(field_list:operations_research.CourseSchedulingModel.rooms)
  return _impl_.rooms_;
}

// -------------------------------------------------------------------

// CourseSchedulingResult

// string message = 1;
inline void CourseSchedulingResult::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& CourseSchedulingResult::message() const {
  // @@protoc_insertion_point(field_get:operations_research.CourseSchedulingResult.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CourseSchedulingResult::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:operations_research.CourseSchedulingResult.message)
}
inline std::string* CourseSchedulingResult::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:operations_research.CourseSchedulingResult.message)
  return _s;
}
inline const std::string& CourseSchedulingResult::_internal_message() const {
  return _impl_.message_.Get();
}
inline void CourseSchedulingResult::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* CourseSchedulingResult::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* CourseSchedulingResult::release_message() {
  // @@protoc_insertion_point(field_release:operations_research.CourseSchedulingResult.message)
  return _impl_.message_.Release();
}
inline void CourseSchedulingResult::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.CourseSchedulingResult.message)
}

// .operations_research.CourseSchedulingResultStatus solver_status = 2;
inline void CourseSchedulingResult::clear_solver_status() {
  _impl_.solver_status_ = 0;
}
inline ::operations_research::CourseSchedulingResultStatus CourseSchedulingResult::_internal_solver_status() const {
  return static_cast< ::operations_research::CourseSchedulingResultStatus >(_impl_.solver_status_);
}
inline ::operations_research::CourseSchedulingResultStatus CourseSchedulingResult::solver_status() const {
  // @@protoc_insertion_point(field_get:operations_research.CourseSchedulingResult.solver_status)
  return _internal_solver_status();
}
inline void CourseSchedulingResult::_internal_set_solver_status(::operations_research::CourseSchedulingResultStatus value) {
  
  _impl_.solver_status_ = value;
}
inline void CourseSchedulingResult::set_solver_status(::operations_research::CourseSchedulingResultStatus value) {
  _internal_set_solver_status(value);
  // @@protoc_insertion_point(field_set:operations_research.CourseSchedulingResult.solver_status)
}

// repeated .operations_research.ClassAssignment class_assignments = 3;
inline int CourseSchedulingResult::_internal_class_assignments_size() const {
  return _impl_.class_assignments_.size();
}
inline int CourseSchedulingResult::class_assignments_size() const {
  return _internal_class_assignments_size();
}
inline void CourseSchedulingResult::clear_class_assignments() {
  _impl_.class_assignments_.Clear();
}
inline ::operations_research::ClassAssignment* CourseSchedulingResult::mutable_class_assignments(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.CourseSchedulingResult.class_assignments)
  return _impl_.class_assignments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::ClassAssignment >*
CourseSchedulingResult::mutable_class_assignments() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CourseSchedulingResult.class_assignments)
  return &_impl_.class_assignments_;
}
inline const ::operations_research::ClassAssignment& CourseSchedulingResult::_internal_class_assignments(int index) const {
  return _impl_.class_assignments_.Get(index);
}
inline const ::operations_research::ClassAssignment& CourseSchedulingResult::class_assignments(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CourseSchedulingResult.class_assignments)
  return _internal_class_assignments(index);
}
inline ::operations_research::ClassAssignment* CourseSchedulingResult::_internal_add_class_assignments() {
  return _impl_.class_assignments_.Add();
}
inline ::operations_research::ClassAssignment* CourseSchedulingResult::add_class_assignments() {
  ::operations_research::ClassAssignment* _add = _internal_add_class_assignments();
  // @@protoc_insertion_point(field_add:operations_research.CourseSchedulingResult.class_assignments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::ClassAssignment >&
CourseSchedulingResult::class_assignments() const {
  // @@protoc_insertion_point(field_list:operations_research.CourseSchedulingResult.class_assignments)
  return _impl_.class_assignments_;
}

// repeated .operations_research.StudentAssignment student_assignments = 4;
inline int CourseSchedulingResult::_internal_student_assignments_size() const {
  return _impl_.student_assignments_.size();
}
inline int CourseSchedulingResult::student_assignments_size() const {
  return _internal_student_assignments_size();
}
inline void CourseSchedulingResult::clear_student_assignments() {
  _impl_.student_assignments_.Clear();
}
inline ::operations_research::StudentAssignment* CourseSchedulingResult::mutable_student_assignments(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.CourseSchedulingResult.student_assignments)
  return _impl_.student_assignments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::StudentAssignment >*
CourseSchedulingResult::mutable_student_assignments() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CourseSchedulingResult.student_assignments)
  return &_impl_.student_assignments_;
}
inline const ::operations_research::StudentAssignment& CourseSchedulingResult::_internal_student_assignments(int index) const {
  return _impl_.student_assignments_.Get(index);
}
inline const ::operations_research::StudentAssignment& CourseSchedulingResult::student_assignments(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CourseSchedulingResult.student_assignments)
  return _internal_student_assignments(index);
}
inline ::operations_research::StudentAssignment* CourseSchedulingResult::_internal_add_student_assignments() {
  return _impl_.student_assignments_.Add();
}
inline ::operations_research::StudentAssignment* CourseSchedulingResult::add_student_assignments() {
  ::operations_research::StudentAssignment* _add = _internal_add_student_assignments();
  // @@protoc_insertion_point(field_add:operations_research.CourseSchedulingResult.student_assignments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::StudentAssignment >&
CourseSchedulingResult::student_assignments() const {
  // @@protoc_insertion_point(field_list:operations_research.CourseSchedulingResult.student_assignments)
  return _impl_.student_assignments_;
}

// -------------------------------------------------------------------

// ClassAssignment

// int32 course_index = 1;
inline void ClassAssignment::clear_course_index() {
  _impl_.course_index_ = 0;
}
inline int32_t ClassAssignment::_internal_course_index() const {
  return _impl_.course_index_;
}
inline int32_t ClassAssignment::course_index() const {
  // @@protoc_insertion_point(field_get:operations_research.ClassAssignment.course_index)
  return _internal_course_index();
}
inline void ClassAssignment::_internal_set_course_index(int32_t value) {
  
  _impl_.course_index_ = value;
}
inline void ClassAssignment::set_course_index(int32_t value) {
  _internal_set_course_index(value);
  // @@protoc_insertion_point(field_set:operations_research.ClassAssignment.course_index)
}

// int32 section_number = 2;
inline void ClassAssignment::clear_section_number() {
  _impl_.section_number_ = 0;
}
inline int32_t ClassAssignment::_internal_section_number() const {
  return _impl_.section_number_;
}
inline int32_t ClassAssignment::section_number() const {
  // @@protoc_insertion_point(field_get:operations_research.ClassAssignment.section_number)
  return _internal_section_number();
}
inline void ClassAssignment::_internal_set_section_number(int32_t value) {
  
  _impl_.section_number_ = value;
}
inline void ClassAssignment::set_section_number(int32_t value) {
  _internal_set_section_number(value);
  // @@protoc_insertion_point(field_set:operations_research.ClassAssignment.section_number)
}

// repeated int32 time_slots = 3;
inline int ClassAssignment::_internal_time_slots_size() const {
  return _impl_.time_slots_.size();
}
inline int ClassAssignment::time_slots_size() const {
  return _internal_time_slots_size();
}
inline void ClassAssignment::clear_time_slots() {
  _impl_.time_slots_.Clear();
}
inline int32_t ClassAssignment::_internal_time_slots(int index) const {
  return _impl_.time_slots_.Get(index);
}
inline int32_t ClassAssignment::time_slots(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.ClassAssignment.time_slots)
  return _internal_time_slots(index);
}
inline void ClassAssignment::set_time_slots(int index, int32_t value) {
  _impl_.time_slots_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.ClassAssignment.time_slots)
}
inline void ClassAssignment::_internal_add_time_slots(int32_t value) {
  _impl_.time_slots_.Add(value);
}
inline void ClassAssignment::add_time_slots(int32_t value) {
  _internal_add_time_slots(value);
  // @@protoc_insertion_point(field_add:operations_research.ClassAssignment.time_slots)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ClassAssignment::_internal_time_slots() const {
  return _impl_.time_slots_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ClassAssignment::time_slots() const {
  // @@protoc_insertion_point(field_list:operations_research.ClassAssignment.time_slots)
  return _internal_time_slots();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ClassAssignment::_internal_mutable_time_slots() {
  return &_impl_.time_slots_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ClassAssignment::mutable_time_slots() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.ClassAssignment.time_slots)
  return _internal_mutable_time_slots();
}

// repeated int32 room_indices = 4;
inline int ClassAssignment::_internal_room_indices_size() const {
  return _impl_.room_indices_.size();
}
inline int ClassAssignment::room_indices_size() const {
  return _internal_room_indices_size();
}
inline void ClassAssignment::clear_room_indices() {
  _impl_.room_indices_.Clear();
}
inline int32_t ClassAssignment::_internal_room_indices(int index) const {
  return _impl_.room_indices_.Get(index);
}
inline int32_t ClassAssignment::room_indices(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.ClassAssignment.room_indices)
  return _internal_room_indices(index);
}
inline void ClassAssignment::set_room_indices(int index, int32_t value) {
  _impl_.room_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.ClassAssignment.room_indices)
}
inline void ClassAssignment::_internal_add_room_indices(int32_t value) {
  _impl_.room_indices_.Add(value);
}
inline void ClassAssignment::add_room_indices(int32_t value) {
  _internal_add_room_indices(value);
  // @@protoc_insertion_point(field_add:operations_research.ClassAssignment.room_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ClassAssignment::_internal_room_indices() const {
  return _impl_.room_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ClassAssignment::room_indices() const {
  // @@protoc_insertion_point(field_list:operations_research.ClassAssignment.room_indices)
  return _internal_room_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ClassAssignment::_internal_mutable_room_indices() {
  return &_impl_.room_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ClassAssignment::mutable_room_indices() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.ClassAssignment.room_indices)
  return _internal_mutable_room_indices();
}

// -------------------------------------------------------------------

// StudentAssignment

// int32 student_index = 1;
inline void StudentAssignment::clear_student_index() {
  _impl_.student_index_ = 0;
}
inline int32_t StudentAssignment::_internal_student_index() const {
  return _impl_.student_index_;
}
inline int32_t StudentAssignment::student_index() const {
  // @@protoc_insertion_point(field_get:operations_research.StudentAssignment.student_index)
  return _internal_student_index();
}
inline void StudentAssignment::_internal_set_student_index(int32_t value) {
  
  _impl_.student_index_ = value;
}
inline void StudentAssignment::set_student_index(int32_t value) {
  _internal_set_student_index(value);
  // @@protoc_insertion_point(field_set:operations_research.StudentAssignment.student_index)
}

// repeated int32 course_indices = 2;
inline int StudentAssignment::_internal_course_indices_size() const {
  return _impl_.course_indices_.size();
}
inline int StudentAssignment::course_indices_size() const {
  return _internal_course_indices_size();
}
inline void StudentAssignment::clear_course_indices() {
  _impl_.course_indices_.Clear();
}
inline int32_t StudentAssignment::_internal_course_indices(int index) const {
  return _impl_.course_indices_.Get(index);
}
inline int32_t StudentAssignment::course_indices(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.StudentAssignment.course_indices)
  return _internal_course_indices(index);
}
inline void StudentAssignment::set_course_indices(int index, int32_t value) {
  _impl_.course_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.StudentAssignment.course_indices)
}
inline void StudentAssignment::_internal_add_course_indices(int32_t value) {
  _impl_.course_indices_.Add(value);
}
inline void StudentAssignment::add_course_indices(int32_t value) {
  _internal_add_course_indices(value);
  // @@protoc_insertion_point(field_add:operations_research.StudentAssignment.course_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
StudentAssignment::_internal_course_indices() const {
  return _impl_.course_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
StudentAssignment::course_indices() const {
  // @@protoc_insertion_point(field_list:operations_research.StudentAssignment.course_indices)
  return _internal_course_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
StudentAssignment::_internal_mutable_course_indices() {
  return &_impl_.course_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
StudentAssignment::mutable_course_indices() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.StudentAssignment.course_indices)
  return _internal_mutable_course_indices();
}

// repeated int32 section_indices = 3;
inline int StudentAssignment::_internal_section_indices_size() const {
  return _impl_.section_indices_.size();
}
inline int StudentAssignment::section_indices_size() const {
  return _internal_section_indices_size();
}
inline void StudentAssignment::clear_section_indices() {
  _impl_.section_indices_.Clear();
}
inline int32_t StudentAssignment::_internal_section_indices(int index) const {
  return _impl_.section_indices_.Get(index);
}
inline int32_t StudentAssignment::section_indices(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.StudentAssignment.section_indices)
  return _internal_section_indices(index);
}
inline void StudentAssignment::set_section_indices(int index, int32_t value) {
  _impl_.section_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.StudentAssignment.section_indices)
}
inline void StudentAssignment::_internal_add_section_indices(int32_t value) {
  _impl_.section_indices_.Add(value);
}
inline void StudentAssignment::add_section_indices(int32_t value) {
  _internal_add_section_indices(value);
  // @@protoc_insertion_point(field_add:operations_research.StudentAssignment.section_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
StudentAssignment::_internal_section_indices() const {
  return _impl_.section_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
StudentAssignment::section_indices() const {
  // @@protoc_insertion_point(field_list:operations_research.StudentAssignment.section_indices)
  return _internal_section_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
StudentAssignment::_internal_mutable_section_indices() {
  return &_impl_.section_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
StudentAssignment::mutable_section_indices() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.StudentAssignment.section_indices)
  return _internal_mutable_section_indices();
}

// -------------------------------------------------------------------

// Course

// string display_name = 1;
inline void Course::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& Course::display_name() const {
  // @@protoc_insertion_point(field_get:operations_research.Course.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Course::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:operations_research.Course.display_name)
}
inline std::string* Course::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:operations_research.Course.display_name)
  return _s;
}
inline const std::string& Course::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void Course::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Course::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Course::release_display_name() {
  // @@protoc_insertion_point(field_release:operations_research.Course.display_name)
  return _impl_.display_name_.Release();
}
inline void Course::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.Course.display_name)
}

// int32 meetings_count = 2;
inline void Course::clear_meetings_count() {
  _impl_.meetings_count_ = 0;
}
inline int32_t Course::_internal_meetings_count() const {
  return _impl_.meetings_count_;
}
inline int32_t Course::meetings_count() const {
  // @@protoc_insertion_point(field_get:operations_research.Course.meetings_count)
  return _internal_meetings_count();
}
inline void Course::_internal_set_meetings_count(int32_t value) {
  
  _impl_.meetings_count_ = value;
}
inline void Course::set_meetings_count(int32_t value) {
  _internal_set_meetings_count(value);
  // @@protoc_insertion_point(field_set:operations_research.Course.meetings_count)
}

// int32 max_capacity = 3;
inline void Course::clear_max_capacity() {
  _impl_.max_capacity_ = 0;
}
inline int32_t Course::_internal_max_capacity() const {
  return _impl_.max_capacity_;
}
inline int32_t Course::max_capacity() const {
  // @@protoc_insertion_point(field_get:operations_research.Course.max_capacity)
  return _internal_max_capacity();
}
inline void Course::_internal_set_max_capacity(int32_t value) {
  
  _impl_.max_capacity_ = value;
}
inline void Course::set_max_capacity(int32_t value) {
  _internal_set_max_capacity(value);
  // @@protoc_insertion_point(field_set:operations_research.Course.max_capacity)
}

// int32 min_capacity = 4;
inline void Course::clear_min_capacity() {
  _impl_.min_capacity_ = 0;
}
inline int32_t Course::_internal_min_capacity() const {
  return _impl_.min_capacity_;
}
inline int32_t Course::min_capacity() const {
  // @@protoc_insertion_point(field_get:operations_research.Course.min_capacity)
  return _internal_min_capacity();
}
inline void Course::_internal_set_min_capacity(int32_t value) {
  
  _impl_.min_capacity_ = value;
}
inline void Course::set_min_capacity(int32_t value) {
  _internal_set_min_capacity(value);
  // @@protoc_insertion_point(field_set:operations_research.Course.min_capacity)
}

// int32 consecutive_slots_count = 5;
inline void Course::clear_consecutive_slots_count() {
  _impl_.consecutive_slots_count_ = 0;
}
inline int32_t Course::_internal_consecutive_slots_count() const {
  return _impl_.consecutive_slots_count_;
}
inline int32_t Course::consecutive_slots_count() const {
  // @@protoc_insertion_point(field_get:operations_research.Course.consecutive_slots_count)
  return _internal_consecutive_slots_count();
}
inline void Course::_internal_set_consecutive_slots_count(int32_t value) {
  
  _impl_.consecutive_slots_count_ = value;
}
inline void Course::set_consecutive_slots_count(int32_t value) {
  _internal_set_consecutive_slots_count(value);
  // @@protoc_insertion_point(field_set:operations_research.Course.consecutive_slots_count)
}

// repeated int32 teacher_indices = 6;
inline int Course::_internal_teacher_indices_size() const {
  return _impl_.teacher_indices_.size();
}
inline int Course::teacher_indices_size() const {
  return _internal_teacher_indices_size();
}
inline void Course::clear_teacher_indices() {
  _impl_.teacher_indices_.Clear();
}
inline int32_t Course::_internal_teacher_indices(int index) const {
  return _impl_.teacher_indices_.Get(index);
}
inline int32_t Course::teacher_indices(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.Course.teacher_indices)
  return _internal_teacher_indices(index);
}
inline void Course::set_teacher_indices(int index, int32_t value) {
  _impl_.teacher_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.Course.teacher_indices)
}
inline void Course::_internal_add_teacher_indices(int32_t value) {
  _impl_.teacher_indices_.Add(value);
}
inline void Course::add_teacher_indices(int32_t value) {
  _internal_add_teacher_indices(value);
  // @@protoc_insertion_point(field_add:operations_research.Course.teacher_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Course::_internal_teacher_indices() const {
  return _impl_.teacher_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Course::teacher_indices() const {
  // @@protoc_insertion_point(field_list:operations_research.Course.teacher_indices)
  return _internal_teacher_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Course::_internal_mutable_teacher_indices() {
  return &_impl_.teacher_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Course::mutable_teacher_indices() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.Course.teacher_indices)
  return _internal_mutable_teacher_indices();
}

// repeated int32 teacher_section_counts = 7;
inline int Course::_internal_teacher_section_counts_size() const {
  return _impl_.teacher_section_counts_.size();
}
inline int Course::teacher_section_counts_size() const {
  return _internal_teacher_section_counts_size();
}
inline void Course::clear_teacher_section_counts() {
  _impl_.teacher_section_counts_.Clear();
}
inline int32_t Course::_internal_teacher_section_counts(int index) const {
  return _impl_.teacher_section_counts_.Get(index);
}
inline int32_t Course::teacher_section_counts(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.Course.teacher_section_counts)
  return _internal_teacher_section_counts(index);
}
inline void Course::set_teacher_section_counts(int index, int32_t value) {
  _impl_.teacher_section_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.Course.teacher_section_counts)
}
inline void Course::_internal_add_teacher_section_counts(int32_t value) {
  _impl_.teacher_section_counts_.Add(value);
}
inline void Course::add_teacher_section_counts(int32_t value) {
  _internal_add_teacher_section_counts(value);
  // @@protoc_insertion_point(field_add:operations_research.Course.teacher_section_counts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Course::_internal_teacher_section_counts() const {
  return _impl_.teacher_section_counts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Course::teacher_section_counts() const {
  // @@protoc_insertion_point(field_list:operations_research.Course.teacher_section_counts)
  return _internal_teacher_section_counts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Course::_internal_mutable_teacher_section_counts() {
  return &_impl_.teacher_section_counts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Course::mutable_teacher_section_counts() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.Course.teacher_section_counts)
  return _internal_mutable_teacher_section_counts();
}

// repeated int32 room_indices = 8;
inline int Course::_internal_room_indices_size() const {
  return _impl_.room_indices_.size();
}
inline int Course::room_indices_size() const {
  return _internal_room_indices_size();
}
inline void Course::clear_room_indices() {
  _impl_.room_indices_.Clear();
}
inline int32_t Course::_internal_room_indices(int index) const {
  return _impl_.room_indices_.Get(index);
}
inline int32_t Course::room_indices(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.Course.room_indices)
  return _internal_room_indices(index);
}
inline void Course::set_room_indices(int index, int32_t value) {
  _impl_.room_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.Course.room_indices)
}
inline void Course::_internal_add_room_indices(int32_t value) {
  _impl_.room_indices_.Add(value);
}
inline void Course::add_room_indices(int32_t value) {
  _internal_add_room_indices(value);
  // @@protoc_insertion_point(field_add:operations_research.Course.room_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Course::_internal_room_indices() const {
  return _impl_.room_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Course::room_indices() const {
  // @@protoc_insertion_point(field_list:operations_research.Course.room_indices)
  return _internal_room_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Course::_internal_mutable_room_indices() {
  return &_impl_.room_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Course::mutable_room_indices() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.Course.room_indices)
  return _internal_mutable_room_indices();
}

// -------------------------------------------------------------------

// Teacher

// string display_name = 1;
inline void Teacher::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& Teacher::display_name() const {
  // @@protoc_insertion_point(field_get:operations_research.Teacher.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Teacher::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:operations_research.Teacher.display_name)
}
inline std::string* Teacher::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:operations_research.Teacher.display_name)
  return _s;
}
inline const std::string& Teacher::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void Teacher::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Teacher::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Teacher::release_display_name() {
  // @@protoc_insertion_point(field_release:operations_research.Teacher.display_name)
  return _impl_.display_name_.Release();
}
inline void Teacher::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.Teacher.display_name)
}

// repeated int32 restricted_time_slots = 2;
inline int Teacher::_internal_restricted_time_slots_size() const {
  return _impl_.restricted_time_slots_.size();
}
inline int Teacher::restricted_time_slots_size() const {
  return _internal_restricted_time_slots_size();
}
inline void Teacher::clear_restricted_time_slots() {
  _impl_.restricted_time_slots_.Clear();
}
inline int32_t Teacher::_internal_restricted_time_slots(int index) const {
  return _impl_.restricted_time_slots_.Get(index);
}
inline int32_t Teacher::restricted_time_slots(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.Teacher.restricted_time_slots)
  return _internal_restricted_time_slots(index);
}
inline void Teacher::set_restricted_time_slots(int index, int32_t value) {
  _impl_.restricted_time_slots_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.Teacher.restricted_time_slots)
}
inline void Teacher::_internal_add_restricted_time_slots(int32_t value) {
  _impl_.restricted_time_slots_.Add(value);
}
inline void Teacher::add_restricted_time_slots(int32_t value) {
  _internal_add_restricted_time_slots(value);
  // @@protoc_insertion_point(field_add:operations_research.Teacher.restricted_time_slots)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Teacher::_internal_restricted_time_slots() const {
  return _impl_.restricted_time_slots_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Teacher::restricted_time_slots() const {
  // @@protoc_insertion_point(field_list:operations_research.Teacher.restricted_time_slots)
  return _internal_restricted_time_slots();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Teacher::_internal_mutable_restricted_time_slots() {
  return &_impl_.restricted_time_slots_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Teacher::mutable_restricted_time_slots() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.Teacher.restricted_time_slots)
  return _internal_mutable_restricted_time_slots();
}

// -------------------------------------------------------------------

// Student

// string display_name = 1;
inline void Student::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& Student::display_name() const {
  // @@protoc_insertion_point(field_get:operations_research.Student.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Student::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:operations_research.Student.display_name)
}
inline std::string* Student::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:operations_research.Student.display_name)
  return _s;
}
inline const std::string& Student::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void Student::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Student::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Student::release_display_name() {
  // @@protoc_insertion_point(field_release:operations_research.Student.display_name)
  return _impl_.display_name_.Release();
}
inline void Student::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.Student.display_name)
}

// repeated int32 course_indices = 2;
inline int Student::_internal_course_indices_size() const {
  return _impl_.course_indices_.size();
}
inline int Student::course_indices_size() const {
  return _internal_course_indices_size();
}
inline void Student::clear_course_indices() {
  _impl_.course_indices_.Clear();
}
inline int32_t Student::_internal_course_indices(int index) const {
  return _impl_.course_indices_.Get(index);
}
inline int32_t Student::course_indices(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.Student.course_indices)
  return _internal_course_indices(index);
}
inline void Student::set_course_indices(int index, int32_t value) {
  _impl_.course_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.Student.course_indices)
}
inline void Student::_internal_add_course_indices(int32_t value) {
  _impl_.course_indices_.Add(value);
}
inline void Student::add_course_indices(int32_t value) {
  _internal_add_course_indices(value);
  // @@protoc_insertion_point(field_add:operations_research.Student.course_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Student::_internal_course_indices() const {
  return _impl_.course_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Student::course_indices() const {
  // @@protoc_insertion_point(field_list:operations_research.Student.course_indices)
  return _internal_course_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Student::_internal_mutable_course_indices() {
  return &_impl_.course_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Student::mutable_course_indices() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.Student.course_indices)
  return _internal_mutable_course_indices();
}

// -------------------------------------------------------------------

// Room

// string display_name = 1;
inline void Room::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& Room::display_name() const {
  // @@protoc_insertion_point(field_get:operations_research.Room.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Room::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:operations_research.Room.display_name)
}
inline std::string* Room::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:operations_research.Room.display_name)
  return _s;
}
inline const std::string& Room::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void Room::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Room::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Room::release_display_name() {
  // @@protoc_insertion_point(field_release:operations_research.Room.display_name)
  return _impl_.display_name_.Release();
}
inline void Room::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.Room.display_name)
}

// int32 capacity = 2;
inline void Room::clear_capacity() {
  _impl_.capacity_ = 0;
}
inline int32_t Room::_internal_capacity() const {
  return _impl_.capacity_;
}
inline int32_t Room::capacity() const {
  // @@protoc_insertion_point(field_get:operations_research.Room.capacity)
  return _internal_capacity();
}
inline void Room::_internal_set_capacity(int32_t value) {
  
  _impl_.capacity_ = value;
}
inline void Room::set_capacity(int32_t value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:operations_research.Room.capacity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace operations_research

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::operations_research::CourseSchedulingResultStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::CourseSchedulingResultStatus>() {
  return ::operations_research::CourseSchedulingResultStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ortools_2fscheduling_2fcourse_5fscheduling_2eproto
