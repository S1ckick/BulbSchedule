// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/constraint_solver/demon_profiler.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto;
namespace operations_research {
class ConstraintRuns;
struct ConstraintRunsDefaultTypeInternal;
extern ConstraintRunsDefaultTypeInternal _ConstraintRuns_default_instance_;
class DemonRuns;
struct DemonRunsDefaultTypeInternal;
extern DemonRunsDefaultTypeInternal _DemonRuns_default_instance_;
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> ::operations_research::ConstraintRuns* Arena::CreateMaybeMessage<::operations_research::ConstraintRuns>(Arena*);
template<> ::operations_research::DemonRuns* Arena::CreateMaybeMessage<::operations_research::DemonRuns>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace operations_research {

// ===================================================================

class DemonRuns final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.DemonRuns) */ {
 public:
  inline DemonRuns() : DemonRuns(nullptr) {}
  ~DemonRuns() override;
  explicit PROTOBUF_CONSTEXPR DemonRuns(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DemonRuns(const DemonRuns& from);
  DemonRuns(DemonRuns&& from) noexcept
    : DemonRuns() {
    *this = ::std::move(from);
  }

  inline DemonRuns& operator=(const DemonRuns& from) {
    CopyFrom(from);
    return *this;
  }
  inline DemonRuns& operator=(DemonRuns&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DemonRuns& default_instance() {
    return *internal_default_instance();
  }
  static inline const DemonRuns* internal_default_instance() {
    return reinterpret_cast<const DemonRuns*>(
               &_DemonRuns_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DemonRuns& a, DemonRuns& b) {
    a.Swap(&b);
  }
  inline void Swap(DemonRuns* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DemonRuns* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DemonRuns* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DemonRuns>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DemonRuns& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DemonRuns& from) {
    DemonRuns::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DemonRuns* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.DemonRuns";
  }
  protected:
  explicit DemonRuns(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
    kDemonIdFieldNumber = 1,
    kFailuresFieldNumber = 4,
  };
  // repeated int64 start_time = 2;
  int start_time_size() const;
  private:
  int _internal_start_time_size() const;
  public:
  void clear_start_time();
  private:
  int64_t _internal_start_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_start_time() const;
  void _internal_add_start_time(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_start_time();
  public:
  int64_t start_time(int index) const;
  void set_start_time(int index, int64_t value);
  void add_start_time(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      start_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_start_time();

  // repeated int64 end_time = 3;
  int end_time_size() const;
  private:
  int _internal_end_time_size() const;
  public:
  void clear_end_time();
  private:
  int64_t _internal_end_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_end_time() const;
  void _internal_add_end_time(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_end_time();
  public:
  int64_t end_time(int index) const;
  void set_end_time(int index, int64_t value);
  void add_end_time(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      end_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_end_time();

  // string demon_id = 1;
  void clear_demon_id();
  const std::string& demon_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_demon_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_demon_id();
  PROTOBUF_NODISCARD std::string* release_demon_id();
  void set_allocated_demon_id(std::string* demon_id);
  private:
  const std::string& _internal_demon_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_demon_id(const std::string& value);
  std::string* _internal_mutable_demon_id();
  public:

  // int64 failures = 4;
  void clear_failures();
  int64_t failures() const;
  void set_failures(int64_t value);
  private:
  int64_t _internal_failures() const;
  void _internal_set_failures(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.DemonRuns)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > start_time_;
    mutable std::atomic<int> _start_time_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > end_time_;
    mutable std::atomic<int> _end_time_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr demon_id_;
    int64_t failures_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto;
};
// -------------------------------------------------------------------

class ConstraintRuns final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.ConstraintRuns) */ {
 public:
  inline ConstraintRuns() : ConstraintRuns(nullptr) {}
  ~ConstraintRuns() override;
  explicit PROTOBUF_CONSTEXPR ConstraintRuns(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConstraintRuns(const ConstraintRuns& from);
  ConstraintRuns(ConstraintRuns&& from) noexcept
    : ConstraintRuns() {
    *this = ::std::move(from);
  }

  inline ConstraintRuns& operator=(const ConstraintRuns& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConstraintRuns& operator=(ConstraintRuns&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConstraintRuns& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConstraintRuns* internal_default_instance() {
    return reinterpret_cast<const ConstraintRuns*>(
               &_ConstraintRuns_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConstraintRuns& a, ConstraintRuns& b) {
    a.Swap(&b);
  }
  inline void Swap(ConstraintRuns* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConstraintRuns* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConstraintRuns* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConstraintRuns>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConstraintRuns& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConstraintRuns& from) {
    ConstraintRuns::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConstraintRuns* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.ConstraintRuns";
  }
  protected:
  explicit ConstraintRuns(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitialPropagationStartTimeFieldNumber = 2,
    kInitialPropagationEndTimeFieldNumber = 3,
    kDemonsFieldNumber = 5,
    kConstraintIdFieldNumber = 1,
    kFailuresFieldNumber = 4,
  };
  // repeated int64 initial_propagation_start_time = 2;
  int initial_propagation_start_time_size() const;
  private:
  int _internal_initial_propagation_start_time_size() const;
  public:
  void clear_initial_propagation_start_time();
  private:
  int64_t _internal_initial_propagation_start_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_initial_propagation_start_time() const;
  void _internal_add_initial_propagation_start_time(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_initial_propagation_start_time();
  public:
  int64_t initial_propagation_start_time(int index) const;
  void set_initial_propagation_start_time(int index, int64_t value);
  void add_initial_propagation_start_time(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      initial_propagation_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_initial_propagation_start_time();

  // repeated int64 initial_propagation_end_time = 3;
  int initial_propagation_end_time_size() const;
  private:
  int _internal_initial_propagation_end_time_size() const;
  public:
  void clear_initial_propagation_end_time();
  private:
  int64_t _internal_initial_propagation_end_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_initial_propagation_end_time() const;
  void _internal_add_initial_propagation_end_time(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_initial_propagation_end_time();
  public:
  int64_t initial_propagation_end_time(int index) const;
  void set_initial_propagation_end_time(int index, int64_t value);
  void add_initial_propagation_end_time(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      initial_propagation_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_initial_propagation_end_time();

  // repeated .operations_research.DemonRuns demons = 5;
  int demons_size() const;
  private:
  int _internal_demons_size() const;
  public:
  void clear_demons();
  ::operations_research::DemonRuns* mutable_demons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::DemonRuns >*
      mutable_demons();
  private:
  const ::operations_research::DemonRuns& _internal_demons(int index) const;
  ::operations_research::DemonRuns* _internal_add_demons();
  public:
  const ::operations_research::DemonRuns& demons(int index) const;
  ::operations_research::DemonRuns* add_demons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::DemonRuns >&
      demons() const;

  // string constraint_id = 1;
  void clear_constraint_id();
  const std::string& constraint_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_constraint_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_constraint_id();
  PROTOBUF_NODISCARD std::string* release_constraint_id();
  void set_allocated_constraint_id(std::string* constraint_id);
  private:
  const std::string& _internal_constraint_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_constraint_id(const std::string& value);
  std::string* _internal_mutable_constraint_id();
  public:

  // int64 failures = 4;
  void clear_failures();
  int64_t failures() const;
  void set_failures(int64_t value);
  private:
  int64_t _internal_failures() const;
  void _internal_set_failures(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.ConstraintRuns)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > initial_propagation_start_time_;
    mutable std::atomic<int> _initial_propagation_start_time_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > initial_propagation_end_time_;
    mutable std::atomic<int> _initial_propagation_end_time_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::DemonRuns > demons_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr constraint_id_;
    int64_t failures_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DemonRuns

// string demon_id = 1;
inline void DemonRuns::clear_demon_id() {
  _impl_.demon_id_.ClearToEmpty();
}
inline const std::string& DemonRuns::demon_id() const {
  // @@protoc_insertion_point(field_get:operations_research.DemonRuns.demon_id)
  return _internal_demon_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DemonRuns::set_demon_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.demon_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:operations_research.DemonRuns.demon_id)
}
inline std::string* DemonRuns::mutable_demon_id() {
  std::string* _s = _internal_mutable_demon_id();
  // @@protoc_insertion_point(field_mutable:operations_research.DemonRuns.demon_id)
  return _s;
}
inline const std::string& DemonRuns::_internal_demon_id() const {
  return _impl_.demon_id_.Get();
}
inline void DemonRuns::_internal_set_demon_id(const std::string& value) {
  
  _impl_.demon_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DemonRuns::_internal_mutable_demon_id() {
  
  return _impl_.demon_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DemonRuns::release_demon_id() {
  // @@protoc_insertion_point(field_release:operations_research.DemonRuns.demon_id)
  return _impl_.demon_id_.Release();
}
inline void DemonRuns::set_allocated_demon_id(std::string* demon_id) {
  if (demon_id != nullptr) {
    
  } else {
    
  }
  _impl_.demon_id_.SetAllocated(demon_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.demon_id_.IsDefault()) {
    _impl_.demon_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.DemonRuns.demon_id)
}

// repeated int64 start_time = 2;
inline int DemonRuns::_internal_start_time_size() const {
  return _impl_.start_time_.size();
}
inline int DemonRuns::start_time_size() const {
  return _internal_start_time_size();
}
inline void DemonRuns::clear_start_time() {
  _impl_.start_time_.Clear();
}
inline int64_t DemonRuns::_internal_start_time(int index) const {
  return _impl_.start_time_.Get(index);
}
inline int64_t DemonRuns::start_time(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.DemonRuns.start_time)
  return _internal_start_time(index);
}
inline void DemonRuns::set_start_time(int index, int64_t value) {
  _impl_.start_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.DemonRuns.start_time)
}
inline void DemonRuns::_internal_add_start_time(int64_t value) {
  _impl_.start_time_.Add(value);
}
inline void DemonRuns::add_start_time(int64_t value) {
  _internal_add_start_time(value);
  // @@protoc_insertion_point(field_add:operations_research.DemonRuns.start_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
DemonRuns::_internal_start_time() const {
  return _impl_.start_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
DemonRuns::start_time() const {
  // @@protoc_insertion_point(field_list:operations_research.DemonRuns.start_time)
  return _internal_start_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
DemonRuns::_internal_mutable_start_time() {
  return &_impl_.start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
DemonRuns::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.DemonRuns.start_time)
  return _internal_mutable_start_time();
}

// repeated int64 end_time = 3;
inline int DemonRuns::_internal_end_time_size() const {
  return _impl_.end_time_.size();
}
inline int DemonRuns::end_time_size() const {
  return _internal_end_time_size();
}
inline void DemonRuns::clear_end_time() {
  _impl_.end_time_.Clear();
}
inline int64_t DemonRuns::_internal_end_time(int index) const {
  return _impl_.end_time_.Get(index);
}
inline int64_t DemonRuns::end_time(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.DemonRuns.end_time)
  return _internal_end_time(index);
}
inline void DemonRuns::set_end_time(int index, int64_t value) {
  _impl_.end_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.DemonRuns.end_time)
}
inline void DemonRuns::_internal_add_end_time(int64_t value) {
  _impl_.end_time_.Add(value);
}
inline void DemonRuns::add_end_time(int64_t value) {
  _internal_add_end_time(value);
  // @@protoc_insertion_point(field_add:operations_research.DemonRuns.end_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
DemonRuns::_internal_end_time() const {
  return _impl_.end_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
DemonRuns::end_time() const {
  // @@protoc_insertion_point(field_list:operations_research.DemonRuns.end_time)
  return _internal_end_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
DemonRuns::_internal_mutable_end_time() {
  return &_impl_.end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
DemonRuns::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.DemonRuns.end_time)
  return _internal_mutable_end_time();
}

// int64 failures = 4;
inline void DemonRuns::clear_failures() {
  _impl_.failures_ = int64_t{0};
}
inline int64_t DemonRuns::_internal_failures() const {
  return _impl_.failures_;
}
inline int64_t DemonRuns::failures() const {
  // @@protoc_insertion_point(field_get:operations_research.DemonRuns.failures)
  return _internal_failures();
}
inline void DemonRuns::_internal_set_failures(int64_t value) {
  
  _impl_.failures_ = value;
}
inline void DemonRuns::set_failures(int64_t value) {
  _internal_set_failures(value);
  // @@protoc_insertion_point(field_set:operations_research.DemonRuns.failures)
}

// -------------------------------------------------------------------

// ConstraintRuns

// string constraint_id = 1;
inline void ConstraintRuns::clear_constraint_id() {
  _impl_.constraint_id_.ClearToEmpty();
}
inline const std::string& ConstraintRuns::constraint_id() const {
  // @@protoc_insertion_point(field_get:operations_research.ConstraintRuns.constraint_id)
  return _internal_constraint_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConstraintRuns::set_constraint_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.constraint_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:operations_research.ConstraintRuns.constraint_id)
}
inline std::string* ConstraintRuns::mutable_constraint_id() {
  std::string* _s = _internal_mutable_constraint_id();
  // @@protoc_insertion_point(field_mutable:operations_research.ConstraintRuns.constraint_id)
  return _s;
}
inline const std::string& ConstraintRuns::_internal_constraint_id() const {
  return _impl_.constraint_id_.Get();
}
inline void ConstraintRuns::_internal_set_constraint_id(const std::string& value) {
  
  _impl_.constraint_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ConstraintRuns::_internal_mutable_constraint_id() {
  
  return _impl_.constraint_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ConstraintRuns::release_constraint_id() {
  // @@protoc_insertion_point(field_release:operations_research.ConstraintRuns.constraint_id)
  return _impl_.constraint_id_.Release();
}
inline void ConstraintRuns::set_allocated_constraint_id(std::string* constraint_id) {
  if (constraint_id != nullptr) {
    
  } else {
    
  }
  _impl_.constraint_id_.SetAllocated(constraint_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.constraint_id_.IsDefault()) {
    _impl_.constraint_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.ConstraintRuns.constraint_id)
}

// repeated int64 initial_propagation_start_time = 2;
inline int ConstraintRuns::_internal_initial_propagation_start_time_size() const {
  return _impl_.initial_propagation_start_time_.size();
}
inline int ConstraintRuns::initial_propagation_start_time_size() const {
  return _internal_initial_propagation_start_time_size();
}
inline void ConstraintRuns::clear_initial_propagation_start_time() {
  _impl_.initial_propagation_start_time_.Clear();
}
inline int64_t ConstraintRuns::_internal_initial_propagation_start_time(int index) const {
  return _impl_.initial_propagation_start_time_.Get(index);
}
inline int64_t ConstraintRuns::initial_propagation_start_time(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.ConstraintRuns.initial_propagation_start_time)
  return _internal_initial_propagation_start_time(index);
}
inline void ConstraintRuns::set_initial_propagation_start_time(int index, int64_t value) {
  _impl_.initial_propagation_start_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.ConstraintRuns.initial_propagation_start_time)
}
inline void ConstraintRuns::_internal_add_initial_propagation_start_time(int64_t value) {
  _impl_.initial_propagation_start_time_.Add(value);
}
inline void ConstraintRuns::add_initial_propagation_start_time(int64_t value) {
  _internal_add_initial_propagation_start_time(value);
  // @@protoc_insertion_point(field_add:operations_research.ConstraintRuns.initial_propagation_start_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ConstraintRuns::_internal_initial_propagation_start_time() const {
  return _impl_.initial_propagation_start_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ConstraintRuns::initial_propagation_start_time() const {
  // @@protoc_insertion_point(field_list:operations_research.ConstraintRuns.initial_propagation_start_time)
  return _internal_initial_propagation_start_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ConstraintRuns::_internal_mutable_initial_propagation_start_time() {
  return &_impl_.initial_propagation_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ConstraintRuns::mutable_initial_propagation_start_time() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.ConstraintRuns.initial_propagation_start_time)
  return _internal_mutable_initial_propagation_start_time();
}

// repeated int64 initial_propagation_end_time = 3;
inline int ConstraintRuns::_internal_initial_propagation_end_time_size() const {
  return _impl_.initial_propagation_end_time_.size();
}
inline int ConstraintRuns::initial_propagation_end_time_size() const {
  return _internal_initial_propagation_end_time_size();
}
inline void ConstraintRuns::clear_initial_propagation_end_time() {
  _impl_.initial_propagation_end_time_.Clear();
}
inline int64_t ConstraintRuns::_internal_initial_propagation_end_time(int index) const {
  return _impl_.initial_propagation_end_time_.Get(index);
}
inline int64_t ConstraintRuns::initial_propagation_end_time(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.ConstraintRuns.initial_propagation_end_time)
  return _internal_initial_propagation_end_time(index);
}
inline void ConstraintRuns::set_initial_propagation_end_time(int index, int64_t value) {
  _impl_.initial_propagation_end_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.ConstraintRuns.initial_propagation_end_time)
}
inline void ConstraintRuns::_internal_add_initial_propagation_end_time(int64_t value) {
  _impl_.initial_propagation_end_time_.Add(value);
}
inline void ConstraintRuns::add_initial_propagation_end_time(int64_t value) {
  _internal_add_initial_propagation_end_time(value);
  // @@protoc_insertion_point(field_add:operations_research.ConstraintRuns.initial_propagation_end_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ConstraintRuns::_internal_initial_propagation_end_time() const {
  return _impl_.initial_propagation_end_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ConstraintRuns::initial_propagation_end_time() const {
  // @@protoc_insertion_point(field_list:operations_research.ConstraintRuns.initial_propagation_end_time)
  return _internal_initial_propagation_end_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ConstraintRuns::_internal_mutable_initial_propagation_end_time() {
  return &_impl_.initial_propagation_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ConstraintRuns::mutable_initial_propagation_end_time() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.ConstraintRuns.initial_propagation_end_time)
  return _internal_mutable_initial_propagation_end_time();
}

// int64 failures = 4;
inline void ConstraintRuns::clear_failures() {
  _impl_.failures_ = int64_t{0};
}
inline int64_t ConstraintRuns::_internal_failures() const {
  return _impl_.failures_;
}
inline int64_t ConstraintRuns::failures() const {
  // @@protoc_insertion_point(field_get:operations_research.ConstraintRuns.failures)
  return _internal_failures();
}
inline void ConstraintRuns::_internal_set_failures(int64_t value) {
  
  _impl_.failures_ = value;
}
inline void ConstraintRuns::set_failures(int64_t value) {
  _internal_set_failures(value);
  // @@protoc_insertion_point(field_set:operations_research.ConstraintRuns.failures)
}

// repeated .operations_research.DemonRuns demons = 5;
inline int ConstraintRuns::_internal_demons_size() const {
  return _impl_.demons_.size();
}
inline int ConstraintRuns::demons_size() const {
  return _internal_demons_size();
}
inline void ConstraintRuns::clear_demons() {
  _impl_.demons_.Clear();
}
inline ::operations_research::DemonRuns* ConstraintRuns::mutable_demons(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.ConstraintRuns.demons)
  return _impl_.demons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::DemonRuns >*
ConstraintRuns::mutable_demons() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.ConstraintRuns.demons)
  return &_impl_.demons_;
}
inline const ::operations_research::DemonRuns& ConstraintRuns::_internal_demons(int index) const {
  return _impl_.demons_.Get(index);
}
inline const ::operations_research::DemonRuns& ConstraintRuns::demons(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.ConstraintRuns.demons)
  return _internal_demons(index);
}
inline ::operations_research::DemonRuns* ConstraintRuns::_internal_add_demons() {
  return _impl_.demons_.Add();
}
inline ::operations_research::DemonRuns* ConstraintRuns::add_demons() {
  ::operations_research::DemonRuns* _add = _internal_add_demons();
  // @@protoc_insertion_point(field_add:operations_research.ConstraintRuns.demons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::DemonRuns >&
ConstraintRuns::demons() const {
  // @@protoc_insertion_point(field_list:operations_research.ConstraintRuns.demons)
  return _impl_.demons_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace operations_research

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto
