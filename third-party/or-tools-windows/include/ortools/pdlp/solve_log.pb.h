// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/pdlp/solve_log.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fpdlp_2fsolve_5flog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fpdlp_2fsolve_5flog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ortools/pdlp/solvers.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ortools_2fpdlp_2fsolve_5flog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fpdlp_2fsolve_5flog_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto;
namespace operations_research {
namespace pdlp {
class ConvergenceInformation;
struct ConvergenceInformationDefaultTypeInternal;
extern ConvergenceInformationDefaultTypeInternal _ConvergenceInformation_default_instance_;
class InfeasibilityInformation;
struct InfeasibilityInformationDefaultTypeInternal;
extern InfeasibilityInformationDefaultTypeInternal _InfeasibilityInformation_default_instance_;
class IterationStats;
struct IterationStatsDefaultTypeInternal;
extern IterationStatsDefaultTypeInternal _IterationStats_default_instance_;
class PointMetadata;
struct PointMetadataDefaultTypeInternal;
extern PointMetadataDefaultTypeInternal _PointMetadata_default_instance_;
class QuadraticProgramStats;
struct QuadraticProgramStatsDefaultTypeInternal;
extern QuadraticProgramStatsDefaultTypeInternal _QuadraticProgramStats_default_instance_;
class SolveLog;
struct SolveLogDefaultTypeInternal;
extern SolveLogDefaultTypeInternal _SolveLog_default_instance_;
}  // namespace pdlp
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> ::operations_research::pdlp::ConvergenceInformation* Arena::CreateMaybeMessage<::operations_research::pdlp::ConvergenceInformation>(Arena*);
template<> ::operations_research::pdlp::InfeasibilityInformation* Arena::CreateMaybeMessage<::operations_research::pdlp::InfeasibilityInformation>(Arena*);
template<> ::operations_research::pdlp::IterationStats* Arena::CreateMaybeMessage<::operations_research::pdlp::IterationStats>(Arena*);
template<> ::operations_research::pdlp::PointMetadata* Arena::CreateMaybeMessage<::operations_research::pdlp::PointMetadata>(Arena*);
template<> ::operations_research::pdlp::QuadraticProgramStats* Arena::CreateMaybeMessage<::operations_research::pdlp::QuadraticProgramStats>(Arena*);
template<> ::operations_research::pdlp::SolveLog* Arena::CreateMaybeMessage<::operations_research::pdlp::SolveLog>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace operations_research {
namespace pdlp {

enum RestartChoice : int {
  RESTART_CHOICE_UNSPECIFIED = 0,
  RESTART_CHOICE_NO_RESTART = 1,
  RESTART_CHOICE_WEIGHTED_AVERAGE_RESET = 2,
  RESTART_CHOICE_RESTART_TO_AVERAGE = 3
};
bool RestartChoice_IsValid(int value);
constexpr RestartChoice RestartChoice_MIN = RESTART_CHOICE_UNSPECIFIED;
constexpr RestartChoice RestartChoice_MAX = RESTART_CHOICE_RESTART_TO_AVERAGE;
constexpr int RestartChoice_ARRAYSIZE = RestartChoice_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RestartChoice_descriptor();
template<typename T>
inline const std::string& RestartChoice_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RestartChoice>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RestartChoice_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RestartChoice_descriptor(), enum_t_value);
}
inline bool RestartChoice_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RestartChoice* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RestartChoice>(
    RestartChoice_descriptor(), name, value);
}
enum PointType : int {
  POINT_TYPE_UNSPECIFIED = 0,
  POINT_TYPE_CURRENT_ITERATE = 1,
  POINT_TYPE_ITERATE_DIFFERENCE = 2,
  POINT_TYPE_AVERAGE_ITERATE = 3,
  POINT_TYPE_NONE = 4,
  POINT_TYPE_PRESOLVER_SOLUTION = 5
};
bool PointType_IsValid(int value);
constexpr PointType PointType_MIN = POINT_TYPE_UNSPECIFIED;
constexpr PointType PointType_MAX = POINT_TYPE_PRESOLVER_SOLUTION;
constexpr int PointType_ARRAYSIZE = PointType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PointType_descriptor();
template<typename T>
inline const std::string& PointType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PointType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PointType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PointType_descriptor(), enum_t_value);
}
inline bool PointType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PointType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PointType>(
    PointType_descriptor(), name, value);
}
enum TerminationReason : int {
  TERMINATION_REASON_UNSPECIFIED = 0,
  TERMINATION_REASON_OPTIMAL = 1,
  TERMINATION_REASON_PRIMAL_INFEASIBLE = 2,
  TERMINATION_REASON_DUAL_INFEASIBLE = 3,
  TERMINATION_REASON_TIME_LIMIT = 4,
  TERMINATION_REASON_ITERATION_LIMIT = 5,
  TERMINATION_REASON_KKT_MATRIX_PASS_LIMIT = 8,
  TERMINATION_REASON_INTERRUPTED_BY_USER = 12,
  TERMINATION_REASON_NUMERICAL_ERROR = 6,
  TERMINATION_REASON_INVALID_PROBLEM = 9,
  TERMINATION_REASON_INVALID_INITIAL_SOLUTION = 13,
  TERMINATION_REASON_INVALID_PARAMETER = 10,
  TERMINATION_REASON_OTHER = 7,
  TERMINATION_REASON_PRIMAL_OR_DUAL_INFEASIBLE = 11
};
bool TerminationReason_IsValid(int value);
constexpr TerminationReason TerminationReason_MIN = TERMINATION_REASON_UNSPECIFIED;
constexpr TerminationReason TerminationReason_MAX = TERMINATION_REASON_INVALID_INITIAL_SOLUTION;
constexpr int TerminationReason_ARRAYSIZE = TerminationReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TerminationReason_descriptor();
template<typename T>
inline const std::string& TerminationReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TerminationReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TerminationReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TerminationReason_descriptor(), enum_t_value);
}
inline bool TerminationReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TerminationReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TerminationReason>(
    TerminationReason_descriptor(), name, value);
}
// ===================================================================

class QuadraticProgramStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.pdlp.QuadraticProgramStats) */ {
 public:
  inline QuadraticProgramStats() : QuadraticProgramStats(nullptr) {}
  ~QuadraticProgramStats() override;
  explicit PROTOBUF_CONSTEXPR QuadraticProgramStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuadraticProgramStats(const QuadraticProgramStats& from);
  QuadraticProgramStats(QuadraticProgramStats&& from) noexcept
    : QuadraticProgramStats() {
    *this = ::std::move(from);
  }

  inline QuadraticProgramStats& operator=(const QuadraticProgramStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuadraticProgramStats& operator=(QuadraticProgramStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuadraticProgramStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuadraticProgramStats* internal_default_instance() {
    return reinterpret_cast<const QuadraticProgramStats*>(
               &_QuadraticProgramStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QuadraticProgramStats& a, QuadraticProgramStats& b) {
    a.Swap(&b);
  }
  inline void Swap(QuadraticProgramStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuadraticProgramStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuadraticProgramStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuadraticProgramStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuadraticProgramStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuadraticProgramStats& from) {
    QuadraticProgramStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuadraticProgramStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.pdlp.QuadraticProgramStats";
  }
  protected:
  explicit QuadraticProgramStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumVariablesFieldNumber = 1,
    kNumConstraintsFieldNumber = 2,
    kConstraintMatrixColMinLInfNormFieldNumber = 3,
    kConstraintMatrixRowMinLInfNormFieldNumber = 4,
    kConstraintMatrixNumNonzerosFieldNumber = 5,
    kConstraintMatrixAbsMaxFieldNumber = 6,
    kConstraintMatrixAbsMinFieldNumber = 7,
    kConstraintMatrixAbsAvgFieldNumber = 8,
    kCombinedBoundsMaxFieldNumber = 9,
    kCombinedBoundsMinFieldNumber = 10,
    kCombinedBoundsAvgFieldNumber = 11,
    kVariableBoundGapsNumFiniteFieldNumber = 12,
    kVariableBoundGapsMaxFieldNumber = 13,
    kVariableBoundGapsMinFieldNumber = 14,
    kVariableBoundGapsAvgFieldNumber = 15,
    kObjectiveVectorAbsMaxFieldNumber = 16,
    kObjectiveVectorAbsMinFieldNumber = 17,
    kObjectiveVectorAbsAvgFieldNumber = 18,
    kObjectiveMatrixNumNonzerosFieldNumber = 19,
    kObjectiveMatrixAbsMaxFieldNumber = 20,
    kObjectiveMatrixAbsMinFieldNumber = 21,
    kObjectiveMatrixAbsAvgFieldNumber = 22,
    kObjectiveVectorL2NormFieldNumber = 23,
    kCombinedBoundsL2NormFieldNumber = 24,
    kConstraintMatrixL2NormFieldNumber = 25,
    kVariableBoundGapsL2NormFieldNumber = 26,
    kObjectiveMatrixL2NormFieldNumber = 27,
  };
  // optional int64 num_variables = 1;
  bool has_num_variables() const;
  private:
  bool _internal_has_num_variables() const;
  public:
  void clear_num_variables();
  int64_t num_variables() const;
  void set_num_variables(int64_t value);
  private:
  int64_t _internal_num_variables() const;
  void _internal_set_num_variables(int64_t value);
  public:

  // optional int64 num_constraints = 2;
  bool has_num_constraints() const;
  private:
  bool _internal_has_num_constraints() const;
  public:
  void clear_num_constraints();
  int64_t num_constraints() const;
  void set_num_constraints(int64_t value);
  private:
  int64_t _internal_num_constraints() const;
  void _internal_set_num_constraints(int64_t value);
  public:

  // optional double constraint_matrix_col_min_l_inf_norm = 3;
  bool has_constraint_matrix_col_min_l_inf_norm() const;
  private:
  bool _internal_has_constraint_matrix_col_min_l_inf_norm() const;
  public:
  void clear_constraint_matrix_col_min_l_inf_norm();
  double constraint_matrix_col_min_l_inf_norm() const;
  void set_constraint_matrix_col_min_l_inf_norm(double value);
  private:
  double _internal_constraint_matrix_col_min_l_inf_norm() const;
  void _internal_set_constraint_matrix_col_min_l_inf_norm(double value);
  public:

  // optional double constraint_matrix_row_min_l_inf_norm = 4;
  bool has_constraint_matrix_row_min_l_inf_norm() const;
  private:
  bool _internal_has_constraint_matrix_row_min_l_inf_norm() const;
  public:
  void clear_constraint_matrix_row_min_l_inf_norm();
  double constraint_matrix_row_min_l_inf_norm() const;
  void set_constraint_matrix_row_min_l_inf_norm(double value);
  private:
  double _internal_constraint_matrix_row_min_l_inf_norm() const;
  void _internal_set_constraint_matrix_row_min_l_inf_norm(double value);
  public:

  // optional int64 constraint_matrix_num_nonzeros = 5;
  bool has_constraint_matrix_num_nonzeros() const;
  private:
  bool _internal_has_constraint_matrix_num_nonzeros() const;
  public:
  void clear_constraint_matrix_num_nonzeros();
  int64_t constraint_matrix_num_nonzeros() const;
  void set_constraint_matrix_num_nonzeros(int64_t value);
  private:
  int64_t _internal_constraint_matrix_num_nonzeros() const;
  void _internal_set_constraint_matrix_num_nonzeros(int64_t value);
  public:

  // optional double constraint_matrix_abs_max = 6;
  bool has_constraint_matrix_abs_max() const;
  private:
  bool _internal_has_constraint_matrix_abs_max() const;
  public:
  void clear_constraint_matrix_abs_max();
  double constraint_matrix_abs_max() const;
  void set_constraint_matrix_abs_max(double value);
  private:
  double _internal_constraint_matrix_abs_max() const;
  void _internal_set_constraint_matrix_abs_max(double value);
  public:

  // optional double constraint_matrix_abs_min = 7;
  bool has_constraint_matrix_abs_min() const;
  private:
  bool _internal_has_constraint_matrix_abs_min() const;
  public:
  void clear_constraint_matrix_abs_min();
  double constraint_matrix_abs_min() const;
  void set_constraint_matrix_abs_min(double value);
  private:
  double _internal_constraint_matrix_abs_min() const;
  void _internal_set_constraint_matrix_abs_min(double value);
  public:

  // optional double constraint_matrix_abs_avg = 8;
  bool has_constraint_matrix_abs_avg() const;
  private:
  bool _internal_has_constraint_matrix_abs_avg() const;
  public:
  void clear_constraint_matrix_abs_avg();
  double constraint_matrix_abs_avg() const;
  void set_constraint_matrix_abs_avg(double value);
  private:
  double _internal_constraint_matrix_abs_avg() const;
  void _internal_set_constraint_matrix_abs_avg(double value);
  public:

  // optional double combined_bounds_max = 9;
  bool has_combined_bounds_max() const;
  private:
  bool _internal_has_combined_bounds_max() const;
  public:
  void clear_combined_bounds_max();
  double combined_bounds_max() const;
  void set_combined_bounds_max(double value);
  private:
  double _internal_combined_bounds_max() const;
  void _internal_set_combined_bounds_max(double value);
  public:

  // optional double combined_bounds_min = 10;
  bool has_combined_bounds_min() const;
  private:
  bool _internal_has_combined_bounds_min() const;
  public:
  void clear_combined_bounds_min();
  double combined_bounds_min() const;
  void set_combined_bounds_min(double value);
  private:
  double _internal_combined_bounds_min() const;
  void _internal_set_combined_bounds_min(double value);
  public:

  // optional double combined_bounds_avg = 11;
  bool has_combined_bounds_avg() const;
  private:
  bool _internal_has_combined_bounds_avg() const;
  public:
  void clear_combined_bounds_avg();
  double combined_bounds_avg() const;
  void set_combined_bounds_avg(double value);
  private:
  double _internal_combined_bounds_avg() const;
  void _internal_set_combined_bounds_avg(double value);
  public:

  // optional int64 variable_bound_gaps_num_finite = 12;
  bool has_variable_bound_gaps_num_finite() const;
  private:
  bool _internal_has_variable_bound_gaps_num_finite() const;
  public:
  void clear_variable_bound_gaps_num_finite();
  int64_t variable_bound_gaps_num_finite() const;
  void set_variable_bound_gaps_num_finite(int64_t value);
  private:
  int64_t _internal_variable_bound_gaps_num_finite() const;
  void _internal_set_variable_bound_gaps_num_finite(int64_t value);
  public:

  // optional double variable_bound_gaps_max = 13;
  bool has_variable_bound_gaps_max() const;
  private:
  bool _internal_has_variable_bound_gaps_max() const;
  public:
  void clear_variable_bound_gaps_max();
  double variable_bound_gaps_max() const;
  void set_variable_bound_gaps_max(double value);
  private:
  double _internal_variable_bound_gaps_max() const;
  void _internal_set_variable_bound_gaps_max(double value);
  public:

  // optional double variable_bound_gaps_min = 14;
  bool has_variable_bound_gaps_min() const;
  private:
  bool _internal_has_variable_bound_gaps_min() const;
  public:
  void clear_variable_bound_gaps_min();
  double variable_bound_gaps_min() const;
  void set_variable_bound_gaps_min(double value);
  private:
  double _internal_variable_bound_gaps_min() const;
  void _internal_set_variable_bound_gaps_min(double value);
  public:

  // optional double variable_bound_gaps_avg = 15;
  bool has_variable_bound_gaps_avg() const;
  private:
  bool _internal_has_variable_bound_gaps_avg() const;
  public:
  void clear_variable_bound_gaps_avg();
  double variable_bound_gaps_avg() const;
  void set_variable_bound_gaps_avg(double value);
  private:
  double _internal_variable_bound_gaps_avg() const;
  void _internal_set_variable_bound_gaps_avg(double value);
  public:

  // optional double objective_vector_abs_max = 16;
  bool has_objective_vector_abs_max() const;
  private:
  bool _internal_has_objective_vector_abs_max() const;
  public:
  void clear_objective_vector_abs_max();
  double objective_vector_abs_max() const;
  void set_objective_vector_abs_max(double value);
  private:
  double _internal_objective_vector_abs_max() const;
  void _internal_set_objective_vector_abs_max(double value);
  public:

  // optional double objective_vector_abs_min = 17;
  bool has_objective_vector_abs_min() const;
  private:
  bool _internal_has_objective_vector_abs_min() const;
  public:
  void clear_objective_vector_abs_min();
  double objective_vector_abs_min() const;
  void set_objective_vector_abs_min(double value);
  private:
  double _internal_objective_vector_abs_min() const;
  void _internal_set_objective_vector_abs_min(double value);
  public:

  // optional double objective_vector_abs_avg = 18;
  bool has_objective_vector_abs_avg() const;
  private:
  bool _internal_has_objective_vector_abs_avg() const;
  public:
  void clear_objective_vector_abs_avg();
  double objective_vector_abs_avg() const;
  void set_objective_vector_abs_avg(double value);
  private:
  double _internal_objective_vector_abs_avg() const;
  void _internal_set_objective_vector_abs_avg(double value);
  public:

  // optional int64 objective_matrix_num_nonzeros = 19;
  bool has_objective_matrix_num_nonzeros() const;
  private:
  bool _internal_has_objective_matrix_num_nonzeros() const;
  public:
  void clear_objective_matrix_num_nonzeros();
  int64_t objective_matrix_num_nonzeros() const;
  void set_objective_matrix_num_nonzeros(int64_t value);
  private:
  int64_t _internal_objective_matrix_num_nonzeros() const;
  void _internal_set_objective_matrix_num_nonzeros(int64_t value);
  public:

  // optional double objective_matrix_abs_max = 20;
  bool has_objective_matrix_abs_max() const;
  private:
  bool _internal_has_objective_matrix_abs_max() const;
  public:
  void clear_objective_matrix_abs_max();
  double objective_matrix_abs_max() const;
  void set_objective_matrix_abs_max(double value);
  private:
  double _internal_objective_matrix_abs_max() const;
  void _internal_set_objective_matrix_abs_max(double value);
  public:

  // optional double objective_matrix_abs_min = 21;
  bool has_objective_matrix_abs_min() const;
  private:
  bool _internal_has_objective_matrix_abs_min() const;
  public:
  void clear_objective_matrix_abs_min();
  double objective_matrix_abs_min() const;
  void set_objective_matrix_abs_min(double value);
  private:
  double _internal_objective_matrix_abs_min() const;
  void _internal_set_objective_matrix_abs_min(double value);
  public:

  // optional double objective_matrix_abs_avg = 22;
  bool has_objective_matrix_abs_avg() const;
  private:
  bool _internal_has_objective_matrix_abs_avg() const;
  public:
  void clear_objective_matrix_abs_avg();
  double objective_matrix_abs_avg() const;
  void set_objective_matrix_abs_avg(double value);
  private:
  double _internal_objective_matrix_abs_avg() const;
  void _internal_set_objective_matrix_abs_avg(double value);
  public:

  // optional double objective_vector_l2_norm = 23;
  bool has_objective_vector_l2_norm() const;
  private:
  bool _internal_has_objective_vector_l2_norm() const;
  public:
  void clear_objective_vector_l2_norm();
  double objective_vector_l2_norm() const;
  void set_objective_vector_l2_norm(double value);
  private:
  double _internal_objective_vector_l2_norm() const;
  void _internal_set_objective_vector_l2_norm(double value);
  public:

  // optional double combined_bounds_l2_norm = 24;
  bool has_combined_bounds_l2_norm() const;
  private:
  bool _internal_has_combined_bounds_l2_norm() const;
  public:
  void clear_combined_bounds_l2_norm();
  double combined_bounds_l2_norm() const;
  void set_combined_bounds_l2_norm(double value);
  private:
  double _internal_combined_bounds_l2_norm() const;
  void _internal_set_combined_bounds_l2_norm(double value);
  public:

  // optional double constraint_matrix_l2_norm = 25;
  bool has_constraint_matrix_l2_norm() const;
  private:
  bool _internal_has_constraint_matrix_l2_norm() const;
  public:
  void clear_constraint_matrix_l2_norm();
  double constraint_matrix_l2_norm() const;
  void set_constraint_matrix_l2_norm(double value);
  private:
  double _internal_constraint_matrix_l2_norm() const;
  void _internal_set_constraint_matrix_l2_norm(double value);
  public:

  // optional double variable_bound_gaps_l2_norm = 26;
  bool has_variable_bound_gaps_l2_norm() const;
  private:
  bool _internal_has_variable_bound_gaps_l2_norm() const;
  public:
  void clear_variable_bound_gaps_l2_norm();
  double variable_bound_gaps_l2_norm() const;
  void set_variable_bound_gaps_l2_norm(double value);
  private:
  double _internal_variable_bound_gaps_l2_norm() const;
  void _internal_set_variable_bound_gaps_l2_norm(double value);
  public:

  // optional double objective_matrix_l2_norm = 27;
  bool has_objective_matrix_l2_norm() const;
  private:
  bool _internal_has_objective_matrix_l2_norm() const;
  public:
  void clear_objective_matrix_l2_norm();
  double objective_matrix_l2_norm() const;
  void set_objective_matrix_l2_norm(double value);
  private:
  double _internal_objective_matrix_l2_norm() const;
  void _internal_set_objective_matrix_l2_norm(double value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.pdlp.QuadraticProgramStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t num_variables_;
    int64_t num_constraints_;
    double constraint_matrix_col_min_l_inf_norm_;
    double constraint_matrix_row_min_l_inf_norm_;
    int64_t constraint_matrix_num_nonzeros_;
    double constraint_matrix_abs_max_;
    double constraint_matrix_abs_min_;
    double constraint_matrix_abs_avg_;
    double combined_bounds_max_;
    double combined_bounds_min_;
    double combined_bounds_avg_;
    int64_t variable_bound_gaps_num_finite_;
    double variable_bound_gaps_max_;
    double variable_bound_gaps_min_;
    double variable_bound_gaps_avg_;
    double objective_vector_abs_max_;
    double objective_vector_abs_min_;
    double objective_vector_abs_avg_;
    int64_t objective_matrix_num_nonzeros_;
    double objective_matrix_abs_max_;
    double objective_matrix_abs_min_;
    double objective_matrix_abs_avg_;
    double objective_vector_l2_norm_;
    double combined_bounds_l2_norm_;
    double constraint_matrix_l2_norm_;
    double variable_bound_gaps_l2_norm_;
    double objective_matrix_l2_norm_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpdlp_2fsolve_5flog_2eproto;
};
// -------------------------------------------------------------------

class ConvergenceInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.pdlp.ConvergenceInformation) */ {
 public:
  inline ConvergenceInformation() : ConvergenceInformation(nullptr) {}
  ~ConvergenceInformation() override;
  explicit PROTOBUF_CONSTEXPR ConvergenceInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConvergenceInformation(const ConvergenceInformation& from);
  ConvergenceInformation(ConvergenceInformation&& from) noexcept
    : ConvergenceInformation() {
    *this = ::std::move(from);
  }

  inline ConvergenceInformation& operator=(const ConvergenceInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConvergenceInformation& operator=(ConvergenceInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConvergenceInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConvergenceInformation* internal_default_instance() {
    return reinterpret_cast<const ConvergenceInformation*>(
               &_ConvergenceInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConvergenceInformation& a, ConvergenceInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(ConvergenceInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConvergenceInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConvergenceInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConvergenceInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConvergenceInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConvergenceInformation& from) {
    ConvergenceInformation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvergenceInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.pdlp.ConvergenceInformation";
  }
  protected:
  explicit ConvergenceInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimalObjectiveFieldNumber = 2,
    kDualObjectiveFieldNumber = 3,
    kCorrectedDualObjectiveFieldNumber = 4,
    kLInfPrimalResidualFieldNumber = 5,
    kL2PrimalResidualFieldNumber = 6,
    kLInfDualResidualFieldNumber = 7,
    kL2DualResidualFieldNumber = 8,
    kLInfPrimalVariableFieldNumber = 14,
    kL2PrimalVariableFieldNumber = 15,
    kLInfDualVariableFieldNumber = 16,
    kL2DualVariableFieldNumber = 17,
    kLInfComponentwisePrimalResidualFieldNumber = 24,
    kLInfComponentwiseDualResidualFieldNumber = 25,
    kCandidateTypeFieldNumber = 1,
  };
  // optional double primal_objective = 2;
  bool has_primal_objective() const;
  private:
  bool _internal_has_primal_objective() const;
  public:
  void clear_primal_objective();
  double primal_objective() const;
  void set_primal_objective(double value);
  private:
  double _internal_primal_objective() const;
  void _internal_set_primal_objective(double value);
  public:

  // optional double dual_objective = 3;
  bool has_dual_objective() const;
  private:
  bool _internal_has_dual_objective() const;
  public:
  void clear_dual_objective();
  double dual_objective() const;
  void set_dual_objective(double value);
  private:
  double _internal_dual_objective() const;
  void _internal_set_dual_objective(double value);
  public:

  // optional double corrected_dual_objective = 4;
  bool has_corrected_dual_objective() const;
  private:
  bool _internal_has_corrected_dual_objective() const;
  public:
  void clear_corrected_dual_objective();
  double corrected_dual_objective() const;
  void set_corrected_dual_objective(double value);
  private:
  double _internal_corrected_dual_objective() const;
  void _internal_set_corrected_dual_objective(double value);
  public:

  // optional double l_inf_primal_residual = 5;
  bool has_l_inf_primal_residual() const;
  private:
  bool _internal_has_l_inf_primal_residual() const;
  public:
  void clear_l_inf_primal_residual();
  double l_inf_primal_residual() const;
  void set_l_inf_primal_residual(double value);
  private:
  double _internal_l_inf_primal_residual() const;
  void _internal_set_l_inf_primal_residual(double value);
  public:

  // optional double l2_primal_residual = 6;
  bool has_l2_primal_residual() const;
  private:
  bool _internal_has_l2_primal_residual() const;
  public:
  void clear_l2_primal_residual();
  double l2_primal_residual() const;
  void set_l2_primal_residual(double value);
  private:
  double _internal_l2_primal_residual() const;
  void _internal_set_l2_primal_residual(double value);
  public:

  // optional double l_inf_dual_residual = 7;
  bool has_l_inf_dual_residual() const;
  private:
  bool _internal_has_l_inf_dual_residual() const;
  public:
  void clear_l_inf_dual_residual();
  double l_inf_dual_residual() const;
  void set_l_inf_dual_residual(double value);
  private:
  double _internal_l_inf_dual_residual() const;
  void _internal_set_l_inf_dual_residual(double value);
  public:

  // optional double l2_dual_residual = 8;
  bool has_l2_dual_residual() const;
  private:
  bool _internal_has_l2_dual_residual() const;
  public:
  void clear_l2_dual_residual();
  double l2_dual_residual() const;
  void set_l2_dual_residual(double value);
  private:
  double _internal_l2_dual_residual() const;
  void _internal_set_l2_dual_residual(double value);
  public:

  // optional double l_inf_primal_variable = 14;
  bool has_l_inf_primal_variable() const;
  private:
  bool _internal_has_l_inf_primal_variable() const;
  public:
  void clear_l_inf_primal_variable();
  double l_inf_primal_variable() const;
  void set_l_inf_primal_variable(double value);
  private:
  double _internal_l_inf_primal_variable() const;
  void _internal_set_l_inf_primal_variable(double value);
  public:

  // optional double l2_primal_variable = 15;
  bool has_l2_primal_variable() const;
  private:
  bool _internal_has_l2_primal_variable() const;
  public:
  void clear_l2_primal_variable();
  double l2_primal_variable() const;
  void set_l2_primal_variable(double value);
  private:
  double _internal_l2_primal_variable() const;
  void _internal_set_l2_primal_variable(double value);
  public:

  // optional double l_inf_dual_variable = 16;
  bool has_l_inf_dual_variable() const;
  private:
  bool _internal_has_l_inf_dual_variable() const;
  public:
  void clear_l_inf_dual_variable();
  double l_inf_dual_variable() const;
  void set_l_inf_dual_variable(double value);
  private:
  double _internal_l_inf_dual_variable() const;
  void _internal_set_l_inf_dual_variable(double value);
  public:

  // optional double l2_dual_variable = 17;
  bool has_l2_dual_variable() const;
  private:
  bool _internal_has_l2_dual_variable() const;
  public:
  void clear_l2_dual_variable();
  double l2_dual_variable() const;
  void set_l2_dual_variable(double value);
  private:
  double _internal_l2_dual_variable() const;
  void _internal_set_l2_dual_variable(double value);
  public:

  // optional double l_inf_componentwise_primal_residual = 24;
  bool has_l_inf_componentwise_primal_residual() const;
  private:
  bool _internal_has_l_inf_componentwise_primal_residual() const;
  public:
  void clear_l_inf_componentwise_primal_residual();
  double l_inf_componentwise_primal_residual() const;
  void set_l_inf_componentwise_primal_residual(double value);
  private:
  double _internal_l_inf_componentwise_primal_residual() const;
  void _internal_set_l_inf_componentwise_primal_residual(double value);
  public:

  // optional double l_inf_componentwise_dual_residual = 25;
  bool has_l_inf_componentwise_dual_residual() const;
  private:
  bool _internal_has_l_inf_componentwise_dual_residual() const;
  public:
  void clear_l_inf_componentwise_dual_residual();
  double l_inf_componentwise_dual_residual() const;
  void set_l_inf_componentwise_dual_residual(double value);
  private:
  double _internal_l_inf_componentwise_dual_residual() const;
  void _internal_set_l_inf_componentwise_dual_residual(double value);
  public:

  // optional .operations_research.pdlp.PointType candidate_type = 1;
  bool has_candidate_type() const;
  private:
  bool _internal_has_candidate_type() const;
  public:
  void clear_candidate_type();
  ::operations_research::pdlp::PointType candidate_type() const;
  void set_candidate_type(::operations_research::pdlp::PointType value);
  private:
  ::operations_research::pdlp::PointType _internal_candidate_type() const;
  void _internal_set_candidate_type(::operations_research::pdlp::PointType value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.pdlp.ConvergenceInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double primal_objective_;
    double dual_objective_;
    double corrected_dual_objective_;
    double l_inf_primal_residual_;
    double l2_primal_residual_;
    double l_inf_dual_residual_;
    double l2_dual_residual_;
    double l_inf_primal_variable_;
    double l2_primal_variable_;
    double l_inf_dual_variable_;
    double l2_dual_variable_;
    double l_inf_componentwise_primal_residual_;
    double l_inf_componentwise_dual_residual_;
    int candidate_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpdlp_2fsolve_5flog_2eproto;
};
// -------------------------------------------------------------------

class InfeasibilityInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.pdlp.InfeasibilityInformation) */ {
 public:
  inline InfeasibilityInformation() : InfeasibilityInformation(nullptr) {}
  ~InfeasibilityInformation() override;
  explicit PROTOBUF_CONSTEXPR InfeasibilityInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfeasibilityInformation(const InfeasibilityInformation& from);
  InfeasibilityInformation(InfeasibilityInformation&& from) noexcept
    : InfeasibilityInformation() {
    *this = ::std::move(from);
  }

  inline InfeasibilityInformation& operator=(const InfeasibilityInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfeasibilityInformation& operator=(InfeasibilityInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfeasibilityInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfeasibilityInformation* internal_default_instance() {
    return reinterpret_cast<const InfeasibilityInformation*>(
               &_InfeasibilityInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InfeasibilityInformation& a, InfeasibilityInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(InfeasibilityInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfeasibilityInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfeasibilityInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InfeasibilityInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InfeasibilityInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InfeasibilityInformation& from) {
    InfeasibilityInformation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfeasibilityInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.pdlp.InfeasibilityInformation";
  }
  protected:
  explicit InfeasibilityInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxPrimalRayInfeasibilityFieldNumber = 1,
    kPrimalRayLinearObjectiveFieldNumber = 2,
    kPrimalRayQuadraticNormFieldNumber = 3,
    kMaxDualRayInfeasibilityFieldNumber = 4,
    kDualRayObjectiveFieldNumber = 5,
    kCandidateTypeFieldNumber = 6,
  };
  // optional double max_primal_ray_infeasibility = 1;
  bool has_max_primal_ray_infeasibility() const;
  private:
  bool _internal_has_max_primal_ray_infeasibility() const;
  public:
  void clear_max_primal_ray_infeasibility();
  double max_primal_ray_infeasibility() const;
  void set_max_primal_ray_infeasibility(double value);
  private:
  double _internal_max_primal_ray_infeasibility() const;
  void _internal_set_max_primal_ray_infeasibility(double value);
  public:

  // optional double primal_ray_linear_objective = 2;
  bool has_primal_ray_linear_objective() const;
  private:
  bool _internal_has_primal_ray_linear_objective() const;
  public:
  void clear_primal_ray_linear_objective();
  double primal_ray_linear_objective() const;
  void set_primal_ray_linear_objective(double value);
  private:
  double _internal_primal_ray_linear_objective() const;
  void _internal_set_primal_ray_linear_objective(double value);
  public:

  // optional double primal_ray_quadratic_norm = 3;
  bool has_primal_ray_quadratic_norm() const;
  private:
  bool _internal_has_primal_ray_quadratic_norm() const;
  public:
  void clear_primal_ray_quadratic_norm();
  double primal_ray_quadratic_norm() const;
  void set_primal_ray_quadratic_norm(double value);
  private:
  double _internal_primal_ray_quadratic_norm() const;
  void _internal_set_primal_ray_quadratic_norm(double value);
  public:

  // optional double max_dual_ray_infeasibility = 4;
  bool has_max_dual_ray_infeasibility() const;
  private:
  bool _internal_has_max_dual_ray_infeasibility() const;
  public:
  void clear_max_dual_ray_infeasibility();
  double max_dual_ray_infeasibility() const;
  void set_max_dual_ray_infeasibility(double value);
  private:
  double _internal_max_dual_ray_infeasibility() const;
  void _internal_set_max_dual_ray_infeasibility(double value);
  public:

  // optional double dual_ray_objective = 5;
  bool has_dual_ray_objective() const;
  private:
  bool _internal_has_dual_ray_objective() const;
  public:
  void clear_dual_ray_objective();
  double dual_ray_objective() const;
  void set_dual_ray_objective(double value);
  private:
  double _internal_dual_ray_objective() const;
  void _internal_set_dual_ray_objective(double value);
  public:

  // optional .operations_research.pdlp.PointType candidate_type = 6;
  bool has_candidate_type() const;
  private:
  bool _internal_has_candidate_type() const;
  public:
  void clear_candidate_type();
  ::operations_research::pdlp::PointType candidate_type() const;
  void set_candidate_type(::operations_research::pdlp::PointType value);
  private:
  ::operations_research::pdlp::PointType _internal_candidate_type() const;
  void _internal_set_candidate_type(::operations_research::pdlp::PointType value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.pdlp.InfeasibilityInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double max_primal_ray_infeasibility_;
    double primal_ray_linear_objective_;
    double primal_ray_quadratic_norm_;
    double max_dual_ray_infeasibility_;
    double dual_ray_objective_;
    int candidate_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpdlp_2fsolve_5flog_2eproto;
};
// -------------------------------------------------------------------

class PointMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.pdlp.PointMetadata) */ {
 public:
  inline PointMetadata() : PointMetadata(nullptr) {}
  ~PointMetadata() override;
  explicit PROTOBUF_CONSTEXPR PointMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointMetadata(const PointMetadata& from);
  PointMetadata(PointMetadata&& from) noexcept
    : PointMetadata() {
    *this = ::std::move(from);
  }

  inline PointMetadata& operator=(const PointMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointMetadata& operator=(PointMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointMetadata* internal_default_instance() {
    return reinterpret_cast<const PointMetadata*>(
               &_PointMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PointMetadata& a, PointMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(PointMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PointMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PointMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PointMetadata& from) {
    PointMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.pdlp.PointMetadata";
  }
  protected:
  explicit PointMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRandomPrimalProjectionsFieldNumber = 2,
    kRandomDualProjectionsFieldNumber = 3,
    kActivePrimalVariableCountFieldNumber = 4,
    kActiveDualVariableCountFieldNumber = 5,
    kActivePrimalVariableChangeFieldNumber = 6,
    kActiveDualVariableChangeFieldNumber = 7,
    kPointTypeFieldNumber = 1,
  };
  // repeated double random_primal_projections = 2 [packed = true];
  int random_primal_projections_size() const;
  private:
  int _internal_random_primal_projections_size() const;
  public:
  void clear_random_primal_projections();
  private:
  double _internal_random_primal_projections(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_random_primal_projections() const;
  void _internal_add_random_primal_projections(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_random_primal_projections();
  public:
  double random_primal_projections(int index) const;
  void set_random_primal_projections(int index, double value);
  void add_random_primal_projections(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      random_primal_projections() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_random_primal_projections();

  // repeated double random_dual_projections = 3 [packed = true];
  int random_dual_projections_size() const;
  private:
  int _internal_random_dual_projections_size() const;
  public:
  void clear_random_dual_projections();
  private:
  double _internal_random_dual_projections(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_random_dual_projections() const;
  void _internal_add_random_dual_projections(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_random_dual_projections();
  public:
  double random_dual_projections(int index) const;
  void set_random_dual_projections(int index, double value);
  void add_random_dual_projections(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      random_dual_projections() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_random_dual_projections();

  // optional int64 active_primal_variable_count = 4;
  bool has_active_primal_variable_count() const;
  private:
  bool _internal_has_active_primal_variable_count() const;
  public:
  void clear_active_primal_variable_count();
  int64_t active_primal_variable_count() const;
  void set_active_primal_variable_count(int64_t value);
  private:
  int64_t _internal_active_primal_variable_count() const;
  void _internal_set_active_primal_variable_count(int64_t value);
  public:

  // optional int64 active_dual_variable_count = 5;
  bool has_active_dual_variable_count() const;
  private:
  bool _internal_has_active_dual_variable_count() const;
  public:
  void clear_active_dual_variable_count();
  int64_t active_dual_variable_count() const;
  void set_active_dual_variable_count(int64_t value);
  private:
  int64_t _internal_active_dual_variable_count() const;
  void _internal_set_active_dual_variable_count(int64_t value);
  public:

  // optional int64 active_primal_variable_change = 6;
  bool has_active_primal_variable_change() const;
  private:
  bool _internal_has_active_primal_variable_change() const;
  public:
  void clear_active_primal_variable_change();
  int64_t active_primal_variable_change() const;
  void set_active_primal_variable_change(int64_t value);
  private:
  int64_t _internal_active_primal_variable_change() const;
  void _internal_set_active_primal_variable_change(int64_t value);
  public:

  // optional int64 active_dual_variable_change = 7;
  bool has_active_dual_variable_change() const;
  private:
  bool _internal_has_active_dual_variable_change() const;
  public:
  void clear_active_dual_variable_change();
  int64_t active_dual_variable_change() const;
  void set_active_dual_variable_change(int64_t value);
  private:
  int64_t _internal_active_dual_variable_change() const;
  void _internal_set_active_dual_variable_change(int64_t value);
  public:

  // optional .operations_research.pdlp.PointType point_type = 1;
  bool has_point_type() const;
  private:
  bool _internal_has_point_type() const;
  public:
  void clear_point_type();
  ::operations_research::pdlp::PointType point_type() const;
  void set_point_type(::operations_research::pdlp::PointType value);
  private:
  ::operations_research::pdlp::PointType _internal_point_type() const;
  void _internal_set_point_type(::operations_research::pdlp::PointType value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.pdlp.PointMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > random_primal_projections_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > random_dual_projections_;
    int64_t active_primal_variable_count_;
    int64_t active_dual_variable_count_;
    int64_t active_primal_variable_change_;
    int64_t active_dual_variable_change_;
    int point_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpdlp_2fsolve_5flog_2eproto;
};
// -------------------------------------------------------------------

class IterationStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.pdlp.IterationStats) */ {
 public:
  inline IterationStats() : IterationStats(nullptr) {}
  ~IterationStats() override;
  explicit PROTOBUF_CONSTEXPR IterationStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IterationStats(const IterationStats& from);
  IterationStats(IterationStats&& from) noexcept
    : IterationStats() {
    *this = ::std::move(from);
  }

  inline IterationStats& operator=(const IterationStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline IterationStats& operator=(IterationStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IterationStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const IterationStats* internal_default_instance() {
    return reinterpret_cast<const IterationStats*>(
               &_IterationStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IterationStats& a, IterationStats& b) {
    a.Swap(&b);
  }
  inline void Swap(IterationStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IterationStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IterationStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IterationStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IterationStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IterationStats& from) {
    IterationStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IterationStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.pdlp.IterationStats";
  }
  protected:
  explicit IterationStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConvergenceInformationFieldNumber = 2,
    kInfeasibilityInformationFieldNumber = 3,
    kPointMetadataFieldNumber = 11,
    kIterationNumberFieldNumber = 1,
    kCumulativeRejectedStepsFieldNumber = 5,
    kCumulativeKktMatrixPassesFieldNumber = 4,
    kCumulativeTimeSecFieldNumber = 6,
    kStepSizeFieldNumber = 8,
    kPrimalWeightFieldNumber = 9,
    kRestartUsedFieldNumber = 7,
  };
  // repeated .operations_research.pdlp.ConvergenceInformation convergence_information = 2;
  int convergence_information_size() const;
  private:
  int _internal_convergence_information_size() const;
  public:
  void clear_convergence_information();
  ::operations_research::pdlp::ConvergenceInformation* mutable_convergence_information(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::pdlp::ConvergenceInformation >*
      mutable_convergence_information();
  private:
  const ::operations_research::pdlp::ConvergenceInformation& _internal_convergence_information(int index) const;
  ::operations_research::pdlp::ConvergenceInformation* _internal_add_convergence_information();
  public:
  const ::operations_research::pdlp::ConvergenceInformation& convergence_information(int index) const;
  ::operations_research::pdlp::ConvergenceInformation* add_convergence_information();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::pdlp::ConvergenceInformation >&
      convergence_information() const;

  // repeated .operations_research.pdlp.InfeasibilityInformation infeasibility_information = 3;
  int infeasibility_information_size() const;
  private:
  int _internal_infeasibility_information_size() const;
  public:
  void clear_infeasibility_information();
  ::operations_research::pdlp::InfeasibilityInformation* mutable_infeasibility_information(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::pdlp::InfeasibilityInformation >*
      mutable_infeasibility_information();
  private:
  const ::operations_research::pdlp::InfeasibilityInformation& _internal_infeasibility_information(int index) const;
  ::operations_research::pdlp::InfeasibilityInformation* _internal_add_infeasibility_information();
  public:
  const ::operations_research::pdlp::InfeasibilityInformation& infeasibility_information(int index) const;
  ::operations_research::pdlp::InfeasibilityInformation* add_infeasibility_information();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::pdlp::InfeasibilityInformation >&
      infeasibility_information() const;

  // repeated .operations_research.pdlp.PointMetadata point_metadata = 11;
  int point_metadata_size() const;
  private:
  int _internal_point_metadata_size() const;
  public:
  void clear_point_metadata();
  ::operations_research::pdlp::PointMetadata* mutable_point_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::pdlp::PointMetadata >*
      mutable_point_metadata();
  private:
  const ::operations_research::pdlp::PointMetadata& _internal_point_metadata(int index) const;
  ::operations_research::pdlp::PointMetadata* _internal_add_point_metadata();
  public:
  const ::operations_research::pdlp::PointMetadata& point_metadata(int index) const;
  ::operations_research::pdlp::PointMetadata* add_point_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::pdlp::PointMetadata >&
      point_metadata() const;

  // optional int32 iteration_number = 1;
  bool has_iteration_number() const;
  private:
  bool _internal_has_iteration_number() const;
  public:
  void clear_iteration_number();
  int32_t iteration_number() const;
  void set_iteration_number(int32_t value);
  private:
  int32_t _internal_iteration_number() const;
  void _internal_set_iteration_number(int32_t value);
  public:

  // optional int32 cumulative_rejected_steps = 5;
  bool has_cumulative_rejected_steps() const;
  private:
  bool _internal_has_cumulative_rejected_steps() const;
  public:
  void clear_cumulative_rejected_steps();
  int32_t cumulative_rejected_steps() const;
  void set_cumulative_rejected_steps(int32_t value);
  private:
  int32_t _internal_cumulative_rejected_steps() const;
  void _internal_set_cumulative_rejected_steps(int32_t value);
  public:

  // optional double cumulative_kkt_matrix_passes = 4;
  bool has_cumulative_kkt_matrix_passes() const;
  private:
  bool _internal_has_cumulative_kkt_matrix_passes() const;
  public:
  void clear_cumulative_kkt_matrix_passes();
  double cumulative_kkt_matrix_passes() const;
  void set_cumulative_kkt_matrix_passes(double value);
  private:
  double _internal_cumulative_kkt_matrix_passes() const;
  void _internal_set_cumulative_kkt_matrix_passes(double value);
  public:

  // optional double cumulative_time_sec = 6;
  bool has_cumulative_time_sec() const;
  private:
  bool _internal_has_cumulative_time_sec() const;
  public:
  void clear_cumulative_time_sec();
  double cumulative_time_sec() const;
  void set_cumulative_time_sec(double value);
  private:
  double _internal_cumulative_time_sec() const;
  void _internal_set_cumulative_time_sec(double value);
  public:

  // optional double step_size = 8;
  bool has_step_size() const;
  private:
  bool _internal_has_step_size() const;
  public:
  void clear_step_size();
  double step_size() const;
  void set_step_size(double value);
  private:
  double _internal_step_size() const;
  void _internal_set_step_size(double value);
  public:

  // optional double primal_weight = 9;
  bool has_primal_weight() const;
  private:
  bool _internal_has_primal_weight() const;
  public:
  void clear_primal_weight();
  double primal_weight() const;
  void set_primal_weight(double value);
  private:
  double _internal_primal_weight() const;
  void _internal_set_primal_weight(double value);
  public:

  // optional .operations_research.pdlp.RestartChoice restart_used = 7;
  bool has_restart_used() const;
  private:
  bool _internal_has_restart_used() const;
  public:
  void clear_restart_used();
  ::operations_research::pdlp::RestartChoice restart_used() const;
  void set_restart_used(::operations_research::pdlp::RestartChoice value);
  private:
  ::operations_research::pdlp::RestartChoice _internal_restart_used() const;
  void _internal_set_restart_used(::operations_research::pdlp::RestartChoice value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.pdlp.IterationStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::pdlp::ConvergenceInformation > convergence_information_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::pdlp::InfeasibilityInformation > infeasibility_information_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::pdlp::PointMetadata > point_metadata_;
    int32_t iteration_number_;
    int32_t cumulative_rejected_steps_;
    double cumulative_kkt_matrix_passes_;
    double cumulative_time_sec_;
    double step_size_;
    double primal_weight_;
    int restart_used_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpdlp_2fsolve_5flog_2eproto;
};
// -------------------------------------------------------------------

class SolveLog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.pdlp.SolveLog) */ {
 public:
  inline SolveLog() : SolveLog(nullptr) {}
  ~SolveLog() override;
  explicit PROTOBUF_CONSTEXPR SolveLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SolveLog(const SolveLog& from);
  SolveLog(SolveLog&& from) noexcept
    : SolveLog() {
    *this = ::std::move(from);
  }

  inline SolveLog& operator=(const SolveLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolveLog& operator=(SolveLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolveLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const SolveLog* internal_default_instance() {
    return reinterpret_cast<const SolveLog*>(
               &_SolveLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SolveLog& a, SolveLog& b) {
    a.Swap(&b);
  }
  inline void Swap(SolveLog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolveLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolveLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SolveLog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SolveLog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SolveLog& from) {
    SolveLog::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolveLog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.pdlp.SolveLog";
  }
  protected:
  explicit SolveLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIterationStatsFieldNumber = 7,
    kInstanceNameFieldNumber = 1,
    kTerminationStringFieldNumber = 4,
    kSolutionStatsFieldNumber = 8,
    kOriginalProblemStatsFieldNumber = 11,
    kPreprocessedProblemStatsFieldNumber = 12,
    kParamsFieldNumber = 14,
    kTerminationReasonFieldNumber = 3,
    kIterationCountFieldNumber = 5,
    kSolveTimeSecFieldNumber = 6,
    kPreprocessingTimeSecFieldNumber = 13,
    kSolutionTypeFieldNumber = 10,
  };
  // repeated .operations_research.pdlp.IterationStats iteration_stats = 7;
  int iteration_stats_size() const;
  private:
  int _internal_iteration_stats_size() const;
  public:
  void clear_iteration_stats();
  ::operations_research::pdlp::IterationStats* mutable_iteration_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::pdlp::IterationStats >*
      mutable_iteration_stats();
  private:
  const ::operations_research::pdlp::IterationStats& _internal_iteration_stats(int index) const;
  ::operations_research::pdlp::IterationStats* _internal_add_iteration_stats();
  public:
  const ::operations_research::pdlp::IterationStats& iteration_stats(int index) const;
  ::operations_research::pdlp::IterationStats* add_iteration_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::pdlp::IterationStats >&
      iteration_stats() const;

  // optional string instance_name = 1;
  bool has_instance_name() const;
  private:
  bool _internal_has_instance_name() const;
  public:
  void clear_instance_name();
  const std::string& instance_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instance_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instance_name();
  PROTOBUF_NODISCARD std::string* release_instance_name();
  void set_allocated_instance_name(std::string* instance_name);
  private:
  const std::string& _internal_instance_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance_name(const std::string& value);
  std::string* _internal_mutable_instance_name();
  public:

  // optional string termination_string = 4;
  bool has_termination_string() const;
  private:
  bool _internal_has_termination_string() const;
  public:
  void clear_termination_string();
  const std::string& termination_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_termination_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_termination_string();
  PROTOBUF_NODISCARD std::string* release_termination_string();
  void set_allocated_termination_string(std::string* termination_string);
  private:
  const std::string& _internal_termination_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_termination_string(const std::string& value);
  std::string* _internal_mutable_termination_string();
  public:

  // optional .operations_research.pdlp.IterationStats solution_stats = 8;
  bool has_solution_stats() const;
  private:
  bool _internal_has_solution_stats() const;
  public:
  void clear_solution_stats();
  const ::operations_research::pdlp::IterationStats& solution_stats() const;
  PROTOBUF_NODISCARD ::operations_research::pdlp::IterationStats* release_solution_stats();
  ::operations_research::pdlp::IterationStats* mutable_solution_stats();
  void set_allocated_solution_stats(::operations_research::pdlp::IterationStats* solution_stats);
  private:
  const ::operations_research::pdlp::IterationStats& _internal_solution_stats() const;
  ::operations_research::pdlp::IterationStats* _internal_mutable_solution_stats();
  public:
  void unsafe_arena_set_allocated_solution_stats(
      ::operations_research::pdlp::IterationStats* solution_stats);
  ::operations_research::pdlp::IterationStats* unsafe_arena_release_solution_stats();

  // optional .operations_research.pdlp.QuadraticProgramStats original_problem_stats = 11;
  bool has_original_problem_stats() const;
  private:
  bool _internal_has_original_problem_stats() const;
  public:
  void clear_original_problem_stats();
  const ::operations_research::pdlp::QuadraticProgramStats& original_problem_stats() const;
  PROTOBUF_NODISCARD ::operations_research::pdlp::QuadraticProgramStats* release_original_problem_stats();
  ::operations_research::pdlp::QuadraticProgramStats* mutable_original_problem_stats();
  void set_allocated_original_problem_stats(::operations_research::pdlp::QuadraticProgramStats* original_problem_stats);
  private:
  const ::operations_research::pdlp::QuadraticProgramStats& _internal_original_problem_stats() const;
  ::operations_research::pdlp::QuadraticProgramStats* _internal_mutable_original_problem_stats();
  public:
  void unsafe_arena_set_allocated_original_problem_stats(
      ::operations_research::pdlp::QuadraticProgramStats* original_problem_stats);
  ::operations_research::pdlp::QuadraticProgramStats* unsafe_arena_release_original_problem_stats();

  // optional .operations_research.pdlp.QuadraticProgramStats preprocessed_problem_stats = 12;
  bool has_preprocessed_problem_stats() const;
  private:
  bool _internal_has_preprocessed_problem_stats() const;
  public:
  void clear_preprocessed_problem_stats();
  const ::operations_research::pdlp::QuadraticProgramStats& preprocessed_problem_stats() const;
  PROTOBUF_NODISCARD ::operations_research::pdlp::QuadraticProgramStats* release_preprocessed_problem_stats();
  ::operations_research::pdlp::QuadraticProgramStats* mutable_preprocessed_problem_stats();
  void set_allocated_preprocessed_problem_stats(::operations_research::pdlp::QuadraticProgramStats* preprocessed_problem_stats);
  private:
  const ::operations_research::pdlp::QuadraticProgramStats& _internal_preprocessed_problem_stats() const;
  ::operations_research::pdlp::QuadraticProgramStats* _internal_mutable_preprocessed_problem_stats();
  public:
  void unsafe_arena_set_allocated_preprocessed_problem_stats(
      ::operations_research::pdlp::QuadraticProgramStats* preprocessed_problem_stats);
  ::operations_research::pdlp::QuadraticProgramStats* unsafe_arena_release_preprocessed_problem_stats();

  // optional .operations_research.pdlp.PrimalDualHybridGradientParams params = 14;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::operations_research::pdlp::PrimalDualHybridGradientParams& params() const;
  PROTOBUF_NODISCARD ::operations_research::pdlp::PrimalDualHybridGradientParams* release_params();
  ::operations_research::pdlp::PrimalDualHybridGradientParams* mutable_params();
  void set_allocated_params(::operations_research::pdlp::PrimalDualHybridGradientParams* params);
  private:
  const ::operations_research::pdlp::PrimalDualHybridGradientParams& _internal_params() const;
  ::operations_research::pdlp::PrimalDualHybridGradientParams* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::operations_research::pdlp::PrimalDualHybridGradientParams* params);
  ::operations_research::pdlp::PrimalDualHybridGradientParams* unsafe_arena_release_params();

  // optional .operations_research.pdlp.TerminationReason termination_reason = 3;
  bool has_termination_reason() const;
  private:
  bool _internal_has_termination_reason() const;
  public:
  void clear_termination_reason();
  ::operations_research::pdlp::TerminationReason termination_reason() const;
  void set_termination_reason(::operations_research::pdlp::TerminationReason value);
  private:
  ::operations_research::pdlp::TerminationReason _internal_termination_reason() const;
  void _internal_set_termination_reason(::operations_research::pdlp::TerminationReason value);
  public:

  // optional int32 iteration_count = 5;
  bool has_iteration_count() const;
  private:
  bool _internal_has_iteration_count() const;
  public:
  void clear_iteration_count();
  int32_t iteration_count() const;
  void set_iteration_count(int32_t value);
  private:
  int32_t _internal_iteration_count() const;
  void _internal_set_iteration_count(int32_t value);
  public:

  // optional double solve_time_sec = 6;
  bool has_solve_time_sec() const;
  private:
  bool _internal_has_solve_time_sec() const;
  public:
  void clear_solve_time_sec();
  double solve_time_sec() const;
  void set_solve_time_sec(double value);
  private:
  double _internal_solve_time_sec() const;
  void _internal_set_solve_time_sec(double value);
  public:

  // optional double preprocessing_time_sec = 13;
  bool has_preprocessing_time_sec() const;
  private:
  bool _internal_has_preprocessing_time_sec() const;
  public:
  void clear_preprocessing_time_sec();
  double preprocessing_time_sec() const;
  void set_preprocessing_time_sec(double value);
  private:
  double _internal_preprocessing_time_sec() const;
  void _internal_set_preprocessing_time_sec(double value);
  public:

  // optional .operations_research.pdlp.PointType solution_type = 10;
  bool has_solution_type() const;
  private:
  bool _internal_has_solution_type() const;
  public:
  void clear_solution_type();
  ::operations_research::pdlp::PointType solution_type() const;
  void set_solution_type(::operations_research::pdlp::PointType value);
  private:
  ::operations_research::pdlp::PointType _internal_solution_type() const;
  void _internal_set_solution_type(::operations_research::pdlp::PointType value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.pdlp.SolveLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::pdlp::IterationStats > iteration_stats_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr termination_string_;
    ::operations_research::pdlp::IterationStats* solution_stats_;
    ::operations_research::pdlp::QuadraticProgramStats* original_problem_stats_;
    ::operations_research::pdlp::QuadraticProgramStats* preprocessed_problem_stats_;
    ::operations_research::pdlp::PrimalDualHybridGradientParams* params_;
    int termination_reason_;
    int32_t iteration_count_;
    double solve_time_sec_;
    double preprocessing_time_sec_;
    int solution_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpdlp_2fsolve_5flog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QuadraticProgramStats

// optional int64 num_variables = 1;
inline bool QuadraticProgramStats::_internal_has_num_variables() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_num_variables() const {
  return _internal_has_num_variables();
}
inline void QuadraticProgramStats::clear_num_variables() {
  _impl_.num_variables_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t QuadraticProgramStats::_internal_num_variables() const {
  return _impl_.num_variables_;
}
inline int64_t QuadraticProgramStats::num_variables() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.num_variables)
  return _internal_num_variables();
}
inline void QuadraticProgramStats::_internal_set_num_variables(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.num_variables_ = value;
}
inline void QuadraticProgramStats::set_num_variables(int64_t value) {
  _internal_set_num_variables(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.num_variables)
}

// optional int64 num_constraints = 2;
inline bool QuadraticProgramStats::_internal_has_num_constraints() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_num_constraints() const {
  return _internal_has_num_constraints();
}
inline void QuadraticProgramStats::clear_num_constraints() {
  _impl_.num_constraints_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t QuadraticProgramStats::_internal_num_constraints() const {
  return _impl_.num_constraints_;
}
inline int64_t QuadraticProgramStats::num_constraints() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.num_constraints)
  return _internal_num_constraints();
}
inline void QuadraticProgramStats::_internal_set_num_constraints(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.num_constraints_ = value;
}
inline void QuadraticProgramStats::set_num_constraints(int64_t value) {
  _internal_set_num_constraints(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.num_constraints)
}

// optional double constraint_matrix_col_min_l_inf_norm = 3;
inline bool QuadraticProgramStats::_internal_has_constraint_matrix_col_min_l_inf_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_constraint_matrix_col_min_l_inf_norm() const {
  return _internal_has_constraint_matrix_col_min_l_inf_norm();
}
inline void QuadraticProgramStats::clear_constraint_matrix_col_min_l_inf_norm() {
  _impl_.constraint_matrix_col_min_l_inf_norm_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double QuadraticProgramStats::_internal_constraint_matrix_col_min_l_inf_norm() const {
  return _impl_.constraint_matrix_col_min_l_inf_norm_;
}
inline double QuadraticProgramStats::constraint_matrix_col_min_l_inf_norm() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_col_min_l_inf_norm)
  return _internal_constraint_matrix_col_min_l_inf_norm();
}
inline void QuadraticProgramStats::_internal_set_constraint_matrix_col_min_l_inf_norm(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.constraint_matrix_col_min_l_inf_norm_ = value;
}
inline void QuadraticProgramStats::set_constraint_matrix_col_min_l_inf_norm(double value) {
  _internal_set_constraint_matrix_col_min_l_inf_norm(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_col_min_l_inf_norm)
}

// optional double constraint_matrix_row_min_l_inf_norm = 4;
inline bool QuadraticProgramStats::_internal_has_constraint_matrix_row_min_l_inf_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_constraint_matrix_row_min_l_inf_norm() const {
  return _internal_has_constraint_matrix_row_min_l_inf_norm();
}
inline void QuadraticProgramStats::clear_constraint_matrix_row_min_l_inf_norm() {
  _impl_.constraint_matrix_row_min_l_inf_norm_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double QuadraticProgramStats::_internal_constraint_matrix_row_min_l_inf_norm() const {
  return _impl_.constraint_matrix_row_min_l_inf_norm_;
}
inline double QuadraticProgramStats::constraint_matrix_row_min_l_inf_norm() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_row_min_l_inf_norm)
  return _internal_constraint_matrix_row_min_l_inf_norm();
}
inline void QuadraticProgramStats::_internal_set_constraint_matrix_row_min_l_inf_norm(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.constraint_matrix_row_min_l_inf_norm_ = value;
}
inline void QuadraticProgramStats::set_constraint_matrix_row_min_l_inf_norm(double value) {
  _internal_set_constraint_matrix_row_min_l_inf_norm(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_row_min_l_inf_norm)
}

// optional int64 constraint_matrix_num_nonzeros = 5;
inline bool QuadraticProgramStats::_internal_has_constraint_matrix_num_nonzeros() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_constraint_matrix_num_nonzeros() const {
  return _internal_has_constraint_matrix_num_nonzeros();
}
inline void QuadraticProgramStats::clear_constraint_matrix_num_nonzeros() {
  _impl_.constraint_matrix_num_nonzeros_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t QuadraticProgramStats::_internal_constraint_matrix_num_nonzeros() const {
  return _impl_.constraint_matrix_num_nonzeros_;
}
inline int64_t QuadraticProgramStats::constraint_matrix_num_nonzeros() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_num_nonzeros)
  return _internal_constraint_matrix_num_nonzeros();
}
inline void QuadraticProgramStats::_internal_set_constraint_matrix_num_nonzeros(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.constraint_matrix_num_nonzeros_ = value;
}
inline void QuadraticProgramStats::set_constraint_matrix_num_nonzeros(int64_t value) {
  _internal_set_constraint_matrix_num_nonzeros(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_num_nonzeros)
}

// optional double constraint_matrix_abs_max = 6;
inline bool QuadraticProgramStats::_internal_has_constraint_matrix_abs_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_constraint_matrix_abs_max() const {
  return _internal_has_constraint_matrix_abs_max();
}
inline void QuadraticProgramStats::clear_constraint_matrix_abs_max() {
  _impl_.constraint_matrix_abs_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double QuadraticProgramStats::_internal_constraint_matrix_abs_max() const {
  return _impl_.constraint_matrix_abs_max_;
}
inline double QuadraticProgramStats::constraint_matrix_abs_max() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_abs_max)
  return _internal_constraint_matrix_abs_max();
}
inline void QuadraticProgramStats::_internal_set_constraint_matrix_abs_max(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.constraint_matrix_abs_max_ = value;
}
inline void QuadraticProgramStats::set_constraint_matrix_abs_max(double value) {
  _internal_set_constraint_matrix_abs_max(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_abs_max)
}

// optional double constraint_matrix_abs_min = 7;
inline bool QuadraticProgramStats::_internal_has_constraint_matrix_abs_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_constraint_matrix_abs_min() const {
  return _internal_has_constraint_matrix_abs_min();
}
inline void QuadraticProgramStats::clear_constraint_matrix_abs_min() {
  _impl_.constraint_matrix_abs_min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double QuadraticProgramStats::_internal_constraint_matrix_abs_min() const {
  return _impl_.constraint_matrix_abs_min_;
}
inline double QuadraticProgramStats::constraint_matrix_abs_min() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_abs_min)
  return _internal_constraint_matrix_abs_min();
}
inline void QuadraticProgramStats::_internal_set_constraint_matrix_abs_min(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.constraint_matrix_abs_min_ = value;
}
inline void QuadraticProgramStats::set_constraint_matrix_abs_min(double value) {
  _internal_set_constraint_matrix_abs_min(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_abs_min)
}

// optional double constraint_matrix_abs_avg = 8;
inline bool QuadraticProgramStats::_internal_has_constraint_matrix_abs_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_constraint_matrix_abs_avg() const {
  return _internal_has_constraint_matrix_abs_avg();
}
inline void QuadraticProgramStats::clear_constraint_matrix_abs_avg() {
  _impl_.constraint_matrix_abs_avg_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double QuadraticProgramStats::_internal_constraint_matrix_abs_avg() const {
  return _impl_.constraint_matrix_abs_avg_;
}
inline double QuadraticProgramStats::constraint_matrix_abs_avg() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_abs_avg)
  return _internal_constraint_matrix_abs_avg();
}
inline void QuadraticProgramStats::_internal_set_constraint_matrix_abs_avg(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.constraint_matrix_abs_avg_ = value;
}
inline void QuadraticProgramStats::set_constraint_matrix_abs_avg(double value) {
  _internal_set_constraint_matrix_abs_avg(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_abs_avg)
}

// optional double constraint_matrix_l2_norm = 25;
inline bool QuadraticProgramStats::_internal_has_constraint_matrix_l2_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_constraint_matrix_l2_norm() const {
  return _internal_has_constraint_matrix_l2_norm();
}
inline void QuadraticProgramStats::clear_constraint_matrix_l2_norm() {
  _impl_.constraint_matrix_l2_norm_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline double QuadraticProgramStats::_internal_constraint_matrix_l2_norm() const {
  return _impl_.constraint_matrix_l2_norm_;
}
inline double QuadraticProgramStats::constraint_matrix_l2_norm() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_l2_norm)
  return _internal_constraint_matrix_l2_norm();
}
inline void QuadraticProgramStats::_internal_set_constraint_matrix_l2_norm(double value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.constraint_matrix_l2_norm_ = value;
}
inline void QuadraticProgramStats::set_constraint_matrix_l2_norm(double value) {
  _internal_set_constraint_matrix_l2_norm(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_l2_norm)
}

// optional double combined_bounds_max = 9;
inline bool QuadraticProgramStats::_internal_has_combined_bounds_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_combined_bounds_max() const {
  return _internal_has_combined_bounds_max();
}
inline void QuadraticProgramStats::clear_combined_bounds_max() {
  _impl_.combined_bounds_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double QuadraticProgramStats::_internal_combined_bounds_max() const {
  return _impl_.combined_bounds_max_;
}
inline double QuadraticProgramStats::combined_bounds_max() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.combined_bounds_max)
  return _internal_combined_bounds_max();
}
inline void QuadraticProgramStats::_internal_set_combined_bounds_max(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.combined_bounds_max_ = value;
}
inline void QuadraticProgramStats::set_combined_bounds_max(double value) {
  _internal_set_combined_bounds_max(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.combined_bounds_max)
}

// optional double combined_bounds_min = 10;
inline bool QuadraticProgramStats::_internal_has_combined_bounds_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_combined_bounds_min() const {
  return _internal_has_combined_bounds_min();
}
inline void QuadraticProgramStats::clear_combined_bounds_min() {
  _impl_.combined_bounds_min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double QuadraticProgramStats::_internal_combined_bounds_min() const {
  return _impl_.combined_bounds_min_;
}
inline double QuadraticProgramStats::combined_bounds_min() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.combined_bounds_min)
  return _internal_combined_bounds_min();
}
inline void QuadraticProgramStats::_internal_set_combined_bounds_min(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.combined_bounds_min_ = value;
}
inline void QuadraticProgramStats::set_combined_bounds_min(double value) {
  _internal_set_combined_bounds_min(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.combined_bounds_min)
}

// optional double combined_bounds_avg = 11;
inline bool QuadraticProgramStats::_internal_has_combined_bounds_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_combined_bounds_avg() const {
  return _internal_has_combined_bounds_avg();
}
inline void QuadraticProgramStats::clear_combined_bounds_avg() {
  _impl_.combined_bounds_avg_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double QuadraticProgramStats::_internal_combined_bounds_avg() const {
  return _impl_.combined_bounds_avg_;
}
inline double QuadraticProgramStats::combined_bounds_avg() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.combined_bounds_avg)
  return _internal_combined_bounds_avg();
}
inline void QuadraticProgramStats::_internal_set_combined_bounds_avg(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.combined_bounds_avg_ = value;
}
inline void QuadraticProgramStats::set_combined_bounds_avg(double value) {
  _internal_set_combined_bounds_avg(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.combined_bounds_avg)
}

// optional double combined_bounds_l2_norm = 24;
inline bool QuadraticProgramStats::_internal_has_combined_bounds_l2_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_combined_bounds_l2_norm() const {
  return _internal_has_combined_bounds_l2_norm();
}
inline void QuadraticProgramStats::clear_combined_bounds_l2_norm() {
  _impl_.combined_bounds_l2_norm_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline double QuadraticProgramStats::_internal_combined_bounds_l2_norm() const {
  return _impl_.combined_bounds_l2_norm_;
}
inline double QuadraticProgramStats::combined_bounds_l2_norm() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.combined_bounds_l2_norm)
  return _internal_combined_bounds_l2_norm();
}
inline void QuadraticProgramStats::_internal_set_combined_bounds_l2_norm(double value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.combined_bounds_l2_norm_ = value;
}
inline void QuadraticProgramStats::set_combined_bounds_l2_norm(double value) {
  _internal_set_combined_bounds_l2_norm(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.combined_bounds_l2_norm)
}

// optional int64 variable_bound_gaps_num_finite = 12;
inline bool QuadraticProgramStats::_internal_has_variable_bound_gaps_num_finite() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_variable_bound_gaps_num_finite() const {
  return _internal_has_variable_bound_gaps_num_finite();
}
inline void QuadraticProgramStats::clear_variable_bound_gaps_num_finite() {
  _impl_.variable_bound_gaps_num_finite_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int64_t QuadraticProgramStats::_internal_variable_bound_gaps_num_finite() const {
  return _impl_.variable_bound_gaps_num_finite_;
}
inline int64_t QuadraticProgramStats::variable_bound_gaps_num_finite() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.variable_bound_gaps_num_finite)
  return _internal_variable_bound_gaps_num_finite();
}
inline void QuadraticProgramStats::_internal_set_variable_bound_gaps_num_finite(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.variable_bound_gaps_num_finite_ = value;
}
inline void QuadraticProgramStats::set_variable_bound_gaps_num_finite(int64_t value) {
  _internal_set_variable_bound_gaps_num_finite(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.variable_bound_gaps_num_finite)
}

// optional double variable_bound_gaps_max = 13;
inline bool QuadraticProgramStats::_internal_has_variable_bound_gaps_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_variable_bound_gaps_max() const {
  return _internal_has_variable_bound_gaps_max();
}
inline void QuadraticProgramStats::clear_variable_bound_gaps_max() {
  _impl_.variable_bound_gaps_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double QuadraticProgramStats::_internal_variable_bound_gaps_max() const {
  return _impl_.variable_bound_gaps_max_;
}
inline double QuadraticProgramStats::variable_bound_gaps_max() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.variable_bound_gaps_max)
  return _internal_variable_bound_gaps_max();
}
inline void QuadraticProgramStats::_internal_set_variable_bound_gaps_max(double value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.variable_bound_gaps_max_ = value;
}
inline void QuadraticProgramStats::set_variable_bound_gaps_max(double value) {
  _internal_set_variable_bound_gaps_max(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.variable_bound_gaps_max)
}

// optional double variable_bound_gaps_min = 14;
inline bool QuadraticProgramStats::_internal_has_variable_bound_gaps_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_variable_bound_gaps_min() const {
  return _internal_has_variable_bound_gaps_min();
}
inline void QuadraticProgramStats::clear_variable_bound_gaps_min() {
  _impl_.variable_bound_gaps_min_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double QuadraticProgramStats::_internal_variable_bound_gaps_min() const {
  return _impl_.variable_bound_gaps_min_;
}
inline double QuadraticProgramStats::variable_bound_gaps_min() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.variable_bound_gaps_min)
  return _internal_variable_bound_gaps_min();
}
inline void QuadraticProgramStats::_internal_set_variable_bound_gaps_min(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.variable_bound_gaps_min_ = value;
}
inline void QuadraticProgramStats::set_variable_bound_gaps_min(double value) {
  _internal_set_variable_bound_gaps_min(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.variable_bound_gaps_min)
}

// optional double variable_bound_gaps_avg = 15;
inline bool QuadraticProgramStats::_internal_has_variable_bound_gaps_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_variable_bound_gaps_avg() const {
  return _internal_has_variable_bound_gaps_avg();
}
inline void QuadraticProgramStats::clear_variable_bound_gaps_avg() {
  _impl_.variable_bound_gaps_avg_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double QuadraticProgramStats::_internal_variable_bound_gaps_avg() const {
  return _impl_.variable_bound_gaps_avg_;
}
inline double QuadraticProgramStats::variable_bound_gaps_avg() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.variable_bound_gaps_avg)
  return _internal_variable_bound_gaps_avg();
}
inline void QuadraticProgramStats::_internal_set_variable_bound_gaps_avg(double value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.variable_bound_gaps_avg_ = value;
}
inline void QuadraticProgramStats::set_variable_bound_gaps_avg(double value) {
  _internal_set_variable_bound_gaps_avg(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.variable_bound_gaps_avg)
}

// optional double variable_bound_gaps_l2_norm = 26;
inline bool QuadraticProgramStats::_internal_has_variable_bound_gaps_l2_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_variable_bound_gaps_l2_norm() const {
  return _internal_has_variable_bound_gaps_l2_norm();
}
inline void QuadraticProgramStats::clear_variable_bound_gaps_l2_norm() {
  _impl_.variable_bound_gaps_l2_norm_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline double QuadraticProgramStats::_internal_variable_bound_gaps_l2_norm() const {
  return _impl_.variable_bound_gaps_l2_norm_;
}
inline double QuadraticProgramStats::variable_bound_gaps_l2_norm() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.variable_bound_gaps_l2_norm)
  return _internal_variable_bound_gaps_l2_norm();
}
inline void QuadraticProgramStats::_internal_set_variable_bound_gaps_l2_norm(double value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.variable_bound_gaps_l2_norm_ = value;
}
inline void QuadraticProgramStats::set_variable_bound_gaps_l2_norm(double value) {
  _internal_set_variable_bound_gaps_l2_norm(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.variable_bound_gaps_l2_norm)
}

// optional double objective_vector_abs_max = 16;
inline bool QuadraticProgramStats::_internal_has_objective_vector_abs_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_objective_vector_abs_max() const {
  return _internal_has_objective_vector_abs_max();
}
inline void QuadraticProgramStats::clear_objective_vector_abs_max() {
  _impl_.objective_vector_abs_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double QuadraticProgramStats::_internal_objective_vector_abs_max() const {
  return _impl_.objective_vector_abs_max_;
}
inline double QuadraticProgramStats::objective_vector_abs_max() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.objective_vector_abs_max)
  return _internal_objective_vector_abs_max();
}
inline void QuadraticProgramStats::_internal_set_objective_vector_abs_max(double value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.objective_vector_abs_max_ = value;
}
inline void QuadraticProgramStats::set_objective_vector_abs_max(double value) {
  _internal_set_objective_vector_abs_max(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.objective_vector_abs_max)
}

// optional double objective_vector_abs_min = 17;
inline bool QuadraticProgramStats::_internal_has_objective_vector_abs_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_objective_vector_abs_min() const {
  return _internal_has_objective_vector_abs_min();
}
inline void QuadraticProgramStats::clear_objective_vector_abs_min() {
  _impl_.objective_vector_abs_min_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double QuadraticProgramStats::_internal_objective_vector_abs_min() const {
  return _impl_.objective_vector_abs_min_;
}
inline double QuadraticProgramStats::objective_vector_abs_min() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.objective_vector_abs_min)
  return _internal_objective_vector_abs_min();
}
inline void QuadraticProgramStats::_internal_set_objective_vector_abs_min(double value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.objective_vector_abs_min_ = value;
}
inline void QuadraticProgramStats::set_objective_vector_abs_min(double value) {
  _internal_set_objective_vector_abs_min(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.objective_vector_abs_min)
}

// optional double objective_vector_abs_avg = 18;
inline bool QuadraticProgramStats::_internal_has_objective_vector_abs_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_objective_vector_abs_avg() const {
  return _internal_has_objective_vector_abs_avg();
}
inline void QuadraticProgramStats::clear_objective_vector_abs_avg() {
  _impl_.objective_vector_abs_avg_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double QuadraticProgramStats::_internal_objective_vector_abs_avg() const {
  return _impl_.objective_vector_abs_avg_;
}
inline double QuadraticProgramStats::objective_vector_abs_avg() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.objective_vector_abs_avg)
  return _internal_objective_vector_abs_avg();
}
inline void QuadraticProgramStats::_internal_set_objective_vector_abs_avg(double value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.objective_vector_abs_avg_ = value;
}
inline void QuadraticProgramStats::set_objective_vector_abs_avg(double value) {
  _internal_set_objective_vector_abs_avg(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.objective_vector_abs_avg)
}

// optional double objective_vector_l2_norm = 23;
inline bool QuadraticProgramStats::_internal_has_objective_vector_l2_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_objective_vector_l2_norm() const {
  return _internal_has_objective_vector_l2_norm();
}
inline void QuadraticProgramStats::clear_objective_vector_l2_norm() {
  _impl_.objective_vector_l2_norm_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline double QuadraticProgramStats::_internal_objective_vector_l2_norm() const {
  return _impl_.objective_vector_l2_norm_;
}
inline double QuadraticProgramStats::objective_vector_l2_norm() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.objective_vector_l2_norm)
  return _internal_objective_vector_l2_norm();
}
inline void QuadraticProgramStats::_internal_set_objective_vector_l2_norm(double value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.objective_vector_l2_norm_ = value;
}
inline void QuadraticProgramStats::set_objective_vector_l2_norm(double value) {
  _internal_set_objective_vector_l2_norm(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.objective_vector_l2_norm)
}

// optional int64 objective_matrix_num_nonzeros = 19;
inline bool QuadraticProgramStats::_internal_has_objective_matrix_num_nonzeros() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_objective_matrix_num_nonzeros() const {
  return _internal_has_objective_matrix_num_nonzeros();
}
inline void QuadraticProgramStats::clear_objective_matrix_num_nonzeros() {
  _impl_.objective_matrix_num_nonzeros_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline int64_t QuadraticProgramStats::_internal_objective_matrix_num_nonzeros() const {
  return _impl_.objective_matrix_num_nonzeros_;
}
inline int64_t QuadraticProgramStats::objective_matrix_num_nonzeros() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.objective_matrix_num_nonzeros)
  return _internal_objective_matrix_num_nonzeros();
}
inline void QuadraticProgramStats::_internal_set_objective_matrix_num_nonzeros(int64_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.objective_matrix_num_nonzeros_ = value;
}
inline void QuadraticProgramStats::set_objective_matrix_num_nonzeros(int64_t value) {
  _internal_set_objective_matrix_num_nonzeros(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.objective_matrix_num_nonzeros)
}

// optional double objective_matrix_abs_max = 20;
inline bool QuadraticProgramStats::_internal_has_objective_matrix_abs_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_objective_matrix_abs_max() const {
  return _internal_has_objective_matrix_abs_max();
}
inline void QuadraticProgramStats::clear_objective_matrix_abs_max() {
  _impl_.objective_matrix_abs_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double QuadraticProgramStats::_internal_objective_matrix_abs_max() const {
  return _impl_.objective_matrix_abs_max_;
}
inline double QuadraticProgramStats::objective_matrix_abs_max() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.objective_matrix_abs_max)
  return _internal_objective_matrix_abs_max();
}
inline void QuadraticProgramStats::_internal_set_objective_matrix_abs_max(double value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.objective_matrix_abs_max_ = value;
}
inline void QuadraticProgramStats::set_objective_matrix_abs_max(double value) {
  _internal_set_objective_matrix_abs_max(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.objective_matrix_abs_max)
}

// optional double objective_matrix_abs_min = 21;
inline bool QuadraticProgramStats::_internal_has_objective_matrix_abs_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_objective_matrix_abs_min() const {
  return _internal_has_objective_matrix_abs_min();
}
inline void QuadraticProgramStats::clear_objective_matrix_abs_min() {
  _impl_.objective_matrix_abs_min_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline double QuadraticProgramStats::_internal_objective_matrix_abs_min() const {
  return _impl_.objective_matrix_abs_min_;
}
inline double QuadraticProgramStats::objective_matrix_abs_min() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.objective_matrix_abs_min)
  return _internal_objective_matrix_abs_min();
}
inline void QuadraticProgramStats::_internal_set_objective_matrix_abs_min(double value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.objective_matrix_abs_min_ = value;
}
inline void QuadraticProgramStats::set_objective_matrix_abs_min(double value) {
  _internal_set_objective_matrix_abs_min(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.objective_matrix_abs_min)
}

// optional double objective_matrix_abs_avg = 22;
inline bool QuadraticProgramStats::_internal_has_objective_matrix_abs_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_objective_matrix_abs_avg() const {
  return _internal_has_objective_matrix_abs_avg();
}
inline void QuadraticProgramStats::clear_objective_matrix_abs_avg() {
  _impl_.objective_matrix_abs_avg_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline double QuadraticProgramStats::_internal_objective_matrix_abs_avg() const {
  return _impl_.objective_matrix_abs_avg_;
}
inline double QuadraticProgramStats::objective_matrix_abs_avg() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.objective_matrix_abs_avg)
  return _internal_objective_matrix_abs_avg();
}
inline void QuadraticProgramStats::_internal_set_objective_matrix_abs_avg(double value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.objective_matrix_abs_avg_ = value;
}
inline void QuadraticProgramStats::set_objective_matrix_abs_avg(double value) {
  _internal_set_objective_matrix_abs_avg(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.objective_matrix_abs_avg)
}

// optional double objective_matrix_l2_norm = 27;
inline bool QuadraticProgramStats::_internal_has_objective_matrix_l2_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool QuadraticProgramStats::has_objective_matrix_l2_norm() const {
  return _internal_has_objective_matrix_l2_norm();
}
inline void QuadraticProgramStats::clear_objective_matrix_l2_norm() {
  _impl_.objective_matrix_l2_norm_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline double QuadraticProgramStats::_internal_objective_matrix_l2_norm() const {
  return _impl_.objective_matrix_l2_norm_;
}
inline double QuadraticProgramStats::objective_matrix_l2_norm() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.objective_matrix_l2_norm)
  return _internal_objective_matrix_l2_norm();
}
inline void QuadraticProgramStats::_internal_set_objective_matrix_l2_norm(double value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.objective_matrix_l2_norm_ = value;
}
inline void QuadraticProgramStats::set_objective_matrix_l2_norm(double value) {
  _internal_set_objective_matrix_l2_norm(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.objective_matrix_l2_norm)
}

// -------------------------------------------------------------------

// ConvergenceInformation

// optional .operations_research.pdlp.PointType candidate_type = 1;
inline bool ConvergenceInformation::_internal_has_candidate_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ConvergenceInformation::has_candidate_type() const {
  return _internal_has_candidate_type();
}
inline void ConvergenceInformation::clear_candidate_type() {
  _impl_.candidate_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::operations_research::pdlp::PointType ConvergenceInformation::_internal_candidate_type() const {
  return static_cast< ::operations_research::pdlp::PointType >(_impl_.candidate_type_);
}
inline ::operations_research::pdlp::PointType ConvergenceInformation::candidate_type() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.candidate_type)
  return _internal_candidate_type();
}
inline void ConvergenceInformation::_internal_set_candidate_type(::operations_research::pdlp::PointType value) {
  assert(::operations_research::pdlp::PointType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.candidate_type_ = value;
}
inline void ConvergenceInformation::set_candidate_type(::operations_research::pdlp::PointType value) {
  _internal_set_candidate_type(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.candidate_type)
}

// optional double primal_objective = 2;
inline bool ConvergenceInformation::_internal_has_primal_objective() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConvergenceInformation::has_primal_objective() const {
  return _internal_has_primal_objective();
}
inline void ConvergenceInformation::clear_primal_objective() {
  _impl_.primal_objective_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ConvergenceInformation::_internal_primal_objective() const {
  return _impl_.primal_objective_;
}
inline double ConvergenceInformation::primal_objective() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.primal_objective)
  return _internal_primal_objective();
}
inline void ConvergenceInformation::_internal_set_primal_objective(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.primal_objective_ = value;
}
inline void ConvergenceInformation::set_primal_objective(double value) {
  _internal_set_primal_objective(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.primal_objective)
}

// optional double dual_objective = 3;
inline bool ConvergenceInformation::_internal_has_dual_objective() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConvergenceInformation::has_dual_objective() const {
  return _internal_has_dual_objective();
}
inline void ConvergenceInformation::clear_dual_objective() {
  _impl_.dual_objective_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ConvergenceInformation::_internal_dual_objective() const {
  return _impl_.dual_objective_;
}
inline double ConvergenceInformation::dual_objective() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.dual_objective)
  return _internal_dual_objective();
}
inline void ConvergenceInformation::_internal_set_dual_objective(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dual_objective_ = value;
}
inline void ConvergenceInformation::set_dual_objective(double value) {
  _internal_set_dual_objective(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.dual_objective)
}

// optional double corrected_dual_objective = 4;
inline bool ConvergenceInformation::_internal_has_corrected_dual_objective() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConvergenceInformation::has_corrected_dual_objective() const {
  return _internal_has_corrected_dual_objective();
}
inline void ConvergenceInformation::clear_corrected_dual_objective() {
  _impl_.corrected_dual_objective_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ConvergenceInformation::_internal_corrected_dual_objective() const {
  return _impl_.corrected_dual_objective_;
}
inline double ConvergenceInformation::corrected_dual_objective() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.corrected_dual_objective)
  return _internal_corrected_dual_objective();
}
inline void ConvergenceInformation::_internal_set_corrected_dual_objective(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.corrected_dual_objective_ = value;
}
inline void ConvergenceInformation::set_corrected_dual_objective(double value) {
  _internal_set_corrected_dual_objective(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.corrected_dual_objective)
}

// optional double l_inf_primal_residual = 5;
inline bool ConvergenceInformation::_internal_has_l_inf_primal_residual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ConvergenceInformation::has_l_inf_primal_residual() const {
  return _internal_has_l_inf_primal_residual();
}
inline void ConvergenceInformation::clear_l_inf_primal_residual() {
  _impl_.l_inf_primal_residual_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ConvergenceInformation::_internal_l_inf_primal_residual() const {
  return _impl_.l_inf_primal_residual_;
}
inline double ConvergenceInformation::l_inf_primal_residual() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.l_inf_primal_residual)
  return _internal_l_inf_primal_residual();
}
inline void ConvergenceInformation::_internal_set_l_inf_primal_residual(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.l_inf_primal_residual_ = value;
}
inline void ConvergenceInformation::set_l_inf_primal_residual(double value) {
  _internal_set_l_inf_primal_residual(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.l_inf_primal_residual)
}

// optional double l2_primal_residual = 6;
inline bool ConvergenceInformation::_internal_has_l2_primal_residual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ConvergenceInformation::has_l2_primal_residual() const {
  return _internal_has_l2_primal_residual();
}
inline void ConvergenceInformation::clear_l2_primal_residual() {
  _impl_.l2_primal_residual_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double ConvergenceInformation::_internal_l2_primal_residual() const {
  return _impl_.l2_primal_residual_;
}
inline double ConvergenceInformation::l2_primal_residual() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.l2_primal_residual)
  return _internal_l2_primal_residual();
}
inline void ConvergenceInformation::_internal_set_l2_primal_residual(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.l2_primal_residual_ = value;
}
inline void ConvergenceInformation::set_l2_primal_residual(double value) {
  _internal_set_l2_primal_residual(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.l2_primal_residual)
}

// optional double l_inf_componentwise_primal_residual = 24;
inline bool ConvergenceInformation::_internal_has_l_inf_componentwise_primal_residual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ConvergenceInformation::has_l_inf_componentwise_primal_residual() const {
  return _internal_has_l_inf_componentwise_primal_residual();
}
inline void ConvergenceInformation::clear_l_inf_componentwise_primal_residual() {
  _impl_.l_inf_componentwise_primal_residual_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double ConvergenceInformation::_internal_l_inf_componentwise_primal_residual() const {
  return _impl_.l_inf_componentwise_primal_residual_;
}
inline double ConvergenceInformation::l_inf_componentwise_primal_residual() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.l_inf_componentwise_primal_residual)
  return _internal_l_inf_componentwise_primal_residual();
}
inline void ConvergenceInformation::_internal_set_l_inf_componentwise_primal_residual(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.l_inf_componentwise_primal_residual_ = value;
}
inline void ConvergenceInformation::set_l_inf_componentwise_primal_residual(double value) {
  _internal_set_l_inf_componentwise_primal_residual(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.l_inf_componentwise_primal_residual)
}

// optional double l_inf_dual_residual = 7;
inline bool ConvergenceInformation::_internal_has_l_inf_dual_residual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ConvergenceInformation::has_l_inf_dual_residual() const {
  return _internal_has_l_inf_dual_residual();
}
inline void ConvergenceInformation::clear_l_inf_dual_residual() {
  _impl_.l_inf_dual_residual_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double ConvergenceInformation::_internal_l_inf_dual_residual() const {
  return _impl_.l_inf_dual_residual_;
}
inline double ConvergenceInformation::l_inf_dual_residual() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.l_inf_dual_residual)
  return _internal_l_inf_dual_residual();
}
inline void ConvergenceInformation::_internal_set_l_inf_dual_residual(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.l_inf_dual_residual_ = value;
}
inline void ConvergenceInformation::set_l_inf_dual_residual(double value) {
  _internal_set_l_inf_dual_residual(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.l_inf_dual_residual)
}

// optional double l2_dual_residual = 8;
inline bool ConvergenceInformation::_internal_has_l2_dual_residual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ConvergenceInformation::has_l2_dual_residual() const {
  return _internal_has_l2_dual_residual();
}
inline void ConvergenceInformation::clear_l2_dual_residual() {
  _impl_.l2_dual_residual_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double ConvergenceInformation::_internal_l2_dual_residual() const {
  return _impl_.l2_dual_residual_;
}
inline double ConvergenceInformation::l2_dual_residual() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.l2_dual_residual)
  return _internal_l2_dual_residual();
}
inline void ConvergenceInformation::_internal_set_l2_dual_residual(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.l2_dual_residual_ = value;
}
inline void ConvergenceInformation::set_l2_dual_residual(double value) {
  _internal_set_l2_dual_residual(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.l2_dual_residual)
}

// optional double l_inf_componentwise_dual_residual = 25;
inline bool ConvergenceInformation::_internal_has_l_inf_componentwise_dual_residual() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ConvergenceInformation::has_l_inf_componentwise_dual_residual() const {
  return _internal_has_l_inf_componentwise_dual_residual();
}
inline void ConvergenceInformation::clear_l_inf_componentwise_dual_residual() {
  _impl_.l_inf_componentwise_dual_residual_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double ConvergenceInformation::_internal_l_inf_componentwise_dual_residual() const {
  return _impl_.l_inf_componentwise_dual_residual_;
}
inline double ConvergenceInformation::l_inf_componentwise_dual_residual() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.l_inf_componentwise_dual_residual)
  return _internal_l_inf_componentwise_dual_residual();
}
inline void ConvergenceInformation::_internal_set_l_inf_componentwise_dual_residual(double value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.l_inf_componentwise_dual_residual_ = value;
}
inline void ConvergenceInformation::set_l_inf_componentwise_dual_residual(double value) {
  _internal_set_l_inf_componentwise_dual_residual(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.l_inf_componentwise_dual_residual)
}

// optional double l_inf_primal_variable = 14;
inline bool ConvergenceInformation::_internal_has_l_inf_primal_variable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ConvergenceInformation::has_l_inf_primal_variable() const {
  return _internal_has_l_inf_primal_variable();
}
inline void ConvergenceInformation::clear_l_inf_primal_variable() {
  _impl_.l_inf_primal_variable_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double ConvergenceInformation::_internal_l_inf_primal_variable() const {
  return _impl_.l_inf_primal_variable_;
}
inline double ConvergenceInformation::l_inf_primal_variable() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.l_inf_primal_variable)
  return _internal_l_inf_primal_variable();
}
inline void ConvergenceInformation::_internal_set_l_inf_primal_variable(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.l_inf_primal_variable_ = value;
}
inline void ConvergenceInformation::set_l_inf_primal_variable(double value) {
  _internal_set_l_inf_primal_variable(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.l_inf_primal_variable)
}

// optional double l2_primal_variable = 15;
inline bool ConvergenceInformation::_internal_has_l2_primal_variable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ConvergenceInformation::has_l2_primal_variable() const {
  return _internal_has_l2_primal_variable();
}
inline void ConvergenceInformation::clear_l2_primal_variable() {
  _impl_.l2_primal_variable_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double ConvergenceInformation::_internal_l2_primal_variable() const {
  return _impl_.l2_primal_variable_;
}
inline double ConvergenceInformation::l2_primal_variable() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.l2_primal_variable)
  return _internal_l2_primal_variable();
}
inline void ConvergenceInformation::_internal_set_l2_primal_variable(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.l2_primal_variable_ = value;
}
inline void ConvergenceInformation::set_l2_primal_variable(double value) {
  _internal_set_l2_primal_variable(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.l2_primal_variable)
}

// optional double l_inf_dual_variable = 16;
inline bool ConvergenceInformation::_internal_has_l_inf_dual_variable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ConvergenceInformation::has_l_inf_dual_variable() const {
  return _internal_has_l_inf_dual_variable();
}
inline void ConvergenceInformation::clear_l_inf_dual_variable() {
  _impl_.l_inf_dual_variable_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double ConvergenceInformation::_internal_l_inf_dual_variable() const {
  return _impl_.l_inf_dual_variable_;
}
inline double ConvergenceInformation::l_inf_dual_variable() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.l_inf_dual_variable)
  return _internal_l_inf_dual_variable();
}
inline void ConvergenceInformation::_internal_set_l_inf_dual_variable(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.l_inf_dual_variable_ = value;
}
inline void ConvergenceInformation::set_l_inf_dual_variable(double value) {
  _internal_set_l_inf_dual_variable(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.l_inf_dual_variable)
}

// optional double l2_dual_variable = 17;
inline bool ConvergenceInformation::_internal_has_l2_dual_variable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ConvergenceInformation::has_l2_dual_variable() const {
  return _internal_has_l2_dual_variable();
}
inline void ConvergenceInformation::clear_l2_dual_variable() {
  _impl_.l2_dual_variable_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double ConvergenceInformation::_internal_l2_dual_variable() const {
  return _impl_.l2_dual_variable_;
}
inline double ConvergenceInformation::l2_dual_variable() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.l2_dual_variable)
  return _internal_l2_dual_variable();
}
inline void ConvergenceInformation::_internal_set_l2_dual_variable(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.l2_dual_variable_ = value;
}
inline void ConvergenceInformation::set_l2_dual_variable(double value) {
  _internal_set_l2_dual_variable(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.l2_dual_variable)
}

// -------------------------------------------------------------------

// InfeasibilityInformation

// optional double max_primal_ray_infeasibility = 1;
inline bool InfeasibilityInformation::_internal_has_max_primal_ray_infeasibility() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InfeasibilityInformation::has_max_primal_ray_infeasibility() const {
  return _internal_has_max_primal_ray_infeasibility();
}
inline void InfeasibilityInformation::clear_max_primal_ray_infeasibility() {
  _impl_.max_primal_ray_infeasibility_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double InfeasibilityInformation::_internal_max_primal_ray_infeasibility() const {
  return _impl_.max_primal_ray_infeasibility_;
}
inline double InfeasibilityInformation::max_primal_ray_infeasibility() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.InfeasibilityInformation.max_primal_ray_infeasibility)
  return _internal_max_primal_ray_infeasibility();
}
inline void InfeasibilityInformation::_internal_set_max_primal_ray_infeasibility(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.max_primal_ray_infeasibility_ = value;
}
inline void InfeasibilityInformation::set_max_primal_ray_infeasibility(double value) {
  _internal_set_max_primal_ray_infeasibility(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.InfeasibilityInformation.max_primal_ray_infeasibility)
}

// optional double primal_ray_linear_objective = 2;
inline bool InfeasibilityInformation::_internal_has_primal_ray_linear_objective() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InfeasibilityInformation::has_primal_ray_linear_objective() const {
  return _internal_has_primal_ray_linear_objective();
}
inline void InfeasibilityInformation::clear_primal_ray_linear_objective() {
  _impl_.primal_ray_linear_objective_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double InfeasibilityInformation::_internal_primal_ray_linear_objective() const {
  return _impl_.primal_ray_linear_objective_;
}
inline double InfeasibilityInformation::primal_ray_linear_objective() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.InfeasibilityInformation.primal_ray_linear_objective)
  return _internal_primal_ray_linear_objective();
}
inline void InfeasibilityInformation::_internal_set_primal_ray_linear_objective(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.primal_ray_linear_objective_ = value;
}
inline void InfeasibilityInformation::set_primal_ray_linear_objective(double value) {
  _internal_set_primal_ray_linear_objective(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.InfeasibilityInformation.primal_ray_linear_objective)
}

// optional double primal_ray_quadratic_norm = 3;
inline bool InfeasibilityInformation::_internal_has_primal_ray_quadratic_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InfeasibilityInformation::has_primal_ray_quadratic_norm() const {
  return _internal_has_primal_ray_quadratic_norm();
}
inline void InfeasibilityInformation::clear_primal_ray_quadratic_norm() {
  _impl_.primal_ray_quadratic_norm_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double InfeasibilityInformation::_internal_primal_ray_quadratic_norm() const {
  return _impl_.primal_ray_quadratic_norm_;
}
inline double InfeasibilityInformation::primal_ray_quadratic_norm() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.InfeasibilityInformation.primal_ray_quadratic_norm)
  return _internal_primal_ray_quadratic_norm();
}
inline void InfeasibilityInformation::_internal_set_primal_ray_quadratic_norm(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.primal_ray_quadratic_norm_ = value;
}
inline void InfeasibilityInformation::set_primal_ray_quadratic_norm(double value) {
  _internal_set_primal_ray_quadratic_norm(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.InfeasibilityInformation.primal_ray_quadratic_norm)
}

// optional double max_dual_ray_infeasibility = 4;
inline bool InfeasibilityInformation::_internal_has_max_dual_ray_infeasibility() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InfeasibilityInformation::has_max_dual_ray_infeasibility() const {
  return _internal_has_max_dual_ray_infeasibility();
}
inline void InfeasibilityInformation::clear_max_dual_ray_infeasibility() {
  _impl_.max_dual_ray_infeasibility_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double InfeasibilityInformation::_internal_max_dual_ray_infeasibility() const {
  return _impl_.max_dual_ray_infeasibility_;
}
inline double InfeasibilityInformation::max_dual_ray_infeasibility() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.InfeasibilityInformation.max_dual_ray_infeasibility)
  return _internal_max_dual_ray_infeasibility();
}
inline void InfeasibilityInformation::_internal_set_max_dual_ray_infeasibility(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_dual_ray_infeasibility_ = value;
}
inline void InfeasibilityInformation::set_max_dual_ray_infeasibility(double value) {
  _internal_set_max_dual_ray_infeasibility(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.InfeasibilityInformation.max_dual_ray_infeasibility)
}

// optional double dual_ray_objective = 5;
inline bool InfeasibilityInformation::_internal_has_dual_ray_objective() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool InfeasibilityInformation::has_dual_ray_objective() const {
  return _internal_has_dual_ray_objective();
}
inline void InfeasibilityInformation::clear_dual_ray_objective() {
  _impl_.dual_ray_objective_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double InfeasibilityInformation::_internal_dual_ray_objective() const {
  return _impl_.dual_ray_objective_;
}
inline double InfeasibilityInformation::dual_ray_objective() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.InfeasibilityInformation.dual_ray_objective)
  return _internal_dual_ray_objective();
}
inline void InfeasibilityInformation::_internal_set_dual_ray_objective(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.dual_ray_objective_ = value;
}
inline void InfeasibilityInformation::set_dual_ray_objective(double value) {
  _internal_set_dual_ray_objective(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.InfeasibilityInformation.dual_ray_objective)
}

// optional .operations_research.pdlp.PointType candidate_type = 6;
inline bool InfeasibilityInformation::_internal_has_candidate_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool InfeasibilityInformation::has_candidate_type() const {
  return _internal_has_candidate_type();
}
inline void InfeasibilityInformation::clear_candidate_type() {
  _impl_.candidate_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::operations_research::pdlp::PointType InfeasibilityInformation::_internal_candidate_type() const {
  return static_cast< ::operations_research::pdlp::PointType >(_impl_.candidate_type_);
}
inline ::operations_research::pdlp::PointType InfeasibilityInformation::candidate_type() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.InfeasibilityInformation.candidate_type)
  return _internal_candidate_type();
}
inline void InfeasibilityInformation::_internal_set_candidate_type(::operations_research::pdlp::PointType value) {
  assert(::operations_research::pdlp::PointType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.candidate_type_ = value;
}
inline void InfeasibilityInformation::set_candidate_type(::operations_research::pdlp::PointType value) {
  _internal_set_candidate_type(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.InfeasibilityInformation.candidate_type)
}

// -------------------------------------------------------------------

// PointMetadata

// optional .operations_research.pdlp.PointType point_type = 1;
inline bool PointMetadata::_internal_has_point_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PointMetadata::has_point_type() const {
  return _internal_has_point_type();
}
inline void PointMetadata::clear_point_type() {
  _impl_.point_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::operations_research::pdlp::PointType PointMetadata::_internal_point_type() const {
  return static_cast< ::operations_research::pdlp::PointType >(_impl_.point_type_);
}
inline ::operations_research::pdlp::PointType PointMetadata::point_type() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.PointMetadata.point_type)
  return _internal_point_type();
}
inline void PointMetadata::_internal_set_point_type(::operations_research::pdlp::PointType value) {
  assert(::operations_research::pdlp::PointType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.point_type_ = value;
}
inline void PointMetadata::set_point_type(::operations_research::pdlp::PointType value) {
  _internal_set_point_type(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.PointMetadata.point_type)
}

// repeated double random_primal_projections = 2 [packed = true];
inline int PointMetadata::_internal_random_primal_projections_size() const {
  return _impl_.random_primal_projections_.size();
}
inline int PointMetadata::random_primal_projections_size() const {
  return _internal_random_primal_projections_size();
}
inline void PointMetadata::clear_random_primal_projections() {
  _impl_.random_primal_projections_.Clear();
}
inline double PointMetadata::_internal_random_primal_projections(int index) const {
  return _impl_.random_primal_projections_.Get(index);
}
inline double PointMetadata::random_primal_projections(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.PointMetadata.random_primal_projections)
  return _internal_random_primal_projections(index);
}
inline void PointMetadata::set_random_primal_projections(int index, double value) {
  _impl_.random_primal_projections_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.PointMetadata.random_primal_projections)
}
inline void PointMetadata::_internal_add_random_primal_projections(double value) {
  _impl_.random_primal_projections_.Add(value);
}
inline void PointMetadata::add_random_primal_projections(double value) {
  _internal_add_random_primal_projections(value);
  // @@protoc_insertion_point(field_add:operations_research.pdlp.PointMetadata.random_primal_projections)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PointMetadata::_internal_random_primal_projections() const {
  return _impl_.random_primal_projections_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PointMetadata::random_primal_projections() const {
  // @@protoc_insertion_point(field_list:operations_research.pdlp.PointMetadata.random_primal_projections)
  return _internal_random_primal_projections();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PointMetadata::_internal_mutable_random_primal_projections() {
  return &_impl_.random_primal_projections_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PointMetadata::mutable_random_primal_projections() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.pdlp.PointMetadata.random_primal_projections)
  return _internal_mutable_random_primal_projections();
}

// repeated double random_dual_projections = 3 [packed = true];
inline int PointMetadata::_internal_random_dual_projections_size() const {
  return _impl_.random_dual_projections_.size();
}
inline int PointMetadata::random_dual_projections_size() const {
  return _internal_random_dual_projections_size();
}
inline void PointMetadata::clear_random_dual_projections() {
  _impl_.random_dual_projections_.Clear();
}
inline double PointMetadata::_internal_random_dual_projections(int index) const {
  return _impl_.random_dual_projections_.Get(index);
}
inline double PointMetadata::random_dual_projections(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.PointMetadata.random_dual_projections)
  return _internal_random_dual_projections(index);
}
inline void PointMetadata::set_random_dual_projections(int index, double value) {
  _impl_.random_dual_projections_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.PointMetadata.random_dual_projections)
}
inline void PointMetadata::_internal_add_random_dual_projections(double value) {
  _impl_.random_dual_projections_.Add(value);
}
inline void PointMetadata::add_random_dual_projections(double value) {
  _internal_add_random_dual_projections(value);
  // @@protoc_insertion_point(field_add:operations_research.pdlp.PointMetadata.random_dual_projections)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PointMetadata::_internal_random_dual_projections() const {
  return _impl_.random_dual_projections_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PointMetadata::random_dual_projections() const {
  // @@protoc_insertion_point(field_list:operations_research.pdlp.PointMetadata.random_dual_projections)
  return _internal_random_dual_projections();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PointMetadata::_internal_mutable_random_dual_projections() {
  return &_impl_.random_dual_projections_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PointMetadata::mutable_random_dual_projections() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.pdlp.PointMetadata.random_dual_projections)
  return _internal_mutable_random_dual_projections();
}

// optional int64 active_primal_variable_count = 4;
inline bool PointMetadata::_internal_has_active_primal_variable_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PointMetadata::has_active_primal_variable_count() const {
  return _internal_has_active_primal_variable_count();
}
inline void PointMetadata::clear_active_primal_variable_count() {
  _impl_.active_primal_variable_count_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t PointMetadata::_internal_active_primal_variable_count() const {
  return _impl_.active_primal_variable_count_;
}
inline int64_t PointMetadata::active_primal_variable_count() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.PointMetadata.active_primal_variable_count)
  return _internal_active_primal_variable_count();
}
inline void PointMetadata::_internal_set_active_primal_variable_count(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.active_primal_variable_count_ = value;
}
inline void PointMetadata::set_active_primal_variable_count(int64_t value) {
  _internal_set_active_primal_variable_count(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.PointMetadata.active_primal_variable_count)
}

// optional int64 active_dual_variable_count = 5;
inline bool PointMetadata::_internal_has_active_dual_variable_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PointMetadata::has_active_dual_variable_count() const {
  return _internal_has_active_dual_variable_count();
}
inline void PointMetadata::clear_active_dual_variable_count() {
  _impl_.active_dual_variable_count_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t PointMetadata::_internal_active_dual_variable_count() const {
  return _impl_.active_dual_variable_count_;
}
inline int64_t PointMetadata::active_dual_variable_count() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.PointMetadata.active_dual_variable_count)
  return _internal_active_dual_variable_count();
}
inline void PointMetadata::_internal_set_active_dual_variable_count(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.active_dual_variable_count_ = value;
}
inline void PointMetadata::set_active_dual_variable_count(int64_t value) {
  _internal_set_active_dual_variable_count(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.PointMetadata.active_dual_variable_count)
}

// optional int64 active_primal_variable_change = 6;
inline bool PointMetadata::_internal_has_active_primal_variable_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PointMetadata::has_active_primal_variable_change() const {
  return _internal_has_active_primal_variable_change();
}
inline void PointMetadata::clear_active_primal_variable_change() {
  _impl_.active_primal_variable_change_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t PointMetadata::_internal_active_primal_variable_change() const {
  return _impl_.active_primal_variable_change_;
}
inline int64_t PointMetadata::active_primal_variable_change() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.PointMetadata.active_primal_variable_change)
  return _internal_active_primal_variable_change();
}
inline void PointMetadata::_internal_set_active_primal_variable_change(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.active_primal_variable_change_ = value;
}
inline void PointMetadata::set_active_primal_variable_change(int64_t value) {
  _internal_set_active_primal_variable_change(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.PointMetadata.active_primal_variable_change)
}

// optional int64 active_dual_variable_change = 7;
inline bool PointMetadata::_internal_has_active_dual_variable_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PointMetadata::has_active_dual_variable_change() const {
  return _internal_has_active_dual_variable_change();
}
inline void PointMetadata::clear_active_dual_variable_change() {
  _impl_.active_dual_variable_change_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t PointMetadata::_internal_active_dual_variable_change() const {
  return _impl_.active_dual_variable_change_;
}
inline int64_t PointMetadata::active_dual_variable_change() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.PointMetadata.active_dual_variable_change)
  return _internal_active_dual_variable_change();
}
inline void PointMetadata::_internal_set_active_dual_variable_change(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.active_dual_variable_change_ = value;
}
inline void PointMetadata::set_active_dual_variable_change(int64_t value) {
  _internal_set_active_dual_variable_change(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.PointMetadata.active_dual_variable_change)
}

// -------------------------------------------------------------------

// IterationStats

// optional int32 iteration_number = 1;
inline bool IterationStats::_internal_has_iteration_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IterationStats::has_iteration_number() const {
  return _internal_has_iteration_number();
}
inline void IterationStats::clear_iteration_number() {
  _impl_.iteration_number_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t IterationStats::_internal_iteration_number() const {
  return _impl_.iteration_number_;
}
inline int32_t IterationStats::iteration_number() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.IterationStats.iteration_number)
  return _internal_iteration_number();
}
inline void IterationStats::_internal_set_iteration_number(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.iteration_number_ = value;
}
inline void IterationStats::set_iteration_number(int32_t value) {
  _internal_set_iteration_number(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.IterationStats.iteration_number)
}

// repeated .operations_research.pdlp.ConvergenceInformation convergence_information = 2;
inline int IterationStats::_internal_convergence_information_size() const {
  return _impl_.convergence_information_.size();
}
inline int IterationStats::convergence_information_size() const {
  return _internal_convergence_information_size();
}
inline void IterationStats::clear_convergence_information() {
  _impl_.convergence_information_.Clear();
}
inline ::operations_research::pdlp::ConvergenceInformation* IterationStats::mutable_convergence_information(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.IterationStats.convergence_information)
  return _impl_.convergence_information_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::pdlp::ConvergenceInformation >*
IterationStats::mutable_convergence_information() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.pdlp.IterationStats.convergence_information)
  return &_impl_.convergence_information_;
}
inline const ::operations_research::pdlp::ConvergenceInformation& IterationStats::_internal_convergence_information(int index) const {
  return _impl_.convergence_information_.Get(index);
}
inline const ::operations_research::pdlp::ConvergenceInformation& IterationStats::convergence_information(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.IterationStats.convergence_information)
  return _internal_convergence_information(index);
}
inline ::operations_research::pdlp::ConvergenceInformation* IterationStats::_internal_add_convergence_information() {
  return _impl_.convergence_information_.Add();
}
inline ::operations_research::pdlp::ConvergenceInformation* IterationStats::add_convergence_information() {
  ::operations_research::pdlp::ConvergenceInformation* _add = _internal_add_convergence_information();
  // @@protoc_insertion_point(field_add:operations_research.pdlp.IterationStats.convergence_information)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::pdlp::ConvergenceInformation >&
IterationStats::convergence_information() const {
  // @@protoc_insertion_point(field_list:operations_research.pdlp.IterationStats.convergence_information)
  return _impl_.convergence_information_;
}

// repeated .operations_research.pdlp.InfeasibilityInformation infeasibility_information = 3;
inline int IterationStats::_internal_infeasibility_information_size() const {
  return _impl_.infeasibility_information_.size();
}
inline int IterationStats::infeasibility_information_size() const {
  return _internal_infeasibility_information_size();
}
inline void IterationStats::clear_infeasibility_information() {
  _impl_.infeasibility_information_.Clear();
}
inline ::operations_research::pdlp::InfeasibilityInformation* IterationStats::mutable_infeasibility_information(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.IterationStats.infeasibility_information)
  return _impl_.infeasibility_information_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::pdlp::InfeasibilityInformation >*
IterationStats::mutable_infeasibility_information() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.pdlp.IterationStats.infeasibility_information)
  return &_impl_.infeasibility_information_;
}
inline const ::operations_research::pdlp::InfeasibilityInformation& IterationStats::_internal_infeasibility_information(int index) const {
  return _impl_.infeasibility_information_.Get(index);
}
inline const ::operations_research::pdlp::InfeasibilityInformation& IterationStats::infeasibility_information(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.IterationStats.infeasibility_information)
  return _internal_infeasibility_information(index);
}
inline ::operations_research::pdlp::InfeasibilityInformation* IterationStats::_internal_add_infeasibility_information() {
  return _impl_.infeasibility_information_.Add();
}
inline ::operations_research::pdlp::InfeasibilityInformation* IterationStats::add_infeasibility_information() {
  ::operations_research::pdlp::InfeasibilityInformation* _add = _internal_add_infeasibility_information();
  // @@protoc_insertion_point(field_add:operations_research.pdlp.IterationStats.infeasibility_information)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::pdlp::InfeasibilityInformation >&
IterationStats::infeasibility_information() const {
  // @@protoc_insertion_point(field_list:operations_research.pdlp.IterationStats.infeasibility_information)
  return _impl_.infeasibility_information_;
}

// repeated .operations_research.pdlp.PointMetadata point_metadata = 11;
inline int IterationStats::_internal_point_metadata_size() const {
  return _impl_.point_metadata_.size();
}
inline int IterationStats::point_metadata_size() const {
  return _internal_point_metadata_size();
}
inline void IterationStats::clear_point_metadata() {
  _impl_.point_metadata_.Clear();
}
inline ::operations_research::pdlp::PointMetadata* IterationStats::mutable_point_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.IterationStats.point_metadata)
  return _impl_.point_metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::pdlp::PointMetadata >*
IterationStats::mutable_point_metadata() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.pdlp.IterationStats.point_metadata)
  return &_impl_.point_metadata_;
}
inline const ::operations_research::pdlp::PointMetadata& IterationStats::_internal_point_metadata(int index) const {
  return _impl_.point_metadata_.Get(index);
}
inline const ::operations_research::pdlp::PointMetadata& IterationStats::point_metadata(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.IterationStats.point_metadata)
  return _internal_point_metadata(index);
}
inline ::operations_research::pdlp::PointMetadata* IterationStats::_internal_add_point_metadata() {
  return _impl_.point_metadata_.Add();
}
inline ::operations_research::pdlp::PointMetadata* IterationStats::add_point_metadata() {
  ::operations_research::pdlp::PointMetadata* _add = _internal_add_point_metadata();
  // @@protoc_insertion_point(field_add:operations_research.pdlp.IterationStats.point_metadata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::pdlp::PointMetadata >&
IterationStats::point_metadata() const {
  // @@protoc_insertion_point(field_list:operations_research.pdlp.IterationStats.point_metadata)
  return _impl_.point_metadata_;
}

// optional double cumulative_kkt_matrix_passes = 4;
inline bool IterationStats::_internal_has_cumulative_kkt_matrix_passes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IterationStats::has_cumulative_kkt_matrix_passes() const {
  return _internal_has_cumulative_kkt_matrix_passes();
}
inline void IterationStats::clear_cumulative_kkt_matrix_passes() {
  _impl_.cumulative_kkt_matrix_passes_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double IterationStats::_internal_cumulative_kkt_matrix_passes() const {
  return _impl_.cumulative_kkt_matrix_passes_;
}
inline double IterationStats::cumulative_kkt_matrix_passes() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.IterationStats.cumulative_kkt_matrix_passes)
  return _internal_cumulative_kkt_matrix_passes();
}
inline void IterationStats::_internal_set_cumulative_kkt_matrix_passes(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cumulative_kkt_matrix_passes_ = value;
}
inline void IterationStats::set_cumulative_kkt_matrix_passes(double value) {
  _internal_set_cumulative_kkt_matrix_passes(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.IterationStats.cumulative_kkt_matrix_passes)
}

// optional int32 cumulative_rejected_steps = 5;
inline bool IterationStats::_internal_has_cumulative_rejected_steps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IterationStats::has_cumulative_rejected_steps() const {
  return _internal_has_cumulative_rejected_steps();
}
inline void IterationStats::clear_cumulative_rejected_steps() {
  _impl_.cumulative_rejected_steps_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t IterationStats::_internal_cumulative_rejected_steps() const {
  return _impl_.cumulative_rejected_steps_;
}
inline int32_t IterationStats::cumulative_rejected_steps() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.IterationStats.cumulative_rejected_steps)
  return _internal_cumulative_rejected_steps();
}
inline void IterationStats::_internal_set_cumulative_rejected_steps(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cumulative_rejected_steps_ = value;
}
inline void IterationStats::set_cumulative_rejected_steps(int32_t value) {
  _internal_set_cumulative_rejected_steps(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.IterationStats.cumulative_rejected_steps)
}

// optional double cumulative_time_sec = 6;
inline bool IterationStats::_internal_has_cumulative_time_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IterationStats::has_cumulative_time_sec() const {
  return _internal_has_cumulative_time_sec();
}
inline void IterationStats::clear_cumulative_time_sec() {
  _impl_.cumulative_time_sec_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double IterationStats::_internal_cumulative_time_sec() const {
  return _impl_.cumulative_time_sec_;
}
inline double IterationStats::cumulative_time_sec() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.IterationStats.cumulative_time_sec)
  return _internal_cumulative_time_sec();
}
inline void IterationStats::_internal_set_cumulative_time_sec(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.cumulative_time_sec_ = value;
}
inline void IterationStats::set_cumulative_time_sec(double value) {
  _internal_set_cumulative_time_sec(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.IterationStats.cumulative_time_sec)
}

// optional .operations_research.pdlp.RestartChoice restart_used = 7;
inline bool IterationStats::_internal_has_restart_used() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool IterationStats::has_restart_used() const {
  return _internal_has_restart_used();
}
inline void IterationStats::clear_restart_used() {
  _impl_.restart_used_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::operations_research::pdlp::RestartChoice IterationStats::_internal_restart_used() const {
  return static_cast< ::operations_research::pdlp::RestartChoice >(_impl_.restart_used_);
}
inline ::operations_research::pdlp::RestartChoice IterationStats::restart_used() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.IterationStats.restart_used)
  return _internal_restart_used();
}
inline void IterationStats::_internal_set_restart_used(::operations_research::pdlp::RestartChoice value) {
  assert(::operations_research::pdlp::RestartChoice_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.restart_used_ = value;
}
inline void IterationStats::set_restart_used(::operations_research::pdlp::RestartChoice value) {
  _internal_set_restart_used(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.IterationStats.restart_used)
}

// optional double step_size = 8;
inline bool IterationStats::_internal_has_step_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IterationStats::has_step_size() const {
  return _internal_has_step_size();
}
inline void IterationStats::clear_step_size() {
  _impl_.step_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double IterationStats::_internal_step_size() const {
  return _impl_.step_size_;
}
inline double IterationStats::step_size() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.IterationStats.step_size)
  return _internal_step_size();
}
inline void IterationStats::_internal_set_step_size(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.step_size_ = value;
}
inline void IterationStats::set_step_size(double value) {
  _internal_set_step_size(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.IterationStats.step_size)
}

// optional double primal_weight = 9;
inline bool IterationStats::_internal_has_primal_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool IterationStats::has_primal_weight() const {
  return _internal_has_primal_weight();
}
inline void IterationStats::clear_primal_weight() {
  _impl_.primal_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double IterationStats::_internal_primal_weight() const {
  return _impl_.primal_weight_;
}
inline double IterationStats::primal_weight() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.IterationStats.primal_weight)
  return _internal_primal_weight();
}
inline void IterationStats::_internal_set_primal_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.primal_weight_ = value;
}
inline void IterationStats::set_primal_weight(double value) {
  _internal_set_primal_weight(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.IterationStats.primal_weight)
}

// -------------------------------------------------------------------

// SolveLog

// optional string instance_name = 1;
inline bool SolveLog::_internal_has_instance_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SolveLog::has_instance_name() const {
  return _internal_has_instance_name();
}
inline void SolveLog::clear_instance_name() {
  _impl_.instance_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SolveLog::instance_name() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.instance_name)
  return _internal_instance_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SolveLog::set_instance_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.instance_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:operations_research.pdlp.SolveLog.instance_name)
}
inline std::string* SolveLog::mutable_instance_name() {
  std::string* _s = _internal_mutable_instance_name();
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.SolveLog.instance_name)
  return _s;
}
inline const std::string& SolveLog::_internal_instance_name() const {
  return _impl_.instance_name_.Get();
}
inline void SolveLog::_internal_set_instance_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.instance_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SolveLog::_internal_mutable_instance_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.instance_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SolveLog::release_instance_name() {
  // @@protoc_insertion_point(field_release:operations_research.pdlp.SolveLog.instance_name)
  if (!_internal_has_instance_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.instance_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instance_name_.IsDefault()) {
    _impl_.instance_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SolveLog::set_allocated_instance_name(std::string* instance_name) {
  if (instance_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.instance_name_.SetAllocated(instance_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instance_name_.IsDefault()) {
    _impl_.instance_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.pdlp.SolveLog.instance_name)
}

// optional .operations_research.pdlp.PrimalDualHybridGradientParams params = 14;
inline bool SolveLog::_internal_has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline bool SolveLog::has_params() const {
  return _internal_has_params();
}
inline const ::operations_research::pdlp::PrimalDualHybridGradientParams& SolveLog::_internal_params() const {
  const ::operations_research::pdlp::PrimalDualHybridGradientParams* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::pdlp::PrimalDualHybridGradientParams&>(
      ::operations_research::pdlp::_PrimalDualHybridGradientParams_default_instance_);
}
inline const ::operations_research::pdlp::PrimalDualHybridGradientParams& SolveLog::params() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.params)
  return _internal_params();
}
inline void SolveLog::unsafe_arena_set_allocated_params(
    ::operations_research::pdlp::PrimalDualHybridGradientParams* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.pdlp.SolveLog.params)
}
inline ::operations_research::pdlp::PrimalDualHybridGradientParams* SolveLog::release_params() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::operations_research::pdlp::PrimalDualHybridGradientParams* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::pdlp::PrimalDualHybridGradientParams* SolveLog::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:operations_research.pdlp.SolveLog.params)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::operations_research::pdlp::PrimalDualHybridGradientParams* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::operations_research::pdlp::PrimalDualHybridGradientParams* SolveLog::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::pdlp::PrimalDualHybridGradientParams>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::operations_research::pdlp::PrimalDualHybridGradientParams* SolveLog::mutable_params() {
  ::operations_research::pdlp::PrimalDualHybridGradientParams* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.SolveLog.params)
  return _msg;
}
inline void SolveLog::set_allocated_params(::operations_research::pdlp::PrimalDualHybridGradientParams* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:operations_research.pdlp.SolveLog.params)
}

// optional .operations_research.pdlp.TerminationReason termination_reason = 3;
inline bool SolveLog::_internal_has_termination_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SolveLog::has_termination_reason() const {
  return _internal_has_termination_reason();
}
inline void SolveLog::clear_termination_reason() {
  _impl_.termination_reason_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::operations_research::pdlp::TerminationReason SolveLog::_internal_termination_reason() const {
  return static_cast< ::operations_research::pdlp::TerminationReason >(_impl_.termination_reason_);
}
inline ::operations_research::pdlp::TerminationReason SolveLog::termination_reason() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.termination_reason)
  return _internal_termination_reason();
}
inline void SolveLog::_internal_set_termination_reason(::operations_research::pdlp::TerminationReason value) {
  assert(::operations_research::pdlp::TerminationReason_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.termination_reason_ = value;
}
inline void SolveLog::set_termination_reason(::operations_research::pdlp::TerminationReason value) {
  _internal_set_termination_reason(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.SolveLog.termination_reason)
}

// optional string termination_string = 4;
inline bool SolveLog::_internal_has_termination_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SolveLog::has_termination_string() const {
  return _internal_has_termination_string();
}
inline void SolveLog::clear_termination_string() {
  _impl_.termination_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SolveLog::termination_string() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.termination_string)
  return _internal_termination_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SolveLog::set_termination_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.termination_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:operations_research.pdlp.SolveLog.termination_string)
}
inline std::string* SolveLog::mutable_termination_string() {
  std::string* _s = _internal_mutable_termination_string();
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.SolveLog.termination_string)
  return _s;
}
inline const std::string& SolveLog::_internal_termination_string() const {
  return _impl_.termination_string_.Get();
}
inline void SolveLog::_internal_set_termination_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.termination_string_.Set(value, GetArenaForAllocation());
}
inline std::string* SolveLog::_internal_mutable_termination_string() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.termination_string_.Mutable(GetArenaForAllocation());
}
inline std::string* SolveLog::release_termination_string() {
  // @@protoc_insertion_point(field_release:operations_research.pdlp.SolveLog.termination_string)
  if (!_internal_has_termination_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.termination_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.termination_string_.IsDefault()) {
    _impl_.termination_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SolveLog::set_allocated_termination_string(std::string* termination_string) {
  if (termination_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.termination_string_.SetAllocated(termination_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.termination_string_.IsDefault()) {
    _impl_.termination_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.pdlp.SolveLog.termination_string)
}

// optional int32 iteration_count = 5;
inline bool SolveLog::_internal_has_iteration_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SolveLog::has_iteration_count() const {
  return _internal_has_iteration_count();
}
inline void SolveLog::clear_iteration_count() {
  _impl_.iteration_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t SolveLog::_internal_iteration_count() const {
  return _impl_.iteration_count_;
}
inline int32_t SolveLog::iteration_count() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.iteration_count)
  return _internal_iteration_count();
}
inline void SolveLog::_internal_set_iteration_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.iteration_count_ = value;
}
inline void SolveLog::set_iteration_count(int32_t value) {
  _internal_set_iteration_count(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.SolveLog.iteration_count)
}

// optional double preprocessing_time_sec = 13;
inline bool SolveLog::_internal_has_preprocessing_time_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SolveLog::has_preprocessing_time_sec() const {
  return _internal_has_preprocessing_time_sec();
}
inline void SolveLog::clear_preprocessing_time_sec() {
  _impl_.preprocessing_time_sec_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double SolveLog::_internal_preprocessing_time_sec() const {
  return _impl_.preprocessing_time_sec_;
}
inline double SolveLog::preprocessing_time_sec() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.preprocessing_time_sec)
  return _internal_preprocessing_time_sec();
}
inline void SolveLog::_internal_set_preprocessing_time_sec(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.preprocessing_time_sec_ = value;
}
inline void SolveLog::set_preprocessing_time_sec(double value) {
  _internal_set_preprocessing_time_sec(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.SolveLog.preprocessing_time_sec)
}

// optional double solve_time_sec = 6;
inline bool SolveLog::_internal_has_solve_time_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SolveLog::has_solve_time_sec() const {
  return _internal_has_solve_time_sec();
}
inline void SolveLog::clear_solve_time_sec() {
  _impl_.solve_time_sec_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double SolveLog::_internal_solve_time_sec() const {
  return _impl_.solve_time_sec_;
}
inline double SolveLog::solve_time_sec() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.solve_time_sec)
  return _internal_solve_time_sec();
}
inline void SolveLog::_internal_set_solve_time_sec(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.solve_time_sec_ = value;
}
inline void SolveLog::set_solve_time_sec(double value) {
  _internal_set_solve_time_sec(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.SolveLog.solve_time_sec)
}

// optional .operations_research.pdlp.IterationStats solution_stats = 8;
inline bool SolveLog::_internal_has_solution_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solution_stats_ != nullptr);
  return value;
}
inline bool SolveLog::has_solution_stats() const {
  return _internal_has_solution_stats();
}
inline void SolveLog::clear_solution_stats() {
  if (_impl_.solution_stats_ != nullptr) _impl_.solution_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::operations_research::pdlp::IterationStats& SolveLog::_internal_solution_stats() const {
  const ::operations_research::pdlp::IterationStats* p = _impl_.solution_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::pdlp::IterationStats&>(
      ::operations_research::pdlp::_IterationStats_default_instance_);
}
inline const ::operations_research::pdlp::IterationStats& SolveLog::solution_stats() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.solution_stats)
  return _internal_solution_stats();
}
inline void SolveLog::unsafe_arena_set_allocated_solution_stats(
    ::operations_research::pdlp::IterationStats* solution_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.solution_stats_);
  }
  _impl_.solution_stats_ = solution_stats;
  if (solution_stats) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.pdlp.SolveLog.solution_stats)
}
inline ::operations_research::pdlp::IterationStats* SolveLog::release_solution_stats() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::operations_research::pdlp::IterationStats* temp = _impl_.solution_stats_;
  _impl_.solution_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::pdlp::IterationStats* SolveLog::unsafe_arena_release_solution_stats() {
  // @@protoc_insertion_point(field_release:operations_research.pdlp.SolveLog.solution_stats)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::operations_research::pdlp::IterationStats* temp = _impl_.solution_stats_;
  _impl_.solution_stats_ = nullptr;
  return temp;
}
inline ::operations_research::pdlp::IterationStats* SolveLog::_internal_mutable_solution_stats() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.solution_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::pdlp::IterationStats>(GetArenaForAllocation());
    _impl_.solution_stats_ = p;
  }
  return _impl_.solution_stats_;
}
inline ::operations_research::pdlp::IterationStats* SolveLog::mutable_solution_stats() {
  ::operations_research::pdlp::IterationStats* _msg = _internal_mutable_solution_stats();
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.SolveLog.solution_stats)
  return _msg;
}
inline void SolveLog::set_allocated_solution_stats(::operations_research::pdlp::IterationStats* solution_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.solution_stats_;
  }
  if (solution_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(solution_stats);
    if (message_arena != submessage_arena) {
      solution_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solution_stats, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.solution_stats_ = solution_stats;
  // @@protoc_insertion_point(field_set_allocated:operations_research.pdlp.SolveLog.solution_stats)
}

// optional .operations_research.pdlp.PointType solution_type = 10;
inline bool SolveLog::_internal_has_solution_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SolveLog::has_solution_type() const {
  return _internal_has_solution_type();
}
inline void SolveLog::clear_solution_type() {
  _impl_.solution_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::operations_research::pdlp::PointType SolveLog::_internal_solution_type() const {
  return static_cast< ::operations_research::pdlp::PointType >(_impl_.solution_type_);
}
inline ::operations_research::pdlp::PointType SolveLog::solution_type() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.solution_type)
  return _internal_solution_type();
}
inline void SolveLog::_internal_set_solution_type(::operations_research::pdlp::PointType value) {
  assert(::operations_research::pdlp::PointType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.solution_type_ = value;
}
inline void SolveLog::set_solution_type(::operations_research::pdlp::PointType value) {
  _internal_set_solution_type(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.SolveLog.solution_type)
}

// repeated .operations_research.pdlp.IterationStats iteration_stats = 7;
inline int SolveLog::_internal_iteration_stats_size() const {
  return _impl_.iteration_stats_.size();
}
inline int SolveLog::iteration_stats_size() const {
  return _internal_iteration_stats_size();
}
inline void SolveLog::clear_iteration_stats() {
  _impl_.iteration_stats_.Clear();
}
inline ::operations_research::pdlp::IterationStats* SolveLog::mutable_iteration_stats(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.SolveLog.iteration_stats)
  return _impl_.iteration_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::pdlp::IterationStats >*
SolveLog::mutable_iteration_stats() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.pdlp.SolveLog.iteration_stats)
  return &_impl_.iteration_stats_;
}
inline const ::operations_research::pdlp::IterationStats& SolveLog::_internal_iteration_stats(int index) const {
  return _impl_.iteration_stats_.Get(index);
}
inline const ::operations_research::pdlp::IterationStats& SolveLog::iteration_stats(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.iteration_stats)
  return _internal_iteration_stats(index);
}
inline ::operations_research::pdlp::IterationStats* SolveLog::_internal_add_iteration_stats() {
  return _impl_.iteration_stats_.Add();
}
inline ::operations_research::pdlp::IterationStats* SolveLog::add_iteration_stats() {
  ::operations_research::pdlp::IterationStats* _add = _internal_add_iteration_stats();
  // @@protoc_insertion_point(field_add:operations_research.pdlp.SolveLog.iteration_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::pdlp::IterationStats >&
SolveLog::iteration_stats() const {
  // @@protoc_insertion_point(field_list:operations_research.pdlp.SolveLog.iteration_stats)
  return _impl_.iteration_stats_;
}

// optional .operations_research.pdlp.QuadraticProgramStats original_problem_stats = 11;
inline bool SolveLog::_internal_has_original_problem_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.original_problem_stats_ != nullptr);
  return value;
}
inline bool SolveLog::has_original_problem_stats() const {
  return _internal_has_original_problem_stats();
}
inline void SolveLog::clear_original_problem_stats() {
  if (_impl_.original_problem_stats_ != nullptr) _impl_.original_problem_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::operations_research::pdlp::QuadraticProgramStats& SolveLog::_internal_original_problem_stats() const {
  const ::operations_research::pdlp::QuadraticProgramStats* p = _impl_.original_problem_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::pdlp::QuadraticProgramStats&>(
      ::operations_research::pdlp::_QuadraticProgramStats_default_instance_);
}
inline const ::operations_research::pdlp::QuadraticProgramStats& SolveLog::original_problem_stats() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.original_problem_stats)
  return _internal_original_problem_stats();
}
inline void SolveLog::unsafe_arena_set_allocated_original_problem_stats(
    ::operations_research::pdlp::QuadraticProgramStats* original_problem_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.original_problem_stats_);
  }
  _impl_.original_problem_stats_ = original_problem_stats;
  if (original_problem_stats) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.pdlp.SolveLog.original_problem_stats)
}
inline ::operations_research::pdlp::QuadraticProgramStats* SolveLog::release_original_problem_stats() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::operations_research::pdlp::QuadraticProgramStats* temp = _impl_.original_problem_stats_;
  _impl_.original_problem_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::pdlp::QuadraticProgramStats* SolveLog::unsafe_arena_release_original_problem_stats() {
  // @@protoc_insertion_point(field_release:operations_research.pdlp.SolveLog.original_problem_stats)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::operations_research::pdlp::QuadraticProgramStats* temp = _impl_.original_problem_stats_;
  _impl_.original_problem_stats_ = nullptr;
  return temp;
}
inline ::operations_research::pdlp::QuadraticProgramStats* SolveLog::_internal_mutable_original_problem_stats() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.original_problem_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::pdlp::QuadraticProgramStats>(GetArenaForAllocation());
    _impl_.original_problem_stats_ = p;
  }
  return _impl_.original_problem_stats_;
}
inline ::operations_research::pdlp::QuadraticProgramStats* SolveLog::mutable_original_problem_stats() {
  ::operations_research::pdlp::QuadraticProgramStats* _msg = _internal_mutable_original_problem_stats();
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.SolveLog.original_problem_stats)
  return _msg;
}
inline void SolveLog::set_allocated_original_problem_stats(::operations_research::pdlp::QuadraticProgramStats* original_problem_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.original_problem_stats_;
  }
  if (original_problem_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(original_problem_stats);
    if (message_arena != submessage_arena) {
      original_problem_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_problem_stats, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.original_problem_stats_ = original_problem_stats;
  // @@protoc_insertion_point(field_set_allocated:operations_research.pdlp.SolveLog.original_problem_stats)
}

// optional .operations_research.pdlp.QuadraticProgramStats preprocessed_problem_stats = 12;
inline bool SolveLog::_internal_has_preprocessed_problem_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.preprocessed_problem_stats_ != nullptr);
  return value;
}
inline bool SolveLog::has_preprocessed_problem_stats() const {
  return _internal_has_preprocessed_problem_stats();
}
inline void SolveLog::clear_preprocessed_problem_stats() {
  if (_impl_.preprocessed_problem_stats_ != nullptr) _impl_.preprocessed_problem_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::operations_research::pdlp::QuadraticProgramStats& SolveLog::_internal_preprocessed_problem_stats() const {
  const ::operations_research::pdlp::QuadraticProgramStats* p = _impl_.preprocessed_problem_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::pdlp::QuadraticProgramStats&>(
      ::operations_research::pdlp::_QuadraticProgramStats_default_instance_);
}
inline const ::operations_research::pdlp::QuadraticProgramStats& SolveLog::preprocessed_problem_stats() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.preprocessed_problem_stats)
  return _internal_preprocessed_problem_stats();
}
inline void SolveLog::unsafe_arena_set_allocated_preprocessed_problem_stats(
    ::operations_research::pdlp::QuadraticProgramStats* preprocessed_problem_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.preprocessed_problem_stats_);
  }
  _impl_.preprocessed_problem_stats_ = preprocessed_problem_stats;
  if (preprocessed_problem_stats) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.pdlp.SolveLog.preprocessed_problem_stats)
}
inline ::operations_research::pdlp::QuadraticProgramStats* SolveLog::release_preprocessed_problem_stats() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::operations_research::pdlp::QuadraticProgramStats* temp = _impl_.preprocessed_problem_stats_;
  _impl_.preprocessed_problem_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::pdlp::QuadraticProgramStats* SolveLog::unsafe_arena_release_preprocessed_problem_stats() {
  // @@protoc_insertion_point(field_release:operations_research.pdlp.SolveLog.preprocessed_problem_stats)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::operations_research::pdlp::QuadraticProgramStats* temp = _impl_.preprocessed_problem_stats_;
  _impl_.preprocessed_problem_stats_ = nullptr;
  return temp;
}
inline ::operations_research::pdlp::QuadraticProgramStats* SolveLog::_internal_mutable_preprocessed_problem_stats() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.preprocessed_problem_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::pdlp::QuadraticProgramStats>(GetArenaForAllocation());
    _impl_.preprocessed_problem_stats_ = p;
  }
  return _impl_.preprocessed_problem_stats_;
}
inline ::operations_research::pdlp::QuadraticProgramStats* SolveLog::mutable_preprocessed_problem_stats() {
  ::operations_research::pdlp::QuadraticProgramStats* _msg = _internal_mutable_preprocessed_problem_stats();
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.SolveLog.preprocessed_problem_stats)
  return _msg;
}
inline void SolveLog::set_allocated_preprocessed_problem_stats(::operations_research::pdlp::QuadraticProgramStats* preprocessed_problem_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.preprocessed_problem_stats_;
  }
  if (preprocessed_problem_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(preprocessed_problem_stats);
    if (message_arena != submessage_arena) {
      preprocessed_problem_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preprocessed_problem_stats, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.preprocessed_problem_stats_ = preprocessed_problem_stats;
  // @@protoc_insertion_point(field_set_allocated:operations_research.pdlp.SolveLog.preprocessed_problem_stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pdlp
}  // namespace operations_research

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::operations_research::pdlp::RestartChoice> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::pdlp::RestartChoice>() {
  return ::operations_research::pdlp::RestartChoice_descriptor();
}
template <> struct is_proto_enum< ::operations_research::pdlp::PointType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::pdlp::PointType>() {
  return ::operations_research::pdlp::PointType_descriptor();
}
template <> struct is_proto_enum< ::operations_research::pdlp::TerminationReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::pdlp::TerminationReason>() {
  return ::operations_research::pdlp::TerminationReason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ortools_2fpdlp_2fsolve_5flog_2eproto
